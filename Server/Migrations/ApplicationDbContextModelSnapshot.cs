// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rebbl.Server.Data;

namespace rebbl.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("usercode");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clientid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creationtime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("devicecode");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sessionid");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subjectid");

                    b.HasKey("UserCode")
                        .HasName("pk_devicecodes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("ix_devicecodes_devicecode");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_devicecodes_expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clientid");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("consumedtime");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creationtime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sessionid");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subjectid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Key")
                        .HasName("pk_persistedgrants");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_persistedgrants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasDatabaseName("ix_persistedgrants_subjectid_clientid_type");

                    b.HasIndex("SubjectId", "SessionId", "Type")
                        .HasDatabaseName("ix_persistedgrants_subjectid_sessionid_type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetroleclaims_roleid");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserclaims_userid");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserlogins_userid");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetuserroles_roleid");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("rebbl.Server.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<int>("CoachId")
                        .HasColumnType("integer")
                        .HasColumnName("coachid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("CoachId")
                        .IsUnique()
                        .HasDatabaseName("ix_aspnetusers_coachid");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_coaches");

                    b.ToTable("coaches");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Format")
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer")
                        .HasColumnName("leagueid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Round")
                        .HasColumnType("integer")
                        .HasColumnName("round");

                    b.Property<int>("Rounds")
                        .HasColumnType("integer")
                        .HasColumnName("rounds");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_competitions");

                    b.HasIndex("LeagueId")
                        .HasDatabaseName("ix_competitions_leagueid");

                    b.ToTable("competitions");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AwayCoachId")
                        .HasColumnType("integer")
                        .HasColumnName("awaycoachid");

                    b.Property<int?>("AwayDeath")
                        .HasColumnType("integer")
                        .HasColumnName("awaydeath");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer")
                        .HasColumnName("awayscore");

                    b.Property<int>("AwayTV")
                        .HasColumnType("integer")
                        .HasColumnName("awaytv");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("awayteamid");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competitionid");

                    b.Property<int?>("HomeCoachId")
                        .HasColumnType("integer")
                        .HasColumnName("homecoachid");

                    b.Property<int?>("HomeDeath")
                        .HasColumnType("integer")
                        .HasColumnName("homedeath");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer")
                        .HasColumnName("homescore");

                    b.Property<int>("HomeTV")
                        .HasColumnType("integer")
                        .HasColumnName("hometv");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("hometeamid");

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("matchid");

                    b.Property<string>("MatchType")
                        .HasColumnType("text")
                        .HasColumnName("matchtype");

                    b.Property<string>("MatchUuid")
                        .HasColumnType("text")
                        .HasColumnName("matchuuid");

                    b.Property<int?>("Round")
                        .HasColumnType("integer")
                        .HasColumnName("round");

                    b.Property<string>("Stadium")
                        .HasColumnType("text")
                        .HasColumnName("stadium");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_contests");

                    b.HasIndex("AwayCoachId")
                        .HasDatabaseName("ix_contests_awaycoachid");

                    b.HasIndex("AwayTeamId")
                        .HasDatabaseName("ix_contests_awayteamid");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("ix_contests_competitionid");

                    b.HasIndex("HomeCoachId")
                        .HasDatabaseName("ix_contests_homecoachid");

                    b.HasIndex("HomeTeamId")
                        .HasDatabaseName("ix_contests_hometeamid");

                    b.HasIndex("MatchUuid")
                        .IsUnique()
                        .HasDatabaseName("ix_contests_matchuuid");

                    b.ToTable("contests");
                });

            modelBuilder.Entity("rebbl.Server.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_leagues");

                    b.ToTable("leagues");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AwayCoachId")
                        .HasColumnType("integer")
                        .HasColumnName("awaycoachid");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("awayteamid");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competitionid");

                    b.Property<DateTime>("Finished")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finished");

                    b.Property<int>("HomeCoachId")
                        .HasColumnType("integer")
                        .HasColumnName("homecoachid");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("hometeamid");

                    b.Property<int>("Round")
                        .HasColumnType("integer")
                        .HasColumnName("round");

                    b.Property<string>("Stadium")
                        .HasColumnType("text")
                        .HasColumnName("stadium");

                    b.Property<string>("StadiumEnhancement")
                        .HasColumnType("text")
                        .HasColumnName("stadiumenhancement");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("started");

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.HasAlternateKey("Id", "AwayTeamId")
                        .HasName("ak_matches_id_awayteamid");

                    b.HasAlternateKey("Id", "HomeTeamId")
                        .HasName("ak_matches_id_hometeamid");

                    b.HasIndex("AwayCoachId")
                        .HasDatabaseName("ix_matches_awaycoachid");

                    b.HasIndex("AwayTeamId")
                        .HasDatabaseName("ix_matches_awayteamid");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("ix_matches_competitionid");

                    b.HasIndex("HomeCoachId")
                        .HasDatabaseName("ix_matches_homecoachid");

                    b.HasIndex("HomeTeamId")
                        .HasDatabaseName("ix_matches_hometeamid");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("rebbl.Server.Entities.MatchPlayer", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("text")
                        .HasColumnName("matchid");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("playerid");

                    b.Property<int>("Agility")
                        .HasColumnType("integer")
                        .HasColumnName("agility");

                    b.Property<int>("ArmourValue")
                        .HasColumnType("integer")
                        .HasColumnName("armourvalue");

                    b.Property<string>("CasualtiesState")
                        .HasColumnType("text")
                        .HasColumnName("casualtiesstate");

                    b.Property<string>("CasualtiesSustained")
                        .HasColumnType("text")
                        .HasColumnName("casualtiessustained");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competitionid");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<int>("ExperienceGain")
                        .HasColumnType("integer")
                        .HasColumnName("experiencegain");

                    b.Property<int>("InflictedCasualties")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedcasualties");

                    b.Property<int>("InflictedCatches")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedcatches");

                    b.Property<int>("InflictedDead")
                        .HasColumnType("integer")
                        .HasColumnName("inflicteddead");

                    b.Property<int>("InflictedInjuries")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedinjuries");

                    b.Property<int>("InflictedInterceptions")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedinterceptions");

                    b.Property<int>("InflictedKO")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedko");

                    b.Property<int>("InflictedMetersPassing")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedmeterspassing");

                    b.Property<int>("InflictedMetersRunning")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedmetersrunning");

                    b.Property<int>("InflictedPasses")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedpasses");

                    b.Property<int>("InflictedPushouts")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedpushouts");

                    b.Property<int>("InflictedStuns")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedstuns");

                    b.Property<int>("InflictedTackles")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedtackles");

                    b.Property<int>("InflictedTouchdowns")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedtouchdowns");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("MVP")
                        .HasColumnType("integer")
                        .HasColumnName("mvp");

                    b.Property<int>("MatchPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("matchplayed");

                    b.Property<int>("Movement")
                        .HasColumnType("integer")
                        .HasColumnName("movement");

                    b.Property<int>("Name")
                        .HasColumnType("integer")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Skills")
                        .HasColumnType("text")
                        .HasColumnName("skills");

                    b.Property<int>("Strength")
                        .HasColumnType("integer")
                        .HasColumnName("strength");

                    b.Property<int>("SustainedCasualties")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedcasualties");

                    b.Property<int>("SustainedDead")
                        .HasColumnType("integer")
                        .HasColumnName("sustaineddead");

                    b.Property<int>("SustainedInjuries")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedinjuries");

                    b.Property<int>("SustainedInterceptions")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedinterceptions");

                    b.Property<int>("SustainedKO")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedko");

                    b.Property<int>("SustainedStuns")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedstuns");

                    b.Property<int>("SustainedTackles")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedtackles");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("MatchId", "TeamId", "PlayerId")
                        .HasName("pk_matchplayer");

                    b.ToTable("matchplayer");
                });

            modelBuilder.Entity("rebbl.Server.Entities.MatchTeam", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("text")
                        .HasColumnName("matchid");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    b.Property<int>("CashBeforeMatch")
                        .HasColumnType("integer")
                        .HasColumnName("cashbeforematch");

                    b.Property<int>("CashEarned")
                        .HasColumnType("integer")
                        .HasColumnName("cashearned");

                    b.Property<int>("CashEarnedBeforeConcession")
                        .HasColumnType("integer")
                        .HasColumnName("cashearnedbeforeconcession");

                    b.Property<int>("CashSpentInducements")
                        .HasColumnType("integer")
                        .HasColumnName("cashspentinducements");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer")
                        .HasColumnName("competitionid");

                    b.Property<int>("InflictedCasualties")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedcasualties");

                    b.Property<int>("InflictedCatches")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedcatches");

                    b.Property<int>("InflictedDead")
                        .HasColumnType("integer")
                        .HasColumnName("inflicteddead");

                    b.Property<int>("InflictedInjuries")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedinjuries");

                    b.Property<int>("InflictedInterceptions")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedinterceptions");

                    b.Property<int>("InflictedKO")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedko");

                    b.Property<int>("InflictedMetersPassing")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedmeterspassing");

                    b.Property<int>("InflictedMetersRunning")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedmetersrunning");

                    b.Property<int>("InflictedPasses")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedpasses");

                    b.Property<int>("InflictedPushouts")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedpushouts");

                    b.Property<int>("InflictedTouchdowns")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedtouchdowns");

                    b.Property<int>("Inflictedtackles")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedtackles");

                    b.Property<int>("MVP")
                        .HasColumnType("integer")
                        .HasColumnName("mvp");

                    b.Property<int>("OccupationOwn")
                        .HasColumnType("integer")
                        .HasColumnName("occupationown");

                    b.Property<int>("OccupationTheir")
                        .HasColumnType("integer")
                        .HasColumnName("occupationtheir");

                    b.Property<int>("PopularityBeforeMatch")
                        .HasColumnType("integer")
                        .HasColumnName("popularitybeforematch");

                    b.Property<int>("PopularityGain")
                        .HasColumnType("integer")
                        .HasColumnName("popularitygain");

                    b.Property<int>("PossessionBall")
                        .HasColumnType("integer")
                        .HasColumnName("possessionball");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("SpirallingExpenses")
                        .HasColumnType("integer")
                        .HasColumnName("spirallingexpenses");

                    b.Property<int>("Supporters")
                        .HasColumnType("integer")
                        .HasColumnName("supporters");

                    b.Property<int>("SustainedCasualties")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedcasualties");

                    b.Property<int>("SustainedDead")
                        .HasColumnType("integer")
                        .HasColumnName("sustaineddead");

                    b.Property<int>("SustainedExpulsions")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedexpulsions");

                    b.Property<int>("SustainedInjuries")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedinjuries");

                    b.Property<int>("SustainedKO")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedko");

                    b.Property<int>("TV")
                        .HasColumnType("integer")
                        .HasColumnName("tv");

                    b.Property<int>("WinningsDice")
                        .HasColumnType("integer")
                        .HasColumnName("winningsdice");

                    b.HasKey("MatchId", "TeamId")
                        .HasName("pk_matchteams");

                    b.ToTable("matchteams");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("Agility")
                        .HasColumnType("integer")
                        .HasColumnName("agility");

                    b.Property<int>("ArmourValue")
                        .HasColumnType("integer")
                        .HasColumnName("armourvalue");

                    b.Property<string>("CasualtiesState")
                        .HasColumnType("text")
                        .HasColumnName("casualtiesstate");

                    b.Property<string>("CasualtiesSustained")
                        .HasColumnType("text")
                        .HasColumnName("casualtiessustained");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("gamesplayed");

                    b.Property<int>("InflictedCasualties")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedcasualties");

                    b.Property<int>("InflictedCatches")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedcatches");

                    b.Property<int>("InflictedDead")
                        .HasColumnType("integer")
                        .HasColumnName("inflicteddead");

                    b.Property<int>("InflictedInjuries")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedinjuries");

                    b.Property<int>("InflictedInterceptions")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedinterceptions");

                    b.Property<int>("InflictedKO")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedko");

                    b.Property<int>("InflictedMetersPassing")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedmeterspassing");

                    b.Property<int>("InflictedMetersRunning")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedmetersrunning");

                    b.Property<int>("InflictedPasses")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedpasses");

                    b.Property<int>("InflictedPushouts")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedpushouts");

                    b.Property<int>("InflictedStuns")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedstuns");

                    b.Property<int>("InflictedTackles")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedtackles");

                    b.Property<int>("InflictedTouchdowns")
                        .HasColumnType("integer")
                        .HasColumnName("inflictedtouchdowns");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("MVP")
                        .HasColumnType("integer")
                        .HasColumnName("mvp");

                    b.Property<int>("Movement")
                        .HasColumnType("integer")
                        .HasColumnName("movement");

                    b.Property<int>("Name")
                        .HasColumnType("integer")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Skills")
                        .HasColumnType("text")
                        .HasColumnName("skills");

                    b.Property<int>("Strength")
                        .HasColumnType("integer")
                        .HasColumnName("strength");

                    b.Property<bool>("Suspended")
                        .HasColumnType("boolean")
                        .HasColumnName("suspended");

                    b.Property<int>("SustainedCasualties")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedcasualties");

                    b.Property<int>("SustainedDead")
                        .HasColumnType("integer")
                        .HasColumnName("sustaineddead");

                    b.Property<int>("SustainedInjuries")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedinjuries");

                    b.Property<int>("SustainedInterceptions")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedinterceptions");

                    b.Property<int>("SustainedKO")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedko");

                    b.Property<int>("SustainedStuns")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedstuns");

                    b.Property<int>("SustainedTackles")
                        .HasColumnType("integer")
                        .HasColumnName("sustainedtackles");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("teamid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_player");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_player_teamid");

                    b.ToTable("player");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActualValue")
                        .HasColumnType("integer")
                        .HasColumnName("actualvalue");

                    b.Property<int>("Apothecary")
                        .HasColumnType("integer")
                        .HasColumnName("apothecary");

                    b.Property<int>("AssistantCoaches")
                        .HasColumnType("integer")
                        .HasColumnName("assistantcoaches");

                    b.Property<int>("Balms")
                        .HasColumnType("integer")
                        .HasColumnName("balms");

                    b.Property<int>("Cash")
                        .HasColumnType("integer")
                        .HasColumnName("cash");

                    b.Property<int>("CheerLeaders")
                        .HasColumnType("integer")
                        .HasColumnName("cheerleaders");

                    b.Property<int>("CoachId")
                        .HasColumnType("integer")
                        .HasColumnName("coachid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("DateLastMatch")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datelastmatch");

                    b.Property<int>("FanFactor")
                        .HasColumnType("integer")
                        .HasColumnName("fanfactor");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Motto")
                        .HasColumnType("text")
                        .HasColumnName("motto");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Necromancer")
                        .HasColumnType("integer")
                        .HasColumnName("necromancer");

                    b.Property<int>("NextMatchValue")
                        .HasColumnType("integer")
                        .HasColumnName("nextmatchvalue");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer")
                        .HasColumnName("raceid");

                    b.Property<int>("Rerolls")
                        .HasColumnType("integer")
                        .HasColumnName("rerolls");

                    b.Property<int>("StadiumLevel")
                        .HasColumnType("integer")
                        .HasColumnName("stadiumlevel");

                    b.Property<string>("StadiumName")
                        .HasColumnType("text")
                        .HasColumnName("stadiumname");

                    b.Property<string>("StadiumType")
                        .HasColumnType("text")
                        .HasColumnName("stadiumtype");

                    b.Property<string>("StadiumUpgrade")
                        .HasColumnType("text")
                        .HasColumnName("stadiumupgrade");

                    b.Property<int>("TeamColor")
                        .HasColumnType("integer")
                        .HasColumnName("teamcolor");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CoachId")
                        .HasDatabaseName("ix_teams_coachid");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("rebbl.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("rebbl.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("rebbl.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rebbl.Server.Entities.ApplicationUser", b =>
                {
                    b.HasOne("rebbl.Server.Entities.Coach", "Coach")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("rebbl.Server.Entities.ApplicationUser", "CoachId")
                        .HasConstraintName("fk_aspnetusers_coaches_coachid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Competition", b =>
                {
                    b.HasOne("rebbl.Server.Entities.League", "League")
                        .WithMany("Competitions")
                        .HasForeignKey("LeagueId")
                        .HasConstraintName("fk_competitions_leagues_leagueid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Contest", b =>
                {
                    b.HasOne("rebbl.Server.Entities.Coach", "AwayCoach")
                        .WithMany("AwayContests")
                        .HasForeignKey("AwayCoachId")
                        .HasConstraintName("fk_contests_coaches_awaycoachid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("rebbl.Server.Entities.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .HasConstraintName("fk_contests_teams_awayteamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.Competition", "Competition")
                        .WithMany("Contests")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("fk_contests_competitions_competitionid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.Coach", "HomeCoach")
                        .WithMany("HomeContests")
                        .HasForeignKey("HomeCoachId")
                        .HasConstraintName("fk_contests_coaches_coachid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("rebbl.Server.Entities.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .HasConstraintName("fk_contests_teams_hometeamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.Match", "Match")
                        .WithOne()
                        .HasForeignKey("rebbl.Server.Entities.Contest", "MatchUuid")
                        .HasConstraintName("fk_contests_matches_matchid1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AwayCoach");

                    b.Navigation("AwayTeam");

                    b.Navigation("Competition");

                    b.Navigation("HomeCoach");

                    b.Navigation("HomeTeam");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Match", b =>
                {
                    b.HasOne("rebbl.Server.Entities.Coach", "AwayCoach")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayCoachId")
                        .HasConstraintName("fk_matches_coaches_awaycoachid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.Team", null)
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .HasConstraintName("fk_matches_teams_teamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("fk_matches_competitions_competitionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.Coach", "HomeCoach")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeCoachId")
                        .HasConstraintName("fk_matches_coaches_coachid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("rebbl.Server.Entities.Team", null)
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .HasConstraintName("fk_matches_teams_teamid1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayCoach");

                    b.Navigation("Competition");

                    b.Navigation("HomeCoach");
                });

            modelBuilder.Entity("rebbl.Server.Entities.MatchPlayer", b =>
                {
                    b.HasOne("rebbl.Server.Entities.MatchTeam", "Team")
                        .WithMany("Players")
                        .HasForeignKey("MatchId", "TeamId")
                        .HasConstraintName("fk_matchplayer_matchteams_teammatchid_teamid1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("rebbl.Server.Entities.MatchTeam", b =>
                {
                    b.HasOne("rebbl.Server.Entities.Match", null)
                        .WithOne("AwayTeam")
                        .HasForeignKey("rebbl.Server.Entities.MatchTeam", "MatchId", "TeamId")
                        .HasConstraintName("fk_matchteams_matches_matchid_teamid")
                        .HasPrincipalKey("rebbl.Server.Entities.Match", "Id", "AwayTeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("rebbl.Server.Entities.Match", null)
                        .WithOne("HomeTeam")
                        .HasForeignKey("rebbl.Server.Entities.MatchTeam", "MatchId", "TeamId")
                        .HasConstraintName("fk_matchteams_matches_matchid_teamid1")
                        .HasPrincipalKey("rebbl.Server.Entities.Match", "Id", "HomeTeamId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("rebbl.Server.Entities.Player", b =>
                {
                    b.HasOne("rebbl.Server.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_player_teams_teamid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Team", b =>
                {
                    b.HasOne("rebbl.Server.Entities.Coach", "Coach")
                        .WithMany("Teams")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("fk_teams_coaches_coachid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Coach", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("AwayContests");

                    b.Navigation("AwayMatches");

                    b.Navigation("HomeContests");

                    b.Navigation("HomeMatches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Competition", b =>
                {
                    b.Navigation("Contests");
                });

            modelBuilder.Entity("rebbl.Server.Entities.League", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Match", b =>
                {
                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("rebbl.Server.Entities.MatchTeam", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("rebbl.Server.Entities.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
