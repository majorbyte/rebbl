extends ../../relayout.pug

block append vars
  - var activeSubMenu = "signups"
  - var raceIds = ["Amazon","Human","Dwarf","Skaven","Orc","Lizardman","Goblin","Wood Elf","Chaos Chosen","Dark Elf","Shambling Undead","Halfling","Norse","Amazon","Elven Union","High Elf","Khemri","Necromantic","Norse","Nurgle","Ogre","Vampire","Chaos Renegade","Underworld Denizen","","Imperial Nobility","Kislev"]
  - 
    var getLogo = function(race){
      switch (race){
        case "Amazon": return "Logo_Neutral_02.png";
        case "Black Orc": return "Logo_BlackOrc_10.png";
        case "Chaos Chosen": return "Logo_Chaos_02.png";
        case "Chaos Renegade": return "Logo_Chaos_10.png";
        case "Dark Elf": return "Logo_DarkElf_10.png";
        case "Dwarf": return "Logo_Dwarf_10.png";
        case "Elven Union": return "Logo_Elf_10.png";
        case "Goblin": return "Logo_Goblin_10.png";
        case "Human": return "Logo_Human_10.png";
        case "Halfling": return "Logo_Halfling_10.png";
        case "Imperial Nobility": return "Logo_ImperialNobility_10.png";
        case "Lizardman": return "Logo_Lizardman_10.png";
        case "Necromantic Horror": return "Logo_Necromantic_10.png";
        case "Norse": return "Logo_Norse_10.png";
        case "Nurgle": return "Logo_Nurgle_10.png";
        case "OldWorld Alliance": return "Logo_Neutre_10.png";
        case "Orc": return "Logo_Orc_10.png";
        case "Shambling Undead": return "Logo_Undead_10.png";
        case "Skaven": return "Logo_Skaven_10.png";
        case "Underworld Denizen": return "Logo_Underworld_10.png";
        case "Wood Elf": return "Logo_WoodElf_01.png";
      }
    }

block head
  style(type="text/css").
    .raceIcon {width: 32px; }
block content
  div(class="Background u-bottomPadding--large u-topPadding--medium")
    div(class="/*TexturedBackground TexturedBackground--light-primary*/")
      div(class="container navcontainer" data-index="0")
        h1(class="u-no-text-transform u-verticalMargin--xx-small") Current Signups
        div
          span Currently&nbsp;
            span(class="highlight" data-bind="text:$root.users().length" )
            span &nbsp;coaches have signed up.
          p Not signed up? 
            a(href="/signup") Here &nbsp;
            | you go!

        //- let races = ["Human","Dwarf","Skaven","Orc","Lizardman","Goblin","WoodElf","Chaos Chosen","Dark Elf","Shambling Undead","Halfling","Elven Union","Necromantic Horror","Nurgle","Underworld Denizen","Khorne","Imperial Nobility","Slaanesh","Black Orc","Chaos Renegade","OldWorld Alliance","Tzeentch"]
        - let races = ["Amazon","Black Orc","Chaos Chosen","Chaos Renegade","Dark Elf","Dwarf","Elven Union","Goblin","Halfling","Human","Imperial Nobility","Lizardman","Necromantic Horror","Norse","Nurgle","OldWorld Alliance","Orc","Shambling Undead","Skaven","Underworld Denizen","Wood Elf"]
        div(style="grid-template-columns: auto;display:grid;clear:both;" class="table-responsive mb-3")
          div(class="table-striped TeamLabel-info")
            div(class="TableHeader" style="border-bottom: 3px solid #bdbcbccf;padding-bottom: 2px;")
              div(style="display: table-cell;min-width:120px" class="Standings-header sticky_column") League
              for race in races
                div(style="display: table-cell" class="Standings-header text-center" title=race)
                  img.raceIcon(src=`https://cdn.rebbl.net/images/bb3/Logos/100x100/${getLogo(race)}`) 
            // ko foreach: {data: leagues, as: 'league'}
            div(class="TableRow")
              div(style="display: table-cell;min-width:120px" class="sticky_column" )
                span(class="highlight" data-bind="text: league") 
                span(class="highlight" style="float:right;margin-right:15px" data-bind="text: $root.getTotal(league)") 
              // ko foreach: {data: $root.races, as: 'race'}
              div(style="white-space: nowrap;display: table-cell"  class="text-center" data-bind="text: $root.getRaceCount(league, race) ")
              // /ko
            // /ko
            div(class="TableRow")
              div(style="display: table-cell;min-width:120px" class="sticky_column") Total
                span(class="highlight" style="float:right;margin-right:15px" data-bind="text: $root.filteredUsers().length" )
              // ko foreach: {data: $root.races, as: 'race'}
              div(style="white-space: nowrap;display: table-cell" class="text-center" data-bind="text: $root.filteredUsers().reduce(function(p, c){ return c.race.trim() === race.trim() ? p + 1 : p; }, 0)")
              // /ko
        div(style="grid-template-columns: auto;display:grid;clear:both" class="table-responsive mb-3")
          div(class="table-striped TeamLabel-info" style="width:640px" )
            div(class="TableHeader" style="border-bottom: 3px solid #bdbcbccf;padding-bottom: 2px;height:20px")
              div(style=";display: table-cell;min-width:110px" class="Standings-header sticky_column") League
              // ko foreach: {data: ["returning", "fresh", "college"], as:'d'}
              div(style="display: table-cell;" class="Standings-header" data-bind="text:d")
              // /ko
            // ko foreach: {data: leagues, as: 'league'}
            div(class="TableRow" )
              div(style="display: table-cell;min-width:110px" data-bind="text:league" class="sticky_column")
              div(style="white-space: nowrap;display: table-cell" data-bind="text:$root.users().reduce(function(p, c){ return c.league === league && (c.type === 'returning' || c.type === 'ure') ? p+1 : p; }, 0)")
              div(style="white-space: nowrap;display: table-cell" data-bind="text:$root.users().reduce(function(p, c){ return c.league === league && (c.type === 'fresh' || c.type === 'greenhorn') ? p+1 : p; }, 0)")
              div(style="white-space: nowrap;display: table-cell" data-bind="text:$root.users().reduce(function(p, c){ return c.league === league && c.type === 'rebbrl3' ? p+1 : p; }, 0)")
            // /ko
            div(class="TableRow")
              div(style="display: table-cell;min-width:110px" class="sticky_column") Total
              div(class="highlight" style="white-space: nowrap;display: table-cell" data-bind="text: $root.users().reduce(function(p, c){ return (c.type === 'returning' || c.type === 'ure') ? p+1 : p; }, 0)")
              div(class="highlight" style="white-space: nowrap;display: table-cell" data-bind="text: $root.users().reduce(function(p, c){ return (c.type === 'fresh' || c.type === 'greenhorn') ? p+1 : p; }, 0)")
              div(class="highlight" style="white-space: nowrap;display: table-cell" data-bind="text: $root.users().reduce(function(p, c){ return c.type === 'rebbrl3'  ? p+1 : p; }, 0)")
              //div(class="highlight" style="white-space: nowrap;display: table-cell" data-bind="text: $root.filteredUsers().reduce(function(p, c){ return c.greenHorn ? p+1 : p; }, 0)")
        div(style="grid-template-columns: auto;clear:both; display:grid" class="table-responsive")
          div(class="table-striped TeamLabel-info")
            div(class="TableHeader" style="border-bottom: 3px solid #bdbcbccf;padding-bottom: 2px;height:20px")
              div(style="white-space: nowrap;display: table-cell;width: 250px;" class="Standings-header sticky_column") Coach
              div(style="white-space: nowrap;display: table-cell;width: 350px;" class="Standings-header") Team
              div(style="white-space: nowrap;display: table-cell;width: 160px;" class="Standings-header") TV
              div(style="white-space: nowrap;display: table-cell;width: 160px;" class="Standings-header") Race
              div(style="white-space: nowrap;display: table-cell;width: 80px;" class="Standings-header") League
              div(style="white-space: nowrap;display: table-cell;width: 80px;" class="Standings-header") State
              div(style="white-space: nowrap;display: table-cell;width: 80px;" class="Standings-header") Timezone
            // ko foreach:{data: filteredUsers, as:'signup'}
            div(class="TableRow")
              div(style="white-space: nowrap;display: table-cell;width: 250px;" class="sticky_column")
                a( data-bind="text:signup.coach, attr:{href:'/coach/'+signup.coachId}")
              div(style="white-space: nowrap;display: table-cell;width: 350px;")
                //ko if: signup.teamId
                a(href="" target="_blank" data-bind="{text: $root.teamName(signup.team), attr: {href : '/team/' + signup.teamId}}") 
                //span(data-bind="text: $root.teamName(signup.team)")
                // /ko
                //ko ifnot: signup.teamId
                span(data-bind="text:$root.teamName(signup.team)")
                // /ko
              div(style="white-space: nowrap;display: table-cell;width: 160px;" data-bind="text:signup.TV")
              div(style="white-space: nowrap;display: table-cell;width: 160px;" data-bind="text:signup.race.trim()")
              div(style="white-space: nowrap;display: table-cell;width: 80px;" data-bind="text:signup.league")
              div(style="white-space: nowrap;display: table-cell;width: 80px;" data-bind="text: signup.type == 'rebbrl3' ? 'college' : signup.type")
              div(style="white-space: nowrap;display: table-cell;width: 80px;" data-bind="text:signup.timezone")
            // /ko

block append scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")
  script.

    function DataModel() {
      const self = this;
      self.users = ko.observableArray([]);
      self.loading = ko.observable(true);
      self.leagues = ko.observableArray(["BIG O","GMAN","REL"]);
      self.races = ko.observableArray(["Amazon","Black Orc","Chaos Chosen","Chaos Renegade","Dark Elf","Dwarf","Elven Union","Goblin","Halfling","Human","Imperial Nobility","Lizardman","Necromantic Horror","Norse","Nurgle","OldWorld Alliance","Orc","Shambling Undead","Skaven","Underworld Denizen", "Wood Elf"]);

      self.OI = ko.observable(false);
      self.greenhorn = ko.observable(false);

      self.toggleOI = function(){
        $(".TableRow").hide();
        $(".TableRow").show();
        self.OI(!self.OI());
        if (self.OI()){
          self.greenhorn(false);
        }
        $(".TableRow").hide();
        $(".TableRow").show();

      }
      self.toggleGreenhorn = function(){
        $(".TableRow").hide();
        $(".TableRow").show();
        self.greenhorn(!self.greenhorn());
        if (self.greenhorn()){
          self.OI(false);
        }
        $(".TableRow").hide();
        $(".TableRow").show();
      }

      self.teamName = function(name){
        if (/\[colour=/i.test(name)){
            return name.replace(/\[colour=.*]/i,'')
        }
        return name;
      }

      self.filteredUsers = ko.computed(function(){
        
        let sort = function(a,b){
            if (a.league > b.league) return 1;
            if (a.league < b.league) return -1;

            if (a.type > b.type) return 1;
            if (a.type < b.type) return -1;

            if (a.coach > b.coach) return 1;
            if (a.coach < b.coach) return -1;
            return 0;
        }



        if (self.OI() || self.greenhorn()){
          if (self.OI()){
            return self.users().filter(user => user.OI).sort(sort);
          }else {
            return self.users().filter(user => user.greenHorn).sort(sort);
          }
        } else {
          return self.users().sort(sort);
        }
      });

      self.getRaceCount = function(league,race){
        let d = self.filteredUsers().filter(function(a){ return a.league === league && a.race.trim() === race.trim() }); 
        return d[0] ? d.length : 0
      }

      self.getTotal = function(league){
        return self.filteredUsers().reduce(function(p, c){ return c.league === league ? p + 1 : p; }, 0)
      }
    }

    let model = new DataModel();
    ko.applyBindings(model);
    window.model = model;
    $(document).ready(async function(){
      
      const result = await fetch("/api/v1/signups/bb3");
      if (result.ok) model.users(await result.json());
      model.loading(false);
    });

  
