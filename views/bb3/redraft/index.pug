extends ../../no-cache-sub-relayout.pug
include ../functions.pug

block append vars
  -
    let options = {company:"Team"}
block head 
  style.
    .silhouette-shadow{filter: drop-shadow(0px 0px 1px black);}

    .table-striped > tbody > tr.text-bg-success > td { background-color:unset !important; color:unset !important; }
    .gradient-striped {
      background-image: linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);
      background-size: 40px 40px;
    }
    .form-control-sm, .table-sm > :not(caption) > * > *{padding: 0rem 0.25rem !important;}
    .form-control-sm {min-height:unset !important;}
    input::-webkit-outer-spin-button,input::-webkit-inner-spin-button {-webkit-appearance: none;margin: 0; }
    input[type=number] {-moz-appearance: textfield;}

    .dice{background: url("/images/dice.png") no-repeat;width: 32px;height: 32px;display: inline-block;background-position-x: 0px;background-position-y:3px;vertical-align: bottom;transform: scale(1.2);}
    .dice-1{background-position-x:0px;}
    .dice-2{background-position-x:-32px;}
    .dice-3{background-position-x:-64px;}
    .dice-4{background-position-x:-96px;}
    .dice-5{background-position-x:-128px;}
    .dice-6{background-position-x:-160px;}


block content
  - let path = `https://cdn.rebbl.net/images/skills/${user && user.icon ? user.icon : 'BB3Standard'}`

  .container
    .col-12.d-flex.flex-wrap.align-items-center
      //img(src=`https://cdn.rebbl.net/images/bb3/Logos/$logo.icon}` class="align-top" style="height:50px")
      span(style="font-size:2rem;font-weight:700" data-bind="text: name")
      span(style="font-size:2rem;font-weight:700") &nbsp;Redraft Budget:&nbsp;
      span#budget(style="font-size:2rem;font-weight:700" data-bind="text: budget.total")

    .clearfix
    br
    .col-12
      table.table.table-striped.table-sm
          thead
            tr
              th(scope="col") #
              th(scope="col") name
              th(scope="col") position
              th(scope="col") MA
              th(scope="col") ST
              th(scope="col") AG
              th(scope="col") PA
              th(scope="col") AV
              th(scope="col" style="min-width:160px") Skills
              th(scope="col") CAS
              th(scope="col") 
                .float-end SPP
              th(scope="col")
                .float-end  Value
              th(scope="col")
                .float-end  Cost
          tbody
            //ko foreach: {data:roster, as: 'player'}
            // ko template: { name: 'player-row', data: player, as: 'player' }
            // /ko
            // /ko
          tfoot 
            tr
              th(colspan="13") &nbsp;
            tr
              th(scope="col" colspan='2') Rookies 
              th(scope="col") position
              th(scope="col") MA
              th(scope="col") ST
              th(scope="col") AG
              th(scope="col") PA
              th(scope="col") AV
              th(scope="col" style="min-width:160px" colspan="2") Skills
              th.text-center(scope="col") Amount
              th(scope="col")
                .float-end  Price
              th(scope="col")
                .float-end  Cost

            // ko foreach: {data: allowedPositions, as: 'position'}
            // ko template: { name: 'position-row', data: position }
            // /ko
            // /ko
            tr
              th(colspan="11")
                .d-flex
                  //ko foreach: improvements
                  .col.d-flex
                    img(data-bind="{attr: {src: icon}}")
                    input.form-control-sm.w-50(data-bind="{value:quantity, attr:{min,max,disabled}}" type="number" step="1" onfocus="this.previousValue = this.value" onkeydown="this.previousValue = this.value" oninput="validity.valid || (value = this.previousValue)" )

                  // /ko

              th(colspan="1") Total
              th.text-end
                span(data-bind="text: totalCost()")

    template#player-row 
      tr(data-bind="id: player.id, click:select, class:cssClass() " )
        td(data-bind="text: player.number")
        td
          div(data-bind="text: player.name")
        td
          img.silhouette-shadow(data-bind="{attr: {src: $root.getSilhouette(player.position) }}" )
        td(data-bind="{text: player.MA().value, css:{'text-danger': (player.MA().nbMaluses - player.MA().nbBonuses) > 0, 'text-success': (player.MA().nbMaluses - player.MA().nbBonuses) < 0} }")
        td(data-bind="{text: player.ST().value, css:{'text-danger': (player.ST().nbMaluses - player.ST().nbBonuses) > 0, 'text-success': (player.ST().nbMaluses - player.ST().nbBonuses) < 0} }")
        td(data-bind="{text: player.AG().value, css:{'text-danger': (player.AG().nbMaluses - player.AG().nbBonuses) > 0, 'text-success': (player.AG().nbMaluses - player.AG().nbBonuses) < 0} }")
        td(data-bind="{text: player.PA().value, css:{'text-danger': (player.PA().nbMaluses - player.PA().nbBonuses) > 0, 'text-success': (player.PA().nbMaluses - player.PA().nbBonuses) < 0} }")
        td(data-bind="{text: player.AV().value, css:{'text-danger': (player.AV().nbMaluses - player.AV().nbBonuses) > 0, 'text-success': (player.AV().nbMaluses - player.AV().nbBonuses) < 0} }")
        td.td-prevent
          // ko foreach: {data: Array.isArray(player.skills.skillsItem) ? player.skills.skillsItem : [player.skills.skillsItem] , as: 'skill'}
          img(data-bind="{attr: {src: '" + path + "/' + $root.getSkill(skill).icon }}" alt="" style="z-index:9999" )
          // /ko
        td.pull-right
          // ko foreach: {data: player.casualties}
          // ko if: !player.locked
          img(data-bind="{attr: {src: icon() },title: title()}  ")
          // /ko
          // ko if: player.locked
          img(data-bind="{attr: {src: icon(), title:title()}, event: { mouseover: showOld, mouseout: showNew } }")
          .dice.me-1(data-bind="class: `dice-${dice}`  ")
          // /ko
          // /ko


          // ko if: $root.retiredPlayers.some(x => x.id === player.id) && !player.selected
          span.badge.text-bg-success.ms-2 retired    
          // /ko
        td
            div.float-end(data-bind="text: player.spp")
        td.playerValue.text-end(data-bind="text:value/1000")
        td.playerValue.text-end(data-bind="text:cost/1000")

    template#position-row 
      tr
        td 0
        td
          div
            img(src=`https://cdn.rebbl.net/images/skills/1.png` alt="", class="TeamLabel-logo" style="width:30px;margin-right:2px;height:30px;float:left;")
            div(data-bind="text: type.split('_')[1].replace(/([A-Z])/g, ' $1')") 
        td
          img.silhouette-shadow(data-bind="{attr: {src: $root.getSilhouetteByName(type) }}")
        td(data-bind="text: characteristics.find(x=>x.characteristic=='MA')?.value || '-'")
        td(data-bind="text: characteristics.find(x=>x.characteristic=='ST')?.value || '-'")
        td(data-bind="text: characteristics.find(x=>x.characteristic=='AG')?.value || '-'")
        td(data-bind="text: characteristics.find(x=>x.characteristic=='PA')?.value || '-'")
        td(data-bind="text: characteristics.find(x=>x.characteristic=='AV')?.value || '-'")

        td.td-prevent(colspan="2")
          // ko foreach: {data: Array.isArray(skills) ? skills : [skills] , as: 'skill'}
          img(data-bind="{attr: {src: '" + path + "/' + $root.getSkillByName($root.getSkillName(skill)).icon }}" alt="" style="z-index:9999" )
          // /ko
        td.text-center
          input.form-control-sm.w-25(data-bind="{value: quantity, attr:{max:calculatedMax()}, css: {'border-danger': quantity > calculatedMax() }}" type="number" min="0" step="1" onfocus="this.previousValue = this.value" onkeydown="this.previousValue = this.value" oninput="validity.valid || (value = this.previousValue)" )
        td.text-end(data-bind="text: cost/1000")
        td.text-end(data-bind="text: totalCost()")


  .toast-container.top-0.start-50
    #successToast.toast.align-items-center.text-bg-success.border-0(role="alert" aria-live="assertive" aria-atomic="true")
      .d-flex
        .toast-body
          | Player has been successfully retired.
        button.btn-close.btn-close-white.me-2.m-auto( type="button" data-bs-dismiss="toast" aria-label="Close")

    #errorToast.toast.align-items-center.text-bg-danger.border-0(role="alert" aria-live="assertive" aria-atomic="true")
      .d-flex
        .toast-body
          | Something went wrong, please contact the admins.
        button.btn-close.btn-close-white.me-2.m-auto( type="button" data-bs-dismiss="toast" aria-label="Close")

  #playerModal.modal.fade(data-bs-backdrop="static"  data-bs-keyboard="false" tabindex="-1" aria-labelledby="playerModal" aria-hidden="true")
    .modal-dialog.modal-xl
      .modal-content 
        .modal-header 
          h1.modal-title#titleName Temporarily Retire
          button.btn-close(type="button"  data-bs-dismiss="modal" aria-label="Close")
        .modal-body 
          .modal-page
            h3  Buyer beware

            p You are about to draft a player that is either Seriously Injured or has Lasting Injuries.
            p If you continue, a D6 will be rolled for each injury, if you have an apothecary rostered, then you'll get a +1. If the result is a 4+, the apothecary managed to patch up the injury.
            p Any success on Serious Injuries will remove them.
            p Any success on Lasting Injuries will turn them into Serious Injuries. 

            .p-3.text-bg-danger.border-start.border-2.border-danger-subtle Redrafting this player will make it locked in


        .modal-footer(style="justify-content: space-between") 
          button#btnCancel.btn.btn-primary(type="button" data-bs-dismiss="modal") Cancel
          button#btnProceed.btn.btn-success(type="button" data-bind="click:proceed") Proceed
            #spinner.d-none.spinner-grow.spinner-grow-sm.ms-2(role="status")


block scripts 
  script(src="https://cdn.rebbl.net/scripts/knockout-3.5.1.js")
  script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")

  script.
    const getPlayerCasualtyIcon = function(cas){
      switch(Number(cas)){ 
        case 0: return "ico_action_lasting_injury.png";
        case 1: return "ico_action_badly_hurt.png";
        case 2: return "ico_action_seriously_hurt.png";
        case 3: return "ico_action_serious_injury.png";
        case 4: return "ico_action_lasting_injury.png";
        case 5: return "ico_action_smashed_knee.png";
        case 6: return "ico_action_head_injury.png";
        case 7: return "ico_action_broken_arm.png";
        case 8: return "ico_action_neck_injury.png";
        case 9: return "ico_action_dislocated_shoulder.png";
        case 10: return "ico_action_dead.png";
      }
      return false;
    }
    const getPlayerCasualtyTitle = function(cas){
      switch(Number(cas)){ 
        case 0: return "";
        case 1: return "";
        case 2: return "MNG";
        case 3: return "+1 on injury rolls";
        case 4: return "";
        case 5: return "-1 MV";
        case 6: return "-1 AV";
        case 7: return "+1 PA";
        case 8: return "+1 AG";
        case 9: return "-1 ST";
        case 10: return "dead";
      }
      return false;
    }

    class ImprovementModel{
      constructor(data){
        this.quantity = data.quantity;
        this.min = data.min;
        this.max = data.max;
        this.improvement = Number(data.improvement);
        this.cost = Number(data.cost) / (this.improvement === 4 ? 2000 : 1000);
        this.disabled = this.improvement == 5;
        this.icon = [                    
          null,"https://cdn.rebbl.net/images/bb3/apo.png","https://cdn.rebbl.net/images/bb3/cheerleader.png","https://cdn.rebbl.net/images/bb3/assistant_coach.png","https://cdn.rebbl.net/images/bb3/reroll.png","https://cdn.rebbl.net/images/bb3/dedicated_fan.png"][this.improvement];
        ko.track(this);

        ko.getObservable(this, 'quantity').subscribe( async (newValue) => await this.updateImprovement(newValue));
      }
      totalCost(){ 
        return Number(this.quantity )* this.cost;
      }

      async updateImprovement(quantity){
        const body = {improvement: this.improvement, quantity:Number(quantity)};
        const response = await fetch(`/bb3/redraft/api/#{id}/improvement`,{method:"PUT", headers:{'Content-Type': 'application/json',},body:JSON.stringify(body)});
      }
    }


    class CasualtyModel{
      constructor(data){
        this.apo = data.apo;
        this.dice = data.dice;
        this.cas = data.old;
        this.new = getPlayerCasualtyIcon(data.new);
        this.old = getPlayerCasualtyIcon(data.old);
        this.newTitle = getPlayerCasualtyTitle(data.new);
        this.oldTitle = getPlayerCasualtyTitle(data.old);

        this.hover = false;
        ko.track(this);
      }

      icon = () => this.hover || !this.new ? `https://cdn.rebbl.net/images/bb3/Icons_Casualty/${this.old}` :  `https://cdn.rebbl.net/images/bb3/Icons_Casualty/${this.new}`;
      title = () => this.hover || !this.new ? this.oldTitle :  this.newTitle;
      showOld = () => this.hover = true;
      showNew = () => this.hover = false;

    }

    class PlayerModel{
      constructor(data){
        this.map(data);
        this.selected = data.selected || false;
        this.casualties = this.casualties.map(x => new CasualtyModel(x));
        ko.track(this);
      }
      map(data){
        if(data){
          Object.assign(this, data);
        }
      }

      select = async (e) => {
        //if (this.locked) return;
        
        const isRetired = model.retiredPlayers.some(x => x.id === this.id);
        const isSeriouslyInjured = this.casualties.some(x => x.cas === 3);

        if (!this.selected && (isRetired || isSeriouslyInjured) ) {
          model.selectedPlayer = this;
          model.modal = new bootstrap.Modal('#playerModal', {});
          model.modal.show();
        } else {
          this.selected = !this.selected;
          const response = await fetch(`/bb3/redraft/api/#{id}/${this.id}`,{method: this.selected ? "PUT" : "DELETE"});
        }
      }




      MA = () => this.characteristics.playerCharacteristicsEntry.find(x=>x.characteristic=='0');
      ST = () => this.characteristics.playerCharacteristicsEntry.find(x=>x.characteristic=='1');
      AG = () => this.characteristics.playerCharacteristicsEntry.find(x=>x.characteristic=='2');
      PA = () => this.characteristics.playerCharacteristicsEntry.find(x=>x.characteristic=='3') || {value:"-",nbMaluses:0,nbBonuses:0};
      AV = () => this.characteristics.playerCharacteristicsEntry.find(x=>x.characteristic=='4');

      cssClass(){
        if (!this.selected) return "";
        return this.locked ? "gradient-striped text-bg-success border border-2 border-danger" : "text-bg-success";  

      }
    }

    class PositionModel{
      constructor(data){
        this.map(data);
        this.quantity = 0;
        ko.track(this);
      }
      map(data){
        if(data){
          Object.assign(this, data);
        }
      }

      calculatedMax(){
        return this.max - this.players.filter(x => x.selected).length;
      }
      totalCost(){
        return Number(this.quantity) * Number(this.cost) / 1000;
      }


    }

    class RedraftModel{
      constructor(data){
        this.roster = data.team.roster.map(x => {return new PlayerModel(x)});
        this.improvements = data.team.improvements.map(x => {return new ImprovementModel(x)});
        this.allowedPositions = data.allowedPositions.map(x => {
          x.players = this.roster.filter(player => player.position == x.id );
          return new PositionModel(x);
        });
        this.retiredPlayers = data.retiredPlayers;
        this.name = data.team.name;
        this.logo = data.team.logo;
        this.budget = data.team.budget;
        this.selectedPlayer = null;
        this.modal = null
        
        ko.track(this);
      }

      selectedPlayers(){
        return this.roster.filter(x => x.selected);
      }

      totalCost(){
        let cost = this.roster.map(x => x.selected ? Number(x.value)/1000 : 0).reduce((p,c) => p+c,0);
        cost += this.allowedPositions?.map(x => x.totalCost()).reduce((p,c) => p+c,0);
        cost += this.improvements?.map(x => x.totalCost()).reduce((p,c) => p+c,0);
        return cost;
      }

      async proceed(){
        const response = await fetch(`/bb3/redraft/api/#{id}/${this.selectedPlayer.id}`,{method: "PUT"});

        if (response.ok){
          const index = this.roster.findIndex(x => x.id === this.selectedPlayer.id);
          this.roster.splice(index,1, new PlayerModel(await response.json()));
        }

        this.modal.hide();

      }


      getSkill = id => skills.find(x => x.id == id);
      getSkillByName = name => skills.find(x => x.name == name);
      getSilhouette = id => `https://cdn.rebbl.net/images/bb3/Silhouettes/T_${this.allowedPositions.find(x => x.id === Number(id)).type}_Silhouette.png`;
      getSilhouetteByName = type => `https://cdn.rebbl.net/images/bb3/Silhouettes/T_${type}_Silhouette.png`;
      getSkillName = name => name.replace("(","").replace(")","").replace("+","").replace(/\w+/g, function(w){return w[0].toUpperCase() + w.slice(1).toLowerCase();}).replace(/ /g,"").replace(/-/g,"");

    }

    
    let model;
    $(document).ready(async function(){
      const response = await fetch("/bb3/redraft/api/#{id}");
      model = new RedraftModel(await response.json());
      if (response.ok) ko.applyBindings(model);
    });
    
    const skills = [
      {id:1, name: "StripBall", icon:"StripBall.png"},{id:6, name: "Catch", icon:"Catch.png"},{id:7, name: "Dodge", icon:"Dodge.png"},{id:8, name: "Sprint", icon:"Sprint.png"},{id:10, name: "FoulAppearance", icon:"FoulAppearance.png"},{id:100, name: "AnimosityOrcLinemen", icon:"Animosity.png"},{id:1001, name: "BloodGreed", icon:"BloodGreed.png"},{id:1005, name: "Fumblerooskie", icon:"FumbleRooskie.png"},{id:1007, name: "KickTeamMate", icon:"KickTeamMate.png"},{id:1008, name: "Loner3", icon:"Loner.png"},{id:1009, name: "MightyBlow2", icon:"MightyBlow.png"},{id:101, name: "AnimosityBigUnBlockers", icon:"Animosity.png"},{id:1010, name: "MonstrousMouth", icon:"MonstrousMouth.png"},{id:1012, name: "PileDriver", icon:"PileDriver.png"},{id:1015, name: "SafePairOfHands", icon:"SafePairOfHands.png"},{id:1016, name: "Swarming", icon:"Swarming.png"},{id:1017, name: "Swoop", icon:"Swoop.png"},{id:1018, name: "Loner2", icon:"Loner.png"},{id:102, name: "AnimosityUnderworldGoblinLinemen", icon:"Animosity.png"},{id:1020, name: "PlagueRidden", icon:"PlagueRidden.png"},{id:1021, name: "DirtyPlayer2", icon:"DirtyPlayer.png"},{id:1022, name: "Loner5", icon:"Loner.png"},{id:11, name: "Leap", icon:"Leap.png"},{id:12, name: "ExtraArms", icon:"ExtraArms.png"},{id:13, name: "MightyBlow1", icon:"MightyBlow.png"},{id:14, name: "Leader", icon:"Leader.png"},{id:15, name: "Horns", icon:"Horns.png"},{id:16, name: "TwoHeads", icon:"TwoHeads.png"},{id:17, name: "StandFirm", icon:"StandFirm.png"},{id:18, name: "AlwaysHungry", icon:"AlwaysHungry.png"},{id:19, name: "Regeneration", icon:"Regeneration.png"},{id:20, name: "TakeRoot", icon:"TakeRoot.png"},{id:21, name: "Accurate", icon:"Accurate.png"},{id:22, name: "BreakTackle", icon:"BreakTackle.png"},{id:23, name: "SneakyGit", icon:"SneakyGit.png"},{id:25, name: "Chainsaw", icon:"Chainsaw.png"},{id:26, name: "Dauntless", icon:"Dauntless.png"},{id:27, name: "DirtyPlayer1", icon:"DirtyPlayer.png"},{id:28, name: "DivingCatch", icon:"DivingCatch.png"},{id:29, name: "Dumpoff", icon:"DumpOff.png"},{id:30, name: "Block", icon:"Block.png"},{id:31, name: "BoneHead", icon:"BoneHead.png"},{id:32, name: "VeryLongLegs", icon:"VeryLongLegs.png"},{id:33, name: "DisturbingPresence", icon:"DisturbingPresence.png"},{id:34, name: "DivingTackle", icon:"DivingTackle.png"},{id:35, name: "Fend", icon:"Fend.png"},{id:36, name: "Frenzy", icon:"Frenzy.png"},{id:37, name: "Grab", icon:"Grab.png"},{id:38, name: "Guard", icon:"Guard.png"},{id:39, name: "HailMaryPass", icon:"HailMaryPass.png"},{id:40, name: "Juggernaut", icon:"Juggernaut.png"},{id:41, name: "JumpUp", icon:"JumpUp.png"},{id:44, name: "Loner4", icon:"Loner.png"},{id:45, name: "NervesOfSteel", icon:"NervesOfSteel.png"},{id:46, name: "NoHands", icon:"NoHands.png"},{id:47, name: "Pass", icon:"Pass.png"},{id:49, name: "PrehensileTail", icon:"PrehensileTail.png"},{id:50, name: "Pro", icon:"Pro.png"},{id:51, name: "ReallyStupid", icon:"ReallyStupid.png"},{id:52, name: "RightStuff", icon:"RightStuff.png"},{id:53, name: "SafePass", icon:"SafePass.png"},{id:54, name: "SecretWeapon", icon:"SecretWeapon.png"},{id:55, name: "Shadowing", icon:"Shadowing.png"},{id:56, name: "Sidestep", icon:"SideStep.png"},{id:57, name: "Tackle", icon:"Tackle.png"},{id:58, name: "StrongArm", icon:"StrongArm.png"},{id:59, name: "Stunty", icon:"Stunty.png"},{id:60, name: "SureFeet", icon:"SureFeet.png"},{id:61, name: "SureHands", icon:"SureHands.png"},{id:63, name: "ThickSkull", icon:"ThickSkull.png"},{id:64, name: "ThrowTeamMate", icon:"ThrowTeamMate.png"},{id:67, name: "UnchannelledFury", icon:"UnchannelledFury.png"},{id:68, name: "Wrestle", icon:"Wrestle.png"},{id:69, name: "Tentacles", icon:"Tentacles.png"},{id:70, name: "MultipleBlock", icon:"MultipleBlock.png"},{id:71, name: "Kick", icon:"Kick.png"},{id:74, name: "BigHand", icon:"BigHand.png"},{id:75, name: "Claws", icon:"Claw.png"},{id:76, name: "BallAndChain", icon:"BallAndChain.png"},{id:77, name: "Stab", icon:"Stab.png"},{id:78, name: "HypnoticGaze", icon:"HypnoticGaze.png"},{id:80, name: "Bombardier", icon:"Bombardier.png"},{id:81, name: "Decay", icon:"Decay.png"},{id:83, name: "Titchy", icon:"Titchy.png"},{id:84, name: "AnimalSavagery", icon:"AnimalSavagery.png"},{id:86, name: "AnimosityAllTeamMates", icon:"Animosity.png"},{id:87, name: "TimmmBer", icon:"Timmm-ber.png"},{id:88, name: "Cannoneer", icon:"Cannoneer.png"},{id:89, name: "PogoStick", icon:"PogoStick.png"},{id:90, name: "Defensive", icon:"Defensive.png"},{id:91, name: "ArmBar", icon:"ArmBar.png"},{id:92, name: "IronHardSkin", icon:"IronHardSkin.png"},{id:93, name: "RunningPass", icon:"RunningPass.png"},{id:94, name: "CloudBuster", icon:"CloudBuster.png"},{id:95, name: "ProjectileVomit", icon:"ProjectileVomit.png"},{id:96, name: "Brawler", icon:"Brawler.png"},{id:97, name: "OnTheBall", icon:"OnTheBall.png"},{id:98, name: "AnimosityAllDwarfAndHalflingTeamMates", icon:"Animosity.png"},{id:99, name: "AnimosityAllDwarfAndHumanTeamMates", icon:"Animosity.png"}
    ];

