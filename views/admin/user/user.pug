extends ../layout.pug

block append vars
  - var activeSubMenu = "account"

block append scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn.rebbl.net/scripts/moment.min.js")
    script(src="https://cdn.rebbl.net/scripts/moment-timezone.min.js")
    script(src="https://cdn.rebbl.net/scripts/moment-timezone-with-data-10-year-range.min.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/moment.min.js")
    script(src="/scripts/moment-timezone.min.js")
    script(src="/scripts/moment-timezone-with-data-10-year-range.min.js")
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.
    function StrikeModel(data){
      this.map = (data) => {
          if (data) {
              this.id = data.id;
              this.reason = data.reason;
              this.start = data.start;
              this.end = data.end;
              this.active = data.active;
              this.editable = false;
              this.team = data.team;
              this.race = data.race;
          }
      };
      this.snap = () => {
          this._original = Object.assign({},this);
      };
      this.commit = () => {
          if (this._original != null) {
              return this._original.map(this);
          }
      };
      this.rollback = () => {
          if (this._original != null) {
              this.map(this._original);
          }
      };
      this.map(data);
      this.snap();
      ko.track(this);
    }
    function DonationModel(data){
      this.map = (data) => {
          if (data) {
              this.date = data.date;
              this.currency = data.currency;
              this.value = data.value;
          }
      };
      this.map(data);
      ko.track(this);      
    }
    function TrophyModel(data){
      this.map = (data) => {
        if (data) {
            this.name = data.name;
            this.title = data.title;
            this.filename = data.filename;
            this.date = data.date;
        }
      };
      this.map(data);
      ko.track(this); 
    }
    function NoteModel(data){
      this.map = (data) => {
        if (data) {
            this.text = data.text;
            this.date = data.date;
        }
      };
      this.map(data);
      ko.track(this); 
    }
    function UserModel(){
      let self = this;

      self.isEmpty = ko.observable(false);
      self.isError = ko.observable(false);
      self.error = ko.observable("");

      self.reddit = ko.observable();
      self.newReddit = ko.observable();
      self.coach = ko.observable();
      self.discord = ko.observable();
      self.race = ko.observable();
      self.steam = ko.observable();
      self.team = ko.observable();
      self.timezone = ko.observable();
      self.twitch = ko.observable();
      
      self.roles = ko.observableArray([]);
      self.notes = ko.observableArray([]);
      self.bans = ko.observableArray([]);
      self.strikes = ko.observableArray([]);
      self.warnings = ko.observableArray([]);
      self.donations = ko.observableArray([]);
      self.trophies = ko.observableArray([]);
      self.availableTrophies = ko.observableArray([]);

      self.newBan = ko.observable(new StrikeModel({"reason":"","start":"","end":"","active":true}));
      self.newStrike = ko.observable(new StrikeModel({"reason":"","start":"","end":"","active":true}));
      self.newWarning = ko.observable(new StrikeModel({"reason":"","start":"","end":"","active":true}));
      self.newDonation = ko.observable(new DonationModel({"date":"","currency":"","value":0}));
      self.newTrophy = ko.observable(new TrophyModel({"date":"","filename":"","title":"","name":""}));
      self.newNote = ko.observable(new NoteModel({"date":"","text":""}));

      self.toggleBan = async function(data,event){
        data.active = !data.active;
        await self.post("/api/v1/admin/user/toggleBan", {reddit:self.reddit(), id:data.id, ban:data});
      }
      self.addBan = async function(data,event){
        self.bans.push(self.newBan());
        await self.post("/api/v1/admin/user/addBan", {reddit:self.reddit(), ban:self.newBan()});
        self.newBan(new StrikeModel({"reason":"","start":"","end":"","active":true}));
      }

      self.toggle = async function(data,event){
        data.active = !data.active;
        await self.post("/api/v1/admin/user/toggleStrike", {reddit:self.reddit(), id:data.id, strike:data});
      }

      self.addStrike = async function(data,event){
        self.strikes.push(self.newStrike());
        await self.post("/api/v1/admin/user/addStrike", {reddit:self.reddit(), strike:self.newStrike()});
        self.newStrike(new StrikeModel({"reason":"","start":"","end":"","active":true}));
      }

      self.addWarning = async function(data,event){
        self.warnings.push(self.newWarning());
        await self.post("/api/v1/admin/user/addWarning", {reddit:self.reddit(), warning:self.newWarning()});
        self.newWarning(new StrikeModel({"reason":"","start":"","end":"","active":true}));
      }
      
      self.addTrophy = async function(data,event){

        const t = self.availableTrophies().find(x => x.name === self.newTrophy().name);

        self.newTrophy().filename = t.filename;

        self.trophies.push(self.newTrophy());
        await self.post("/api/v1/admin/user/addTrophy", {reddit:self.reddit(), trophy:self.newTrophy()});
        self.newTrophy(new TrophyModel({"date":"","filename":"","title":"","name":""}));
      }

      self.deleteTrophy = async function(data,event){

        await self.post("/api/v1/admin/user/deleteTrophy", {reddit:self.reddit(), trophy:data});
        self.trophies.splice(self.trophies().indexOf(data),1);
      }
      
      self.addNote = async function(data,event){
        self.notes.push(self.newNote());
        await self.post("/api/v1/admin/user/addNote", {reddit:self.reddit(), note:self.newNote()});
        self.newNote(new NoteModel({"date":"","text":""}));
      }

      self.saveNote = async function(data,event){
        data.editable=false;
        data.commit();
        await self.post("/api/v1/admin/user/updateNote", {reddit:self.reddit(), note:data});
      }

      self.cancelNote = function(data,event){
        data.editable=false;
        data.rollback();
      }

      self.edit = function(data,event){
        data.editable=true;
      }
      self.saveBan = async function(data,event){
        data.editable=false;
        data.commit();
        await self.post("/api/v1/admin/user/updateBan", {reddit:self.reddit(), ban:data});
      }

      self.cancelBan = function(data,event){
        data.editable=false;
        data.rollback();
      }

      self.saveStrike = async function(data,event){
        data.editable=false;
        data.commit();
        await self.post("/api/v1/admin/user/updateStrike", {reddit:self.reddit(), strike:data});
      }

      self.cancelStrike = function(data,event){
        data.editable=false;
        data.rollback();
      }


      self.saveWarning = async function(data,event){
        data.editable=false;
        data.commit();
        await self.post("/api/v1/admin/user/updateWarning", {reddit:self.reddit(), warning:data});
      }

      self.cancelWarning = function(data,event){
        data.editable=false;
        data.rollback();
      }

      self.removeWarning = async function(data,event){
        data.active = false;
        await self.post("/api/v1/admin/user/updateWarning", {reddit:self.reddit(), warning:data});
      }

      self.changeReddit = async function(data,event){
        await self.post("/api/v1/admin/user/changeRedditAccount", {reddit:self.reddit(), newReddit:self.newReddit()});
        self.reddit(self.newReddit());
      }


      self.post = async function(url, data){
        await fetch(url,{
          method:"POST",
          headers:{
            'Content-Type': 'application/json',
          },
          body:JSON.stringify(data)
        });
      } 


      self.loadAvailableTrophies = async function(){
        const response = await fetch("/api/v1/admin/trophies");
        if (response.ok){
          let temp = new UserModel(); 

          temp = ko.mapping.fromJS(await response.json(),mapping,temp);
          self.availableTrophies(temp.trophies());          
        }
      }
    }

    var mapping = {
      'bans': {
          create: function(options) {
              return new StrikeModel(options.data);
          }
      },
      'strikes': {
          create: function(options) {
              return new StrikeModel(options.data);
          }
      },
      'warnings': {
          create: function(options) {
              return new StrikeModel(options.data);
          }
      },
      'roles': {
          create: function(options) {
              return options.data;
          }
      },
      'donations': {
          create: function(options) {
              return new DonationModel(options.data);
          }
      },
      'trophies':{
          create: function(options) {
              return new TrophyModel(options.data);
          }
      },
      'notes':{
          create: function(options) {
              return new NoteModel(options.data);
          }
      }
    }



  -if (admin.roles && admin.roles.indexOf("superadmin") > -1)
    script.
      UserModel.prototype.toggleAdmin = function(data,event){
          $(event.currentTarget || event.target ).toggleClass("btn-secondary");
          $(event.currentTarget || event.target ).toggleClass("btn-success");
          if(this.roles.indexOf("admin") > -1 ){
            this.roles.splice(this.roles.indexOf("admin"),1);
            this.post("/api/v1/admin/user/toggleAdmin", {reddit:this.reddit(), role:"admin", action:"remove"});
          } else {
            this.roles.push("admin")
            this.post("/api/v1/admin/user/toggleAdmin", {reddit:this.reddit(), role:"admin", action:"add"});
          }
      }


      UserModel.prototype.addDonation = function(data,event){
        this.donations.push(this.newDonation());
        this.post("/api/v1/admin/user/addDonation", {reddit:this.reddit(), donation:this.newDonation()});
        this.newDonation(new DonationModel({"date":"","currency":"","value":0}));
      }

  script.
    UserModel.prototype.toggleStreamer = function(data,event){
      $(event.currentTarget || event.target ).toggleClass("btn-secondary");
      $(event.currentTarget || event.target ).toggleClass("btn-success");
      if(this.roles.indexOf("streamer") > -1 ){
        this.roles.splice(this.roles.indexOf("streamer"),1);
        this.post("/api/v1/admin/user/toggleRole", {reddit:this.reddit(), role:"streamer", action:"remove"});
      } else {
        this.roles.push("streamer")
        this.post("/api/v1/admin/user/toggleRole", {reddit:this.reddit(), role:"streamer", action:"add"});
      }
    }
    UserModel.prototype.toggleClanLeader = function(data,event){
      $(event.currentTarget || event.target ).toggleClass("btn-secondary");
      $(event.currentTarget || event.target ).toggleClass("btn-success");
      if(this.roles.indexOf("clanleader") > -1 ){
        this.roles.splice(this.roles.indexOf("clanleader"),1);
        this.post("/api/v1/admin/user/toggleRole", {reddit:this.reddit(), role:"clanleader", action:"remove"});
      } else {
        this.roles.push("clanleader")
        this.post("/api/v1/admin/user/toggleRole", {reddit:this.reddit(), role:"clanleader", action:"add"});
      }
    }
    UserModel.prototype.toggleClanAdmin = function(data,event){
      $(event.currentTarget || event.target ).toggleClass("btn-secondary");
      $(event.currentTarget || event.target ).toggleClass("btn-success");
      if(this.roles.indexOf("clanadmin") > -1 ){
        this.roles.splice(this.roles.indexOf("clanadmin"),1);
        this.post("/api/v1/admin/user/toggleRole", {reddit:this.reddit(), role:"clanadmin", action:"remove"});
      } else {
        this.roles.push("clanadmin")
        this.post("/api/v1/admin/user/toggleRole", {reddit:this.reddit(), role:"clanadmin", action:"add"});
      }
    }
    let model = new UserModel(); 
      ko.applyBindings(model);
    $(document).ready(async function(){

       const response = await fetch("/api/v1/admin/user/#{user}");
      if (response.ok){
        model = ko.mapping.fromJS(await response.json(),mapping,model);
        model.newReddit(model.reddit());
        await model.loadAvailableTrophies();
      } else{
        model.isError(true);
        model.error(await response.text());        
      }

      $("#timezone").on('change', function(e){
        $("#tz_info").text(moment().tz(e.currentTarget.value).format('YYYY-MM-DD HH:mm Z'));
      });

      let select = document.getElementById("timezone");
      let guessed = moment.tz.guess();
      
      let names = moment.tz.names();
      let l = names.length;

      for(let i = 0; i < l; i++){
        let tz = names[i];
        let option = document.createElement("option");
        option.setAttribute("value", tz);
        option.text = tz;
        if (tz === model.timezone()){
          option.setAttribute("selected", "selected")
        }
        select.appendChild(option);
      }

    });


block content
  div(class="container")
    // ko if:isEmpty
    h2(class="highlight") User not found
    // /ko
    // ko if:isError
    h2(class="highlight" data-bind="text: error")
    // /ko
    // ko ifnot:isEmpty
    // ko ifnot:isError
    h2(class="highlight")= user ? user : "Add new user"
    nav
      div(class="nav nav-tabs" id="nav-tab" role="tablist")
        a(class="nav-item nav-link active" id="nav-info-tab" data-bs-toggle="tab" href="#nav-info" role="tab" aria-controls="nav-info" aria-selected="true") Info
        - if(user)
          a(class="nav-item nav-link" id="nav-trophies-tab" data-bs-toggle="tab" href="#nav-trophies" role="tab" aria-controls="nav-trophies" aria-selected="false") Trophies
          a(class="nav-item nav-link" id="nav-notes-tab" data-bs-toggle="tab" href="#nav-notes" role="tab" aria-controls="nav-notes" aria-selected="false") Notes
          a(class="nav-item nav-link" id="nav-warnings-tab" data-bs-toggle="tab" href="#nav-warnings" role="tab" aria-controls="nav-warnings" aria-selected="false") Warnings
          a(class="nav-item nav-link" id="nav-strikes-tab" data-bs-toggle="tab" href="#nav-strikes" role="tab" aria-controls="nav-strikes" aria-selected="false") Strikes
          a(class="nav-item nav-link" id="nav-bans-tab" data-bs-toggle="tab" href="#nav-bans" role="tab" aria-controls="nav-bans" aria-selected="false") Bans
          -if (admin.roles && admin.roles.indexOf("superadmin") >-1)
            a(class="nav-item nav-link" id="nav-donations-tab" data-bs-toggle="tab" href="#nav-donations" role="tab" aria-controls="nav-donations" aria-selected="false") Donations
    div(class="tab-content" id="nav-tabContent")
      div(class="tab-pane fade show active" id="nav-info" role="tabpanel" aria-labelledby="nav-info-tab")
        -if (user && admin.roles && admin.roles.indexOf("superadmin")>-1 )
          button.btn.mx-1(data-bind="click: toggleAdmin, css: roles.indexOf('admin') > -1 ? 'btn-success' : 'btn-secondary'  " ) admin
        button.btn.mx-1(data-bind="click: toggleClanAdmin, css: roles.indexOf('clanadmin') > -1 ? 'btn-success' : 'btn-secondary'  " ) clan admin
        button.btn.mx-1(data-bind="click: toggleClanLeader, css: roles.indexOf('clanleader') > -1 ? 'btn-success' : 'btn-secondary'  " ) clan leader
        button.btn.mx-1(data-bind="click: toggleStreamer, css: roles.indexOf('streamer')  > -1? 'btn-success' : 'btn-secondary'  " ) streamer
        - let userAction = user ? "/admin/user/update" : "/admin/user/new"
        form(action=userAction method="post" class="container signup")
          div
            label(for="reddit") reddit name
            input(type="text" id="reddit" name="reddit" data-bind="value: newReddit")
            // ko if: reddit() != newReddit()
            button(class="btn btn-success " data-bind="click: $root.changeReddit,clickBubble: false" title="Change Reddit Account" style="margin:0px 10px") 
              i(class="fa-solid fa-save")
            label(style="display:inline-block") Update reddit account  
            // /ko
          div
            label(for="coach") Blood Bowl 2 coach name
            input(type="text" id="coach" name="coach" data-bind="value: coach")
          div
            label(for="timezone") Timezone
            select(id="timezone" name="timezone" required title="timezone")
          div
            label(for="discord") Discord
            input(type="text" id="discord" name="discord" data-bind="value: discord")
          div
            label(for="steam") Steam
            input(type="text" id="steam" name="steam" data-bind="value: steam")
          div
            label(for="twitch") Twitch
            input(type="text" id="twitch" name="twitch" data-bind="value: twitch")
          div
            label(for="team") Team
            input(type="text" id="team" name="team" data-bind="value: team")
          div
            label(for="race") Race
            input(type="text" id="race" name="race" data-bind="value: race")
          div(style="clear:both")
            button(type="submit") Save
            br
      div(class="tab-pane fade" id="nav-trophies" role="tabpanel" aria-labelledby="nav-trophies-tab") 
        div(class="row col-12")
          h2 Trophies
        div(class="row col-12")
          div(class="col-2") Date
          div(class="col-3") Trophy
          div(class="col-3") Title
        // ko foreach: trophies
        div(class="row col-12 no-gutter" style="margin-bottom: 5px;")
          div(class="col-2" data-bind="text: date " )
          div(class="col-3" data-bind="text: name ")
          div(class="col-3" data-bind="text: title ")
          div(class="col-3")
            img(data-bind="attr:{src: 'https://cdn.rebbl.net/' + filename }")
          div(class="col-1")
            button(class="btn btn-danger float-right" data-bind="click: $root.deleteTrophy,clickBubble: false") 
              i(class="fa-solid fa-ban")

        // /ko
        br
        form(data-bind="submit: addTrophy")
          //ko with: newTrophy        
          div(class="row col-12 no-gutter")
            div(class="row col-12 no-gutter")
              div(class="col-4") Date
              div(class="col-3") Trophy
              div(class="col-4") Title
            div(class="row col-12 no-gutter")
              div(class="col-4")
                input(type="text" class="col-11" data-bind="value:date " )
              div(class="col-3")
                select(data-bind="options: $root.availableTrophies, optionsText:'name',optionsValue:'name', value: name")
              div(class="col-4")
                input(type="text" class="col-11" data-bind="value:title " )
              button(class="col-1 btn btn-success" type="submit") add 
          // /ko        

      div(class="tab-pane fade" id="nav-warnings" role="tabpanel" aria-labelledby="nav-warnings-tab") 
        div(class="row col-12")
          h2 Warnings
        div(class="row col-12")
          div(class="col-7") Reason
          div(class="col-2") Date start
          div(class="col-2") Date end
        // ko foreach: warnings
        // ko if: active
        div(class="row col-12 no-gutter" style="margin-bottom: 5px;")
          div(class="row col-12 no-gutter" data-bind="click: $root.edit" )
            // ko if: editable
            div(class="col-7")
              input(type="text" class="col-11" data-bind="value:reason " )
            div(class="col-2")
              input(type="text" data-bind="value: start")
            div(class="col-2")
              input(type="text" data-bind="value: end")
            div(class="col-1 no-gutter" style="padding:unset")   
              button(class="btn btn-success " data-bind="click: $root.saveWarning,clickBubble: false") 
                i(class="fa-solid fa-save")
              button(class="btn btn-danger float-right" data-bind="click: $root.cancelWarning,clickBubble: false") 
                i(class="fa-solid fa-ban")
            // /ko
            // ko ifnot: editable
            div(class="col-7" data-bind="text:reason " )
            div(class="col-2" data-bind="text: start")
            div(class="col-2" data-bind="text: end")
            button(class="col-1 btn btn-warning" data-bind="click: $root.removeWarning,clickBubble: false") remove
            // /ko
        // /ko
        // /ko
        br
        form(data-bind="submit: addWarning")
          //ko with: newWarning        
          div(class="row col-12 no-gutter")
            div(class="row col-12 no-gutter")
              div(class="col-7")
                input(type="text" class="col-11" data-bind="value:reason " )
              div(class="col-2")
                input(type="text" data-bind="value: start")
              div(class="col-2")
                input(type="text" data-bind="value: end")
              button(class="col-1 btn btn-success" type="submit") add 
          // /ko        
      div(class="tab-pane fade" id="nav-notes" role="tabpanel" aria-labelledby="nav-notes-tab") 
        div(class="row col-12")
          h2 Notes
        div(class="row col-12")
          div(class="col-9") Text
          div(class="col-2") Date
        // ko foreach: notes
        div(class="row col-12 no-gutter" style="margin-bottom: 5px;")
          div(class="row col-12 no-gutter" data-bind="click: $root.edit" )
            div(class="col-9" data-bind="text:text " )
            div(class="col-2" data-bind="text:date")
        // /ko
        br
        form(data-bind="submit: addNote")
          //ko with: newNote        
          div(class="row col-12 no-gutter")
            div(class="row col-12 no-gutter")
              div(class="col-9")
                input(type="text" class="col-11" data-bind="value:text " )
              button(class="col-1 btn btn-success" type="submit") add 
          // /ko        
      div(class="tab-pane fade" id="nav-strikes" role="tabpanel" aria-labelledby="nav-strikes-tab") 
        div(class="row col-12")
          h2 Active strikes
        div(class="row col-12")
          div(class="col-7") Reason
          div(class="col-2") Date start
          div(class="col-2") Date end
        // ko foreach: strikes
        // ko if: active
        div(class="row col-12 no-gutter" style="margin-bottom: 5px;")
          div(class="row col-12 no-gutter" data-bind="click: $root.edit" )
            // ko if: editable
            div(class="col-7")
              input(type="text" class="col-11" data-bind="value:reason " )
            div(class="col-2")
              input(type="text" data-bind="value: start")
            div(class="col-2")
              input(type="text" data-bind="value: end")
            div(class="col-1 no-gutter" style="padding:unset")   
              button(class="btn btn-success " data-bind="click: $root.saveStrike,clickBubble: false") 
                i(class="fa-solid fa-save")
              button(class="btn btn-danger float-right" data-bind="click: $root.cancelStrike,clickBubble: false") 
                i(class="fa-solid fa-ban")
            // /ko
            // ko ifnot: editable
            div(class="col-7" data-bind="text:reason " )
            div(class="col-2" data-bind="text: start")
            div(class="col-2" data-bind="text: end")
            button(class="col-1 btn btn-warning" data-bind="click: $root.toggle,clickBubble: false") deactivate 
            // /ko
        // /ko
        // /ko
        br
        form(data-bind="submit: addStrike")
          //ko with: newStrike        
          div(class="row col-12 no-gutter")
            div(class="row col-12 no-gutter")
              div(class="col-7")
                input(type="text" class="col-11" data-bind="value:reason " )
              div(class="col-2")
                input(type="text" data-bind="value: start")
              div(class="col-2")
                input(type="text" data-bind="value: end")
              button(class="col-1 btn btn-success" type="submit") add 
          // /ko        
        div(class="row col-12")
          h2 Old strikes
          div(class="row col-12")
            div(class="col-7") Reason
            div(class="col-2") Date start
            div(class="col-2") Date end
        // ko foreach: strikes
        // ko ifnot: active
        div(class="row col-12")
          div(class="row col-12")
            div(class="col-7" data-bind="text:reason " )
            div(class="col-2" data-bind="text: start")
            div(class="col-2" data-bind="text: end")
            button(class="col-1 btn btn-warning" data-bind="click: $root.toggle") activate 
        // /ko
        // /ko

      div(class="tab-pane fade" id="nav-bans" role="tabpanel" aria-labelledby="nav-bans-tab") 
        div(class="row col-12")
          h2 Active bans
        div(class="row col-12")
          div(class="col-7") Reason
          div(class="col-2") Date start
          div(class="col-2") Date end
        // ko foreach: bans
        // ko if: active
        div(class="row col-12 no-gutter" style="margin-bottom: 5px;")
          div(class="row col-12 no-gutter" data-bind="click: $root.edit" )
            // ko if: editable
            div(class="col-7")
              input(type="text" class="col-11" data-bind="value:reason " )
            div(class="col-2")
              input(type="text" data-bind="value: start")
            div(class="col-2")
              input(type="text" data-bind="value: end")
            div(class="col-1 no-gutter" style="padding:unset")   
              button(class="btn btn-success " data-bind="click: $root.saveBan,clickBubble: false") 
                i(class="fa-solid fa-save")
              button(class="btn btn-danger float-right" data-bind="click: $root.cancelBan,clickBubble: false") 
                i(class="fa-solid fa-ban")
            // /ko
            // ko ifnot: editable
            div(class="col-7" data-bind="text:reason " )
            div(class="col-2" data-bind="text: start")
            div(class="col-2" data-bind="text: end")
            button(class="col-1 btn btn-warning" data-bind="click: $root.toggleBan,clickBubble: false") deactivate 
            // /ko            
        // /ko
        // /ko
        br
        form(data-bind="submit: addBan")
          //ko with: newBan        
          div(class="row col-12 no-gutter")
            div(class="row col-12 no-gutter")
              div(class="col-7")
                input(type="text" class="col-11" data-bind="value:reason " )
              div(class="col-2")
                input(type="text" data-bind="value: start")
              div(class="col-2")
                input(type="text" data-bind="value: end")
              button(class="col-1 btn btn-success" type="submit") add 
          // /ko        
        div(class="row col-12")
          h2 Old bans
          div(class="row col-12")
            div(class="col-7") Reason
            div(class="col-2") Date start
            div(class="col-2") Date end
        // ko foreach: bans
        // ko ifnot: active
        div(class="row col-12")
          div(class="row col-12")
            div(class="col-7" data-bind="text:reason " )
            div(class="col-2" data-bind="text: start")
            div(class="col-2" data-bind="text: end")
            button(class="col-1 btn btn-warning" data-bind="click: $root.toggleBan") activate 
        // /ko
        // /ko

      -if (admin.roles && admin.roles.indexOf("superadmin")>-1)
        div(class="tab-pane fade" id="nav-donations" role="tabpanel" aria-labelledby="nav-donations-tab") 
          div(class="row col-12")
            div(class="col-4" ) Date
            div(class="col-4" ) Currency
            div(class="col-4" ) Value
          // ko foreach: donations
          div(class="row col-12")
            div(class="col-4" data-bind="text: date" )
            div(class="col-4" data-bind="text: currency")
            div(class="col-4" data-bind="text: value")
          // /ko 
          div(class="row col-12")
            form(data-bind="submit: addDonation" class="col-12")
              //ko with: newDonation        
              div(class="row col-12 no-gutter")
                div(class="col-4")
                  input(type="text" class="col-11" data-bind="value:date" )
                div(class="col-4")
                  input(type="text" data-bind="value: currency")
                div(class="col-3")
                  input(type="text" data-bind="value: value")
              button(class="col-1 btn btn-success" type="submit") add 
              // /ko        
       
    // /ko
    // /ko
