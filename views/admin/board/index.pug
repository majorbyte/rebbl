extends ../layout.pug

block scripts
  script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
  script(src="https://cdn.rebbl.net/scripts/knockout-mapping.min.js")
  script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")
  script.
    function Coach(data){
      let self = this;
      this.map = (data) => {
          if (data) {
              this.user = data.User;
              this.id = data.IdUser;
              this.alert = "";
          }
      };
      this.map(data);

      ko.track(this);
    }

    function Model(data){
      let self = this;
      self.leagues = data;
      self.coachName = "";
      self.coaches = [];
      self.filter = "";
      self.filterRoles =[];
      self.league = [];
      self.selectedLeague = null;


      this.filteredLeague = function(){

        let league = self.filter === "" ? [...self.league] : self.league.filter(l => l.coachName.indexOf(self.filter) > -1);

        league = self.filterRoles.length === 0 ? league : league.filter(l => self.filterRoles.includes(Number(l.type)) );

        const ret = []        
        while(league.length) ret.push({coaches:league.splice(0,2)});

        return ret;
      }

      this.toggleRole = async function(role){
        self.filterRoles.includes(role) 
          ? self.filterRoles.splice(self.filterRoles.indexOf(role),1) 
          : self.filterRoles.push(role);
      }

      this.loadBoardInfo = async function(id){
        let response = await fetch(`/api/v1/admin/board/${id}`);
        if (response.ok){
          let leagues =  await response.json(); 
          this.league = leagues.sort((a,b)=>{
            if(a.type > b.type) return 1;
            if(a.type < b.type) return -1;
            
            if(a.coachName.toLowerCase() > b.coachName.toLowerCase()) return 1;
            if(a.coachName.toLowerCase() < b.coachName.toLowerCase()) return -1;

            return 0
          });
        }
      }

      this.getBoardInfo = async function(data,event){
        self.selectedLeague = data;
        self.coaches.map(coach => coach.alert = "");
        self.league = [];
        await self.loadBoardInfo(data.id);
      }

      this.searchCoach = async function(){
        let response = await fetch(`/api/v1/admin/board/search/${encodeURIComponent(self.coachName)}`);
        if (response.ok){
          let coaches = await response.json();
          
          if(!Array.isArray(coaches)) coaches = [coaches];

          self.coaches = coaches.map(coach => new Coach(coach));
        }
      }

      this.addAdministrator = async function(data,event){

        if(!self.selectedLeague) return;

        let response = await fetch(`/api/v1/admin/board/${self.selectedLeague.id}`, 
          {
            method:"POST",
            headers:{
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({coachName: data.user, coachId: data.id, type:1})
        });
        if(response.ok){
          await self.loadBoardInfo(self.selectedLeague.id);
        } else {
          debugger;
          let message = await response.json();
          data.alert = message.Message;
        }

      }
      this.addCommisioner = async function(data,event){

        if(!self.selectedLeague) return;

        let response = await fetch(`/api/v1/admin/board/${self.selectedLeague.id}`, 
          {
            method:"POST",
            headers:{
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({coachName: data.user, coachId: data.id, type:2})
        });
        if(response.ok){
          await self.loadBoardInfo(self.selectedLeague.id);
        } else {
          let message = await response.json();
          data.alert = message.Message;
        }

      }
      this.remove = async function(data,event){
        let response = await fetch(`/api/v1/admin/board/${data.boardId}`, 
          {
            method:"DELETE"
        });
        if(response.ok){
          self.league.splice(self.league.indexOf(data),1);
        }
      }

      this.getIcon = function(data){
        switch(Number(data.type)){
          case 0:
            return 'fa-solid fa-circle-user'; 
          case 1:
            return 'fa-solid fa-user-plus';
          case 2:
            return 'fa-solid fa-user';
          case 3:
            return 'fa-solid fa-vcard';
        }
      }

      this.getFilterCSS = function(n){
        const muted = self.filterRoles.length === 0 || self.filterRoles.includes(n) ? " text-success" : " text-muted";
        switch(n){
          case 0:
            return 'fa-solid fa-user-circle mx-1' + muted; 
          case 1:
            return 'fa-solid fa-user-plus mx-1' + muted;
          case 2:
            return 'fa-solid fa-user mx-1' + muted;
          case 3:
            return 'fa-solid fa-vcard mx-1' + muted;
        }
      }

      ko.track(this);      
    }  

    let model;
    $(document).ready(async function(){
        let response = await fetch(`/api/v1/admin/board`);

        if(response.ok){
          model = new Model(await response.json());  
          ko.applyBindings(model);
        }
    });

block content
  div.container
    div.row.col-12
      div.col            
        button.btn.btn-sm.btn-secondary.dropdown-toggle(type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false") Choose league
        div.dropdown-menu(aria-labelledby="dropdownMenuButton" style="max-height: 400px;  overflow-y: auto")
          //ko foreach: leagues
          a.dropdown-item(data-bind="attr:{href:'#'},text:name,click: $parent.getBoardInfo")
          // /ko
      div.col.float-right.d-flex.justify-content-end
        i(data-bind="click:toggleRole.bind($data,0),css:getFilterCSS(0)")
          span(style="padding-left:5px") President
        i(data-bind="click:toggleRole.bind($data,1),css:getFilterCSS(1)")
          span(style="padding-left:5px") Administrator
        i(data-bind="click:toggleRole.bind($data,2),css:getFilterCSS(2)")
          span(style="padding-left:5px") Commisioner
        i(data-bind="click:toggleRole.bind($data,3),css:getFilterCSS(3)")
          span(style="padding-left:5px") Writer

    //ko if: selectedLeague !== null
    div.row.col-12
      div.col-4       
        div.card(style="width: 18rem;margin-top:40px")
          img.card-img-top(data-bind="attr:{src:`https://cdn.rebbl.net/images/logo/256x256/logo_${selectedLeague.logo.toLowerCase()}.png`}")
          div.card-body
            h5.card-title(data-bind="text:selectedLeague.name")
            h6.card-subtitle.mb-2.text-muted(data-bind="text:selectedLeague.description")
            p.card-text
              small.text-muted(data-bind="text:`${selectedLeague.teams} teams`")
            //ko if: selectedLeague.website !== ""
            a.card-link(data-bind="attr:{href:selectedLeague.website},text:selectedLeague.website") 
            // /ko
      div.col-4
        h1 Add user
        input(type="text" data-bind="value: coachName" placeholder="Coach name")
        div.btn.btn-default.btn-sm(data-bind="click: searchCoach") 
          i.fa-solid.fa-search
        br
        ul.list-group
          //ko foreach: coaches
          li.list-group-item
            div.row.g-0
              div.col-12
                span(data-bind="text: ' ' + user")
                div.float-right.btn.btn-success.btn-sm(data-bind="click: $parent.addCommisioner" title="add commisioner") 
                  i.fa-solid.fa-user
                div.float-right.btn.btn-success.btn-sm.mx-1(data-bind="click: $parent.addAdministrator" title="add administrator") 
                  i.fa-solid.fa-user-plus
              //ko if: $data.alert !== ""
              div.col-12
                div.alert.alert-danger.alert-dismissible.fade.show(role="alert")
                  span(data-bind="text:$data.alert")
                  button.close(type="button" data-bs-dismiss="alert" aria-label="Close")
                    span(aria-hidden="true") &times;
              // /ko
      
          // /ko
      div.col-4
        h1(data-bind="text:selectedLeague.name") 
        input(type="text" data-bind="value: filter,valueUpdate:'keyup'" placeholder="Filter")
        br
        table.table
          tbody
            //ko foreach: $root.filteredLeague()
            tr
              //ko foreach: coaches
              td
                i(data-bind="css: $root.getIcon($data)")
                span(data-bind="text: ' ' + coachName")
                //ko if: type !== "0"
                div.float-right.btn.btn-danger.btn-sm(data-bind="click: $root.remove") 
                  i.fa-solid.fa-gavel
                // /ko
              // /ko
            // /ko
    // /ko

