extends ../layout.pug



block scripts
  script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
  script.
    function DateModel() {
        const self = this;
        self.games = ko.observableArray([]);
        self.loading = ko.observable(true);


        self.filteredDivisions = ko.observableArray([]);
        self.filteredRounds = ko.observableArray([]);

        self.divisions = ko.computed(function(){
          let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
          return [...new Set(self.games().map(x => x.competition))].sort(collator.compare); 
        });

        self.rounds = ko.computed(function(){
          let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
          return [...new Set(self.games().map(x => x.round || 2))].sort(collator.compare); 
        });

        self.filteredGames = ko.computed(function(){

          if (self.filteredDivisions().length > 0  && self.filteredRounds().length  > 0){

            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1
              && self.filteredRounds.indexOf(x.round || 2) > -1       
            );
          }

          if (self.filteredRounds().length  > 0){

            return self.games().filter(x => self.filteredRounds.indexOf(x.round || 2) > -1       
            );
          }

          if (self.filteredDivisions().length > 0  && self.filteredRounds().length  > 0){

            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1
              && self.filteredRounds.indexOf(x.round || 2) > -1       
            );
          }

          if (self.filteredDivisions().length > 0 ){

            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1
            );
          }



          if (self.filteredDivisions().length > 0 ){
            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1);
          }

          if ( self.filteredRounds().length > 0){
            return self.games().filter(x => self.filteredRounds.indexOf(x.round || 2) > -1);
          }

          return self.games();

        });


        self.toggleDivision= function(d,e){
          self.toggleButton(e);
          let i = self.filteredDivisions.indexOf(d);
          if( i === -1){
            self.filteredDivisions.push(d);
          } else {
            self.filteredDivisions.splice(i,1);  
          }
        }
        self.toggleRound= function(r,e){
          self.toggleButton(e);
          let i = self.filteredRounds.indexOf(r);
          if( i === -1){
            self.filteredRounds.push(r);
          } else {
            self.filteredRounds.splice(i,1);  
          }
        }

        self.toggleButton = function(e){
          const toggle = new bootstrap.Button(e.target,{
            toggle:true
          });
          toggle.toggle();          
        }

        //- self.refresh = async function(g){
        //-   await fetch(`/api/v1/admin/unplayed/${g.contest_id}`,{method:"POST"});
        //- }

    }

    const model = new DateModel();

    $(document).ready(async function(){
        ko.applyBindings(model);

        const response = await fetch("/api/v1/admin/unplayed");
        if (response.ok) model.games(await response.json());
        
        model.loading(false);
    });


block content
  div(class="container")
    //ko if: loading
    div(class="row col-12 justify-content-center")
      i(class="fa-solid fa-spinner fa-spin" style="margin-top:250px;font-size:96px;color: #e67b00;")
    // /ko
    div(class="row col-12")
      div(class="btn-group-toggle" data-toggle="buttons")
        // ko foreach: divisions
        input.btn-check(type="checkbox" autocomplete="off" data-bind="attr:{id:'div_btn'+$index()}")
        label(class="btn btn-outline-primary" data-bind="click: $root.toggleDivision, text: $data, attr:{for:'div_btn'+$index()}")
        // /ko
    br
    div(class="row col-12")
      div(class="btn-group-toggle" data-toggle="buttons")
        // ko foreach: rounds
        input.btn-check(type="checkbox" autocomplete="off" data-bind="attr:{id:'week_btn'+$index()}")
        label(class="btn btn-outline-primary" data-bind="click: $root.toggleRound, text: $data, attr:{for:'week_btn'+$index()}") 
        // /ko        
    br
    div(class="row col-12")
      div(class="col-2") League
      div(class="col-2") Coach
      div(class="col-3") Team
      div(class="col-3") Team
      div(class="col-2") Coach
    hr
    div(data-bind="foreach: filteredGames" )
      div(class="row col-12")
        div(class="col-2")
          // ko if: status === 2
          a(data-bind="text: competition, attr:{href:`/bb3/match/${matchId}` }"  target="_blank" style="color:#03a9f4")
          // /ko
          // ko if: status === 1
          span( data-bind="text: competition")
          // /ko
        div(class="col-2" )
          a(data-bind="text: home.coach.name, attr:{href:'/bb3/coach/'+ home.coach.id + '/details' }"  target="_blank" style="color:#03a9f4")
        div(class="col-3")
          span(data-bind="text: home.team.name")
        div(class="col-3")
          span(data-bind="text: away.team.name")
        div(class="col-2")
          a(data-bind="text: away.coach.name, attr:{href:'/bb3/coach/'+ away.coach.id + '/details'}" target="_blank" style="color:#03a9f4")






