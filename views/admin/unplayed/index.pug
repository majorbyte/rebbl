extends ../layout.pug



block scripts
  script(src="https://cdn.rebbl.net/scripts/knockout-3.5.1.js")
  script.
    function MatchModel(data){
      const self = this;

      self.adminType = ko.observable("byeweek");

      self.homeTeamId = ko.observable(data.homeTeamId);
      self.homeTeamCoach = ko.observable(data.homeTeamCoach);
      self.homeTeamName = ko.observable(data.homeTeamName);
      self.homeTeamLogo = ko.observable(data.homeTeamLogo);
      self.homeTeamSelected = ko.observable(false);

      self.awayTeamId = ko.observable(data.awayTeamId);
      self.awayTeamCoach = ko.observable(data.awayTeamCoach);
      self.awayTeamName = ko.observable(data.awayTeamName);
      self.awayTeamLogo = ko.observable(data.awayTeamLogo);
      self.awayTeamSelected = ko.observable(false);

      self.competition = ko.observable(data.competition);
      self.round = ko.observable(data.round);
      self.matchId = ko.observable(data.matchId);

      self.processing = ko.observable(false);
      self.processed = ko.observable(false);

      self.success = ko.observable(false);

      self.homeCardClass = ko.pureComputed(function(){
        return self.homeTeamSelected() ? 'card border border-5 border-success bg-success' : 'card';
      });

      self.awayCardClass = ko.pureComputed(function(){
        return self.awayTeamSelected() ? 'card border border-5 border-success bg-success' : 'card';
      });

      self.selectHome = function(){
        self.homeTeamSelected(true);
        self.awayTeamSelected(false);
      }
      self.selectAway = function(){
        self.homeTeamSelected(false);
        self.awayTeamSelected(true);
      }

      self.adminType.subscribe(function(newValue){
        self.homeTeamSelected(newValue === "homewin" || newValue.indexOf("Draw") > -1 );
        self.awayTeamSelected(newValue === "awaywin" || newValue.indexOf("Draw") > -1 );

      });


      self.textHome = ko.pureComputed(function(){
        switch(self.adminType()){
          case "byeweek":
            if (self.homeTeamSelected()) return `2 MVP's, 1 TD and all the cash.`;
            break;
          case "homewin":
            return `1 MVP, 2 TDs.`;
          case "awaywin":
            return `1 MVP, 1 TD.`;
          case "validDraw":
            return `1 MVP, 1 TD.`;
          case "invalidDraw":
            return `1 MVP, 0 TD.`;
        }

      });

      self.textAway = ko.pureComputed(function(){
        switch(self.adminType()){
          case "byeweek":
            if (self.awayTeamSelected()) return `2 MVP's, 1 TD and all the cash.`;
            break;
          case "homewin":
            return `1 MVP, 1 TD.`;
          case "awaywin":
            return `1 MVP, 2 TDs.`;
          case "validDraw":
            return `1 MVP, 1 TD.`;
          case "invalidDraw":
            return `1 MVP, 0 TD.`;
        }

      });

      self.proceed = async function(){
        self.processing(true);
        const teamId = self.homeTeamSelected() ? self.homeTeamId() : self.awayTeamId();
        const response = await fetch(`/api/v1/admin/unplayed/admin/${self.matchId()}`, {
            method:"POST",
            headers:{'Content-Type': 'application/json'},
            body:JSON.stringify({
              type: self.adminType(),
              teamId
            })
        });
        self.processing(false);
        self.processed(true);
        if(response.ok) self.success(true);
        else self.success(false);
      }
    }

    function DataModel() {
        const self = this;
        self.games = ko.observableArray([]);
        self.loading = ko.observable(true);
        self.played = ko.observable(true);
        self.unplayed = ko.observable(true);

        self.adminMatch = ko.observable(new MatchModel({}));
        self.resetMatch = ko.observable({});

        self.filteredDivisions = ko.observableArray([]);
        self.filteredRounds = ko.observableArray([]);

        self.divisions = ko.computed(function(){
          let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
          return [...new Set(self.games().map(x => x.competition))].sort(collator.compare); 
        });

        self.rounds = ko.computed(function(){
          let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
          return [...new Set(self.games().map(x => x.round || 2))].sort(collator.compare); 
        });

        self.filteredGames = ko.computed(function(){

          if (self.filteredDivisions().length > 0  && self.filteredRounds().length  > 0){
            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1
              && self.filteredRounds.indexOf(x.round || 2) > -1
              && ((self.played() && x.status === 2) || (self.unplayed() && x.status === 1 ))        
            );
          }

          if (self.filteredRounds().length  > 0){
            return self.games().filter(x => self.filteredRounds.indexOf(x.round || 2) > -1 
              && ((self.played() && x.status === 2) || (self.unplayed() && x.status === 1 ))        
            );
          }

          if (self.filteredDivisions().length > 0  && self.filteredRounds().length  > 0){

            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1
              && self.filteredRounds.indexOf(x.round || 2) > -1       
              && ((self.played() && x.status === 2) || (self.unplayed() && x.status === 1 ))        
            );
          }

          if (self.filteredDivisions().length > 0 ){

            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1
              && ((self.played() && x.status === 2) || (self.unplayed() && x.status === 1 ))        
            );
          }

          if (self.filteredDivisions().length > 0 ){
            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition) > -1
              && ((self.played() && x.status === 2) || (self.unplayed() && x.status === 1 ))        
            );
          }

          if ( self.filteredRounds().length > 0){
            return self.games().filter(x => self.filteredRounds.indexOf(x.round || 2) > -1
              && ((self.played() && x.status === 2) || (self.unplayed() && x.status === 1 ))        
            );
          }

          return self.games().filter(x => (self.played() && x.status === 2) || (self.unplayed() && x.status === 1 ));

        });

        self.admin = function(match,e){
          self.adminMatch(new MatchModel({
            homeTeamId : match.home.team.id,
            homeTeamLogo : match.home.team.logo,
            homeTeamCoach : match.home.coach.name,
            homeTeamName : match.home.team.name,
            awayTeamId : match.away.team.id,
            awayTeamLogo : match.away.team.logo,
            awayTeamCoach : match.away.coach.name,
            awayTeamName : match.away.team.name,
            competition : match.competition,
            round : match.round,
            matchId : match.matchId
          }));
        }



        self.reset = function(match,e){
          self.resetMatch(match);
        }
        self.performReset = async function(){
          await fetch(`/api/v1/admin/unplayed/reset/${self.resetMatch().matchId}`,{method:"POST"});
          await self.load();
        }

        self.toggleDivision= function(d,e){
          self.toggleButton(e);
          let i = self.filteredDivisions.indexOf(d);
          if( i === -1){
            self.filteredDivisions.push(d);
          } else {
            self.filteredDivisions.splice(i,1);  
          }
        }
        self.toggleRound= function(r,e){
          self.toggleButton(e);
          let i = self.filteredRounds.indexOf(r);
          if( i === -1){
            self.filteredRounds.push(r);
          } else {
            self.filteredRounds.splice(i,1);  
          }
        }
        self.togglePlayed= function(r,e){
          self.toggleButton(e);
          self.played(!self.played());
        }        
        self.toggleUnplayed= function(r,e){
          self.toggleButton(e);
          self.unplayed(!self.unplayed());
        }
        self.toggleButton = function(e){
          const toggle = new bootstrap.Button(e.target,{
            toggle:true
          });
          toggle.toggle();          
        }

        //- self.refresh = async function(g){
        //-   await fetch(`/api/v1/admin/unplayed/${g.contest_id}`,{method:"POST"});
        //- }

        self.load = async function(){
          self.loading(true); 
          const response = await fetch("/api/v1/admin/unplayed");
          if (response.ok) self.games(await response.json());
        
          self.loading(false);          
        }

    }

    const model = new DataModel();

    $(document).ready(async function(){
        ko.applyBindings(model);
        await model.load();

    });


block content
  .container
    //ko if: loading()
    .row.col-12.justify-content-center
      .spinner-grow(style="width: 3rem; height: 3rem;" role="status")
        span.visually-hidden Loading...

    // /ko
    //ko if: !loading()
    .row.col-12
      .btn-group-toggle(data-toggle="buttons")
        // ko foreach: divisions
        input.btn-check(type="checkbox" autocomplete="off" data-bind="attr:{id:'div_btn'+$index()}")
        label.btn.btn-outline-primary(data-bind="click: $root.toggleDivision, text: $data, attr:{for:'div_btn'+$index()}")
        // /ko
    br
    .row.col-12
      .btn-group-toggle(data-toggle="buttons")
        // ko foreach: rounds
        input.btn-check(type="checkbox" autocomplete="off" data-bind="attr:{id:'week_btn'+$index()}")
        label.btn.btn-outline-primary(data-bind="click: $root.toggleRound, text: $data, attr:{for:'week_btn'+$index()}") 
        // /ko        
    br
    .row.col-12
      .btn-group-toggle(data-toggle="buttons")
        input.btn-check(type="checkbox" autocomplete="off" data-bind="attr:{id:'played_btn'}")
        label.btn.btn-outline-primary.active(data-bind="click: $root.togglePlayed, text: 'played', attr:{for:'played_btn'}") 
        input.btn-check(type="checkbox" autocomplete="off" data-bind="attr:{id:'unplayed_btn'}")
        label.btn.btn-outline-primary.active(data-bind="click: $root.toggleUnplayed, text: 'unplayed', attr:{for:'unplayed_btn'}") 
    br
    table.table.table-sm
      thead
        th Competition 
        th Home Coach 
        th Home Team 
        th 
        th Away Team 
        th Away Coach
        th
      tbody(data-bind="foreach: filteredGames" )
        tr
          td
            // ko if: status === 2
            a(data-bind="text: competition, attr:{href:`/bb3/match/${matchId}` }"  target="_blank" style="color:#03a9f4")
            // /ko
            // ko if: status === 1
            span( data-bind="text: competition")
            // /ko
          td
            a(data-bind="text: home.coach.name, attr:{href:'/coach/bb3/'+ home.coach.id}"  target="_blank" style="color:#03a9f4")
            // ko if: $data.hasOwnProperty("validatedBy") && validatedBy.indexOf(home.coach.id) > -1
            span.badge.badge-sm.text-bg-success.mx-2 validated
            // /ko
            // ko if: $data.hasOwnProperty("notValidatedBy") && notValidatedBy.indexOf(home.coach.id) > -1
            span.badge.bage-sm.text-bg-danger.mx-2 blocked
            // /ko
          td 
            span(data-bind="text: home.team.name")
          td 
            // ko if: status == 2
            span(data-bind="text: home.score")
            span.mx-2 -
            span(data-bind="text: away.score")
            // /ko  
          td 
            span(data-bind="text: away.team.name ")
          td
            a(data-bind="text: away.coach.name, attr:{href:'/coach/bb3/'+ away.coach.id}" target="_blank" style="color:#03a9f4")
            // ko if: $data.hasOwnProperty("validatedBy") && validatedBy.indexOf(away.coach.id) > -1
            span.badge.bage-sm.text-bg-success.mx-2 validated
            // /ko
            // ko if: $data.hasOwnProperty("notValidatedBy") && notValidatedBy.indexOf(away.coach.id) > -1
            span.badge.bage-sm.text-bg-danger.mx-2 blocked
            // /ko
          td 
            // ko if: $data.status == 1
            button.btn.btn-sm.btn-primary(data-bind="click:$root.admin" data-bs-toggle="modal" data-bs-target="#AdminMatchModal")
              i.fa.fa-wrench
            // /ko
            // ko if: $data.status == 2
            button.btn.btn-sm.btn-danger(data-bind="click:$root.reset" data-bs-toggle="modal" data-bs-target="#ResetMatchModal")
              i.fa.fa-mail-reply-all
            // /ko
    // /ko

  #AdminMatchModal.modal.fade(tabindex='-1' aria-labelledby='exampleModalLabel' aria-hidden='true')
    .modal-dialog.modal-dialog-centered.modal-lg
      .modal-content
        //ko if: adminMatch().homeTeamId
        // ko with: adminMatch()
        .modal-header
          h1#exampleModalLabel.modal-title.fs-5(data-bind="text: 'Admin match: ' + competition() + ', round: ' + round()")
          button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')

        .modal-body.d-flex.flex-wrap

          .input-group.mb-3
            label.input-group-text(for="inputGroupSelect01") Result
            select#inputGroupSelect01.form-select(data-bind="value: adminType")
              option( selected disabled) choose...
              option(value="byeweek") bye week
              option(value="homewin") home: 2 away: 1
              option(value="awaywin") home: 1 away: 2
              option(value="validDraw") home: 1 away: 1
              option(value="invalidDraw") home: 0 away: 0
              //option(value="custom") custom

          div(data-bind="attr: {class: homeCardClass}, click: selectHome " style="width:50%;--bs-bg-opacity: .5;")
            img.lg.card-img-top(data-bind="{attr: {src:`https://cdn.rebbl.net/images/bb3/Logos/100x100/${homeTeamLogo()}`}}" alt="...")

            .card-body
              h5.card-title.my-0(style="color: rgb(24, 119, 162)" data-bind="text: homeTeamName")
              h5.card-title.my-0(style="color: rgb(24, 119, 162)" data-bind="text: homeTeamCoach")
            .card-footer 
              p(data-bind="text:textHome()")  

          div(data-bind="attr: {class: awayCardClass }, click: selectAway" style="width:50%;--bs-bg-opacity: .5;")
            img.card-img-top(data-bind="{attr: {src:`https://cdn.rebbl.net/images/bb3/Logos/100x100/${awayTeamLogo()}`}}" alt="...")

            .card-body
              h5.card-title.my-0(style="color: rgb(24, 119, 162)" data-bind="text: awayTeamName")
              h5.card-title.my-0(style="color: rgb(24, 119, 162)" data-bind="text: awayTeamCoach")

            .card-footer 
              p(data-bind="text:textAway()")  

          div(style="width: 100%;")
            // ko if: processing()
            p Processing the result, this can take up to 90 seconds, so please be patient.
            // /ko
        .modal-footer.d-flex
          .mx-0(style="width:25%")
            button.btn.btn-primary(type='button' data-bind="click: proceed, attr: {disabled: processing() || processed() || (!homeTeamSelected() && !awayTeamSelected()) }" ) 
              // ko if: processing()
              span.mx-2 processing 
              span.spinner-border.spinner-border-sm(aria-hidden="true")
              // /ko
              // ko if: !processing()
              span proceed
              // /ko
          .mx-0(style="width:50%")
            // ko if:processed()
            // ko if:success()
            span.text-success Result successfully processed
            // /ko
            // ko if:!success()
            span.text-danger Something when wrong, please contact majorbyte.
            // /ko
            // /ko
          .mx-0(style="width:25%;text-align:end")
            button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
        // /ko
        // /ko

  #ResetMatchModal.modal.fade
    .modal-dialog.modal-dialog-centered.modal-lg
      .modal-content
        // ko if: resetMatch().competition
        // ko with: resetMatch()
        .modal-header
          h1#exampleModalLabel.modal-title.fs-5(data-bind="text: 'Reset match: ' + competition + ', round: ' + round")
          button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
        .modal-body.d-flex.flex-wrap
          p(data-bind="text: `Are you sure you want to reset the game between ${$data.home.team.name} and ${$data.away.team.name}`")

        .modal-footer.d-flex
          .mx-0(style="width:50%")
            button.btn.btn-danger(type='button' data-bind="click: $root.performReset" data-bs-dismiss='modal') 
              span Yes
          .mx-0(style="width:50%;text-align:end")
            button.btn.btn-secondary(type='button' data-bs-dismiss='modal') No

        // /ko
        // /ko