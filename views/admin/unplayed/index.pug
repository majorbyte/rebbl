extends ../layout.pug



block scripts
  script(src="https://cdn2.rebbl.net/scripts/knockout-3.4.2.js")
  script.
    function DateModel() {
        const self = this;
        self.games = ko.observableArray([]);
        self.loading = ko.observable(true);


        self.filteredLeagues = ko.observableArray([]);
        self.filteredDivisions = ko.observableArray([]);
        self.filteredRounds = ko.observableArray([]);

        self.divisions = ko.computed(function(){
          let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
          return [...new Set(self.games().map(x => x.competition.replace(/Season 17.{1,3}Division /i,'Div ')))].sort(collator.compare); 
        });

        self.rounds = ko.computed(function(){
          let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
          return [...new Set(self.games().map(x => x.round || 2))].sort(collator.compare); 
        });

        self.filteredGames = ko.computed(function(){

          if (self.filteredDivisions().length > 0  && self.filteredLeagues().length > 0 && self.filteredRounds().length  > 0){

            return self.games().filter(x => self.filteredLeagues.indexOf(x.league.replace(" 2","")) > -1
              && self.filteredDivisions.indexOf(x.competition.replace(/Season 17.{1,3}Division /i,'Div ')) > -1
              && self.filteredRounds.indexOf(x.round || 2) > -1       
            );
          }

          if (self.filteredLeagues().length > 0 && self.filteredRounds().length  > 0){

            return self.games().filter(x => self.filteredLeagues.indexOf(x.league.replace(" 2","")) > -1
              && self.filteredRounds.indexOf(x.round || 2) > -1       
            );
          }

          if (self.filteredDivisions().length > 0  && self.filteredRounds().length  > 0){

            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition.replace(/Season 17.{1,3}Division /i,'Div ')) > -1
              && self.filteredRounds.indexOf(x.round || 2) > -1       
            );
          }

          if (self.filteredDivisions().length > 0  && self.filteredLeagues().length > 0){

            return self.games().filter(x => self.filteredLeagues.indexOf(x.league.replace(" 2","")) > -1
              && self.filteredDivisions.indexOf(x.competition.replace(/Season 17.{1,3}Division /i,'Div ')) > -1
            );
          }



          if (self.filteredDivisions().length > 0 ){
            return self.games().filter(x => self.filteredDivisions.indexOf(x.competition.replace(/Season 17.{1,3}Division /i,'Div ')) > -1);
          }

          if ( self.filteredLeagues().length > 0){
            return self.games().filter(x => self.filteredLeagues.indexOf(x.league.replace(" 2","")) > -1);
          }

          if ( self.filteredRounds().length > 0){
            return self.games().filter(x => self.filteredRounds.indexOf(x.round || 2) > -1);
          }

          return self.games();

        });


        self.toggleLeague= function(l){
          let i = self.filteredLeagues.indexOf(l);
          if( i === -1){
            self.filteredLeagues.push(l.replace(" 2", ""));
          } else {
            self.filteredLeagues.splice(i,1);  
          }
        }
        self.toggleDivision= function(d){
          console.log(d)
          let i = self.filteredDivisions.indexOf(d);
          if( i === -1){
            self.filteredDivisions.push(d);
          } else {
            self.filteredDivisions.splice(i,1);  
          }
        }
        self.toggleRound= function(r){
          let i = self.filteredRounds.indexOf(r);
          if( i === -1){
            self.filteredRounds.push(r);
          } else {
            self.filteredRounds.splice(i,1);  
          }
        }

        self.refresh=function(g){
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/api/v1/admin/unplayed/"+g.contest_id,true)
            xhr.send("");

        }

    }

    const model = new DateModel();

    $(document).ready(function(){
        ko.applyBindings(model);

        var xhr = new XMLHttpRequest();
        xhr.open("GET", "/api/v1/admin/unplayed",true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {//Call a function when the state changes.
          model.games(xhr.response);
          model.loading(false);
        }

        xhr.send('');

    });


block content
  div(class="container")
    //ko if: loading
    div(class="row col-12 justify-content-center")
      i(class="fa fa-spinner fa-spin" style="margin-top:250px;font-size:96px;color: #e67b00;")
    // /ko
    div(class="row col-12")
      div(class="btn-group-toggle" data-toggle="buttons")
        label(class="btn btn-outline-primary" data-bind="click: $root.toggleLeague.bind($data,'REBBL - Big O')" style="margin-right: 15px")
          input(type="checkbox" checked autocomplete="off")       
          span Big O
        label(class="btn btn-outline-primary" data-bind="click: $root.toggleLeague.bind($data,'REBBL - GMan')" style="margin-right: 15px")
          input(type="checkbox" checked autocomplete="off")       
          span GMan
        label(class="btn btn-outline-primary" data-bind="click: $root.toggleLeague.bind($data,'REBBL - REL')" style="margin-right: 15px")
          input(type="checkbox" checked autocomplete="off")       
          span REL
    br  
    div(class="row col-12")
      div(class="btn-group-toggle" data-toggle="buttons")
        // ko foreach: divisions
        label(class="btn btn-outline-primary" data-bind="click: $root.toggleDivision")
          input(type="checkbox" checked autocomplete="off")       
          span(data-bind="text: $data") 
        // /ko
    br
    div(class="row col-12")
      div(class="btn-group-toggle" data-toggle="buttons")
        // ko foreach: rounds
        label(class="btn btn-outline-primary" data-bind="click: $root.toggleRound")
          input(type="checkbox" checked autocomplete="off")       
          span(data-bind="text: $data") 
        // /ko        
    br
    div(class="row col-12")
      div(class="col-2") League
      div(class="col-2") Coach
      div(class="col-3") Team
      div(class="col-3") Team
      div(class="col-2") Coach
    hr
    div(data-bind="foreach: filteredGames" )
      div(class="row col-12")
        div(class="col-2")
          button(data-bind="click:$root.refresh" class="btn btn-small btn-success" style="margin:0px 10px")
            i(class="fa fa-refresh")
          span( data-bind="text: league.replace(/rebbl - /i, '') + ' ' + competition.replace(/Season 17.{1,3}Division /i,'Div ')")
        div(class="col-2" )
          a(data-bind="text: coach1, attr:{href:'/coach/'+ coach1 + '/details' }"  target="_blank" style="color:#03a9f4")
        div(class="col-3")
          //ko if: $data.link1
          a(data-bind="text: team1, attr:{href: link1}"  target="_blank")
          // /ko
          //ko ifnot: $data.link1
          span(data-bind="text: team1")
          // /ko
        div(class="col-3")
          //ko if: $data.link2
          a(data-bind="text: team2, attr:{href: link2}"  target="_blank")
          // /ko
          //ko ifnot: $data.link2
          span(data-bind="text: team2")
          // /ko
        div(class="col-2")
          a(data-bind="text: coach2, attr:{href:'/coach/'+ coach2 + '/details'}" target="_blank" style="color:#03a9f4")






