extends ../layout.pug

block head
  style.
    .btn-success, .btn-danger, .btn-secondary {transition: background-color .4s;}

block scripts
  script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
  script(src="https://cdn.rebbl.net/scripts/knockout-mapping.min.js")
  script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")
  script.
    function DivisionModel(data){
      const self = this;
      self.map = function(data){
        self.league = data.league;
        self.competition = data.competition;
        self.competition_id = data.competition_id;
        self.admin = data.admin;
      }
      self.map(data);

      ko.track(this);
    }


    function LeagueModel(data) {
        const self = this;
        self.map = function(data){
          self.data = data.map(x => new DivisionModel(x));
          self.teams = [];
          self.admins = [];
          self.loading = true;
          self.selectedDivision = null;

          self.selectedLeague = [];
          self.unplayed = [];
          self.newAdmin = "";
        }
        self.map(data);

  
        self.filteredData = function(){
          if ( self.selectedLeague){
            return self.data.filter(x => x.league.startsWith(self.selectedLeague)).sort((a,b) => a.competition>b.competition ? 1: -1);
          }

          return [];
        };

        self.leagues =  function(){
          return [...new Set(self.data.map(x => x.league))];
        }

        self.toggleLeague= async function(l){
          self.selectedLeague = l;
          let result = await fetch(`/api/v1/admin/divisions/unplayed/${self.selectedLeague}`);
          if (result.ok)
            model.unplayed =await result.json();

        }
        self.toggleDivision=async function(d){
          self.selectedDivision = d;
          let result =await fetch(`/api/v1/admin/divisions/${d.competition_id}`);
          if (result.ok)
            model.teams = await result.json();
        }

        self.setAdmin= async function(a){
          self.selectedDivision.admin = a.coach;

          let result =await fetch(`/api/v1/admin/divisions/${self.selectedDivision.competition_id}/${self.selectedDivision.admin}`,{method:"PUT"});
          if (result.ok){
              $("#dropdownAdmin").addClass("btn-success");
          } else{
              $("#dropdownAdmin").addClass("btn-success");
          }
          setTimeout(() =>  $("#dropdownAdmin").removeClass("btn-success"),1100);
        }

        self.expel= async function(d){
          let result =await fetch(`/api/v1/admin/divisions/${self.selectedDivision.competition_id}/${d.id}`,{method:"DELETE"});
          
          if (result.ok){
            let data = await result.json();
            if (data.Message === "") {
              $(".alert-success").html("Expelled successfully!");
              $(".alert-success").show();
            } else {
              $(".alert-danger").html(data.Message);
              $(".alert-danger").show();
            }
            setTimeout(() => $(".alert").hide(),3750);
          }
        }
        self.refresh=async function(g){
          let result = await fetch(`/api/v1/admin/divisions/refresh/${self.selectedDivision.league}/${self.selectedDivision.competition}`);
          if (result.ok){
            $(".alert-success").html("Refreshed!");
            $(".alert-success").show();
            setTimeout(() => $(".alert").hide(),3750);
          }
        }

        self.reload = async function(contest_id){
          let response = await fetch(`/api/v1/admin/unplayed/${contest_id}`,{method:"POST"});
          if(response.ok)
            self.unplayed.splice(self.unplayed.findIndex(x => x.contest_id === Number(contest_id)),1);
        }

        ko.track(this);
    }

    let model;
    $(document).ready(async function(){
        $('.alert').hide();

        let result = await fetch("/api/v1/admin/divisions");

        if (result.ok){
          model = new LeagueModel(await result.json());
          ko.applyBindings(model);
        }

        let admins = await fetch("/api/v1/admin/divisions/admins");
        if (admins.ok)
          model.admins = await admins.json();

    });


block content
  div(class="container")
    div(class="row col-12")
      div.mx-1
        button.btn.btn-sm.btn-secondary.dropdown-toggle(type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-bind="text:selectedLeague != '' ? selectedLeague : 'Choose League'")
        div.dropdown-menu(aria-labelledby="dropdownMenuButton" style="max-height: 400px;  overflow-y: auto")
          //ko foreach: leagues()
          a.dropdown-item(data-bind="attr:{href:'#'},text:$data,click: $root.toggleLeague.bind($data,$data)")
          // /ko
      div.mx-1
        button.btn.btn-sm.btn-secondary.dropdown-toggle(type="button" id="dropdownMenuDivision" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"  data-bind="text:selectedDivision != undefined ? selectedDivision.competition : 'Choose Division'")
        div.dropdown-menu(aria-labelledby="dropdownMenuDivision" style="max-height: 400px;  overflow-y: auto")
          //ko foreach: filteredData()
          a.dropdown-item(data-bind="attr:{href:'#'},text:competition,click: $root.toggleDivision")
          // /ko
      // ko if: selectedDivision
      div.mx-1
        button.btn.btn-sm.btn-secondary.dropdown-toggle(type="button" id="dropdownAdmin" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"  data-bind="text:selectedDivision &&  selectedDivision.admin ? selectedDivision.admin : 'Choose Admin'")
        div.dropdown-menu(aria-labelledby="dropdownAdmin" style="max-height: 400px;  overflow-y: auto")
          //ko foreach: admins
          a.dropdown-item(data-bind="attr:{href:'#', title:$data.redd},text:$data.coach,click: $root.setAdmin")
          // /ko
      // /ko
    br
    // ko if: selectedDivision
    hr
    div(class="row col-12")
      button(data-bind="click:$root.refresh" class="btn btn-small btn-success" style="margin:0px 10px")
        i(class="fa-solid fa-refresh")
      span update division for new coaches
    // /ko
    hr
    div(class="row col-12")
      div(class="col-3") Expel admin teams below
      div(class="col-3") 
    hr
    div(data-bind="foreach: teams" )
      div(class="row col-12")
        div(class="col-3")
          span(data-bind="text: team")
        div(class="col-3")
          button(data-bind="click:$root.expel" class="btn btn-small btn-success" style="margin:0px 10px")
            i(class="fa-solid fa-gavel")
          span expel
    hr
    div(class="row col-12")
      div(class="col-3") Unsynced games
      div(class="col-3") 
    hr
    div(data-bind="foreach: unplayed" )
      div(class="row col-12")
        div(class="col-1")
          button(data-bind="click:$root.reload.bind($data,contest_id)" class="btn btn-small btn-success" style="margin:0px 10px")
            i(class="fa-solid fa-repeat")
        div(class="col-6")
          span(data-bind="text: competition")
          span(data-bind="text: ` round ${round}`")
        div(class="col-3")
          span(data-bind="text: opponents[0].coach ? opponents[0].coach.name : ''")
          span &nbsp; vs &nbsp; 
          span(data-bind="text: opponents[1].coach ? opponents[1].coach.name : ''")


    div(class="alert alert-success" role="alert")
    div(class="alert alert-danger" role="alert")
      
  




