extends ../../relayout.pug


block append vars
  - var activeSubMenu = "match"
  -let options = {company:company}

block head
  - if (process.env.NODE_ENV === 'production')
    link(rel="stylesheet" href="https://cdn.rebbl.net/styles/v2/tempusdominus.min.css")
    link(rel="stylesheet" href="https://cdn.rebbl.net/styles/fontawesome.min.css")
    link(rel="stylesheet" href="https://cdn.rebbl.net/styles/solid.min.css")
  - else
    link(rel="stylesheet" href="/styles/v2/tempusdominus.min.css")
    link(rel="stylesheet" href="/styles/fontawesome.min.css")
    link(rel="stylesheet" href="/styles/solid.min.css")

block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn.rebbl.net/scripts/moment.min.js")
    script(src="https://cdn.rebbl.net/scripts/moment-timezone.min.js")
    script(src="https://cdn.rebbl.net/scripts/moment-timezone-with-data-10-year-range.min.js")
    script(src="https://cdn.rebbl.net/scripts/v2/tempusdominus.min.js")
  - else
    script(src="/scripts/moment.min.js")
    script(src="/scripts/moment-timezone.min.js")
    script(src="/scripts/moment-timezone-with-data-10-year-range.min.js")
    script(src="/scripts/v2/tempusdominus.min.js")

  - if(user)
    script.
      $(document).ready(function(){

        function formatDate(date) {
          const dateFormat = "YYYYMMDDTHHmmss[Z]";
          return date.format(dateFormat);
        }

        function calculateEndDatetime(startDatetime) {
          return formatDate(startDatetime.add(2, "h"));
        }

        function setCalendarDatetime() {
          $.each($('.calendar-add'), (idx, anchor) => {
            const $anchor = $(anchor);
            const picker = $anchor.siblings().find('.datetimepickerInput')[0];

            let timezone = "#{user.timezone}" || moment.tz.guess();
            const date =  $(picker).val()
            let matchDate = moment.tz(date, timezone).tz("UTC");

            if(date) {
              $anchor.show();
            } else {
              $anchor.hide();
            }


            //give times in UTC and let google handle the tz magic
            $anchor.attr("href", `http://www.google.com/calendar/event?action=TEMPLATE&text=${encodeURIComponent(`REBBL ${$anchor.data('team-home')} - ${$anchor.data('team-away')}`)}&dates=${formatDate(matchDate)}/${calculateEndDatetime(matchDate)}`);
          })
        }


        let timezones = $(".timezone");

        timezones.each(function(zone){
          if ($(timezones[zone]).text().length > 0)
            $(timezones[zone]).find(".time").text(moment().tz($(timezones[zone]).text()).format('YYYY-MM-DD HH:mm ZZ'));
        });

        $(".btn-date").on("click", async function(event){
          let id = event.currentTarget.getAttribute("data-contestid");
          let competitionId = event.currentTarget.getAttribute("data-competitionid");
          let clan = event.currentTarget.getAttribute("data-clan");
          let target =event.currentTarget.getAttribute("data-bs-target");

          let timezone = "#{user.timezone}" || moment.tz.guess();
          let btn = $(this);
          let date = $(target).val();

          if(date) {
            date = moment.tz(date, timezone).tz("UTC").format("YYYY-MM-DD HH:mm");
          }

          setCalendarDatetime();

          let response = await fetch(`/rebbl/match/unplayed/${id}`,{
            method:"PUT",
            headers:{'Content-Type': 'application/json',},
            body: JSON.stringify({date, clan, competitionId})
          });

          if (response.ok){
            btn.removeClass("btn-primary").addClass("btn-success");
            btn.prop("disabled",true);
            setTimeout(function(btn){
                btn.addClass("btn-secondary");
                btn.removeClass("btn-success");
            },1500,btn )
          } else {
            btn.removeClass("btn-primary").addClass("btn-danger");
            btn.prop("disabled",true);
          }
        });
        
        let timezone = "#{user.timezone}" || moment.tz.guess();  
        $(".datetimepicker").each(function() {
          let picker;
          if($(this).val())
            picker = new tempusDominus.TempusDominus(this,{localization:{format: "yyyy-MM-dd HH:mm"}, date: moment.tz(this.defaultValue,"UTC").tz(moment.tz.guess()), useCurrent:false});
          else
            picker = new tempusDominus.TempusDominus(this,{localization:{format: "yyyy-MM-dd HH:mm"}, useCurrent:false});

          const elm = this;
          const sub = picker.subscribe(tempusDominus.Namespace.events.change, (e) => {
            let btn = elm.getAttribute("data-btn");

            $(btn).removeClass("btn-secondary")
            $(btn).addClass("btn-primary");
            $(btn).removeAttr("disabled");
          }); 
        });

        $(".stream").on("click", async function(event){
          let id = event.currentTarget.getAttribute("data-contestid");
          let result = await fetch(`/api/v1/upcoming/stream/${id}`,{method:"POST"});

          if (result.ok){
            $(event.currentTarget).addClass("hidden");
            $(`#unstream-${id}`).removeClass("hidden");
          } 
        });
        $(".unstream").on("click", async  function(event){
          let id = event.currentTarget.getAttribute("data-contestid");
          let result = await fetch(`/api/v1/upcoming/unstream/${id}`,{method:"POST"});

          if (result.ok){
            $(event.currentTarget).addClass("hidden");
            $(`#stream-${id}`).removeClass("hidden");
          } 
        });

        setCalendarDatetime();
      });  
  - if (!user)      
    script.
      $(document).ready(function(){
        let timezones = $(".timezone");
        timezones.each(function(zone){
          if (zone == null) return;
          
          $(timezones[zone]).find(".time").text(moment().tz($(timezones[zone]).text()).format('YYYY-MM-DD HH:mm ZZ'));
        });

        let time = $("#matchTime").text();
        $("#matchTime").text(moment.tz(time,"UTC").tz(moment.tz.guess()).format('YYYY-MM-DD HH:mm ZZ')); 
      });  
block content
  for match in matches
    .container.h-100
      .row.justify-content-center
        .row.col-12.justify-content-center.text-center
          h2(style="margin-top:40px;margin-bottom:20px")= match.competition + " - week " + match.round
          .row.col.justify-content-center.text-center
            - if(user?.roles?.includes("streamer"))
              span Enter match date in your own local time
              .row.col.justify-content-center
                .col-xs-12.col-sm-7.col-md-6.col-lg-4
                  .input-group.datetimepicker(id=`datetimepicker-${match.contest_id}` data-td-target-input="nearest" data-td-target-toggle="nearest" data-btn=`#btn-${match.contest_id}`)
                    span.input-group-text(data-td-target=`#datetimepicker-${match.contest_id}` data-td-toggle="datetimepicker")
                      i.fa-solid.fa-calendar
                    input.datetimepickerInput.form-control.px-0.text-center(id=`datetimepickerInput-${match.contest_id}` type="text" value=(match.date ? match.date.date : null)  data-td-target=`#datetimepicker-${match.contest_id}`)
                    button.btn.btn-secondary.btn-block.btn-date( disabled data-clan=match.clan data-contestid=match.contest_id data-competitionid=match.competition_id data-bs-target=`#datetimepickerInput-${match.contest_id}` id=`btn-${match.contest_id}`) Set match date
                  a(href="#" target="_blank" data-date=(match.date ? match.date.date : null) data-team-home=match.opponents[0].team.name data-team-away=match.opponents[1].team.name class="calendar-add") Add to Google Calendar
                -if (user.twitch)                  
                  .col-xs-12.col-sm-5.col-md-2 
                    btn.hidden.btn.btn-danger.unstream(id=`unstream-${match.contest_id}` data-competitionid=match.competition_id data-clan=match.clan data-contestid=match.contest_id) unstream
                    btn.btn.btn-success.stream(id=`stream-${match.contest_id}` data-competitionid=match.competition_id data-clan=match.clan data-contestid=match.contest_id)  stream
            - if(match.date)
              p planned match start:&nbsp;
                span(id="matchTime")= match.date.date
              - if(match.date.stream)
                div(class="row col-12 justify-content-center")
                  a(href=match.date.stream.url target="_blank")
                    img(src="/images/glitch.png" style="width:36px;height:36px")
                    span= " " + match.date.stream.name 
      div(class="row justify-content-center align-items-center h-100")
        div(class="col-5 text-end")
          h3
            a(href=`/team/${match.opponents[0].team.id}`)= match.opponents[0].team.name
        div(class="col-2 text-center")
          img(src="https://cdn.rebbl.net/images/logo/logo_" + match.opponents[0].team.logo.toLowerCase() + ".png" alt="" class="TeamLabel-logo")
          span -
          img(src="https://cdn.rebbl.net/images/logo/logo_" + match.opponents[1].team.logo.toLowerCase() + ".png" alt="" class="TeamLabel-logo")
        div(class="col-5")
          h3 
            a(href=`/team/${match.opponents[1].team.id}`)= match.opponents[1].team.name
      div(class="row justify-content-center")
        div(class="col-4 text-end")= match.opponents[0].team.race
        div(class="col-2 text-center") 
          strong race
        div(class="col-4")= match.opponents[1].team.race
      div(class="row justify-content-center")
        -if (match.opponents[0].team.team)
          div(class="col-4 text-end")= match.opponents[0].team.team.nextMatchTV
        -else
          div(class="col-4 text-end")= match.opponents[0].team.value
        div(class="col-2 text-center") 
          strong team value
        -if (match.opponents[1].team.team)
          div(class="col-4")= match.opponents[1].team.team.nextMatchTV
        -else
          div(class="col-4")= match.opponents[1].team.value
      div(class="row justify-content-center")
        -if (match.opponents[0].team.team)
          div(class="col-4 text-end")= Math.floor(match.opponents[0].team.team.cash/1000) + "k"
        -else
          div(class="col-4 text-end") -
        div(class="col-2 text-center") 
          strong cash
        -if (match.opponents[1].team.team)
          div(class="col-4")= Math.floor(match.opponents[1].team.team.cash/1000) + "k"
        -else
          div(class="col-4") -
      div(class="row justify-content-center")
        div(class="col-4 text-end")= match.opponents[0].coach.name
        div(class="col-2 text-center")
          strong coach
        div(class="col-4")= match.opponents[1].coach.name
      div(class="row justify-content-center")
        div(class="col-4 text-end highlight")= "/u/" + (match.opponents[0].coach.reddit ? match.opponents[0].coach.reddit.toLowerCase() :"")
        div(class="col-2 text-center")
          strong reddit
        div(class="col-4 highlight")= "/u/" + (match.opponents[1].coach.reddit ? match.opponents[1].coach.reddit.toLowerCase() : "")
      div(class="row justify-content-center")
        div(class="col-4 text-end")= match.opponents[0].coach.discord
        div(class="col-2 text-center")
          strong discord
        div(class="col-4")= match.opponents[1].coach.discord
      div(class="row justify-content-center")
        div(class="col-4 text-end")= match.opponents[0].coach.steam
        div(class="col-2 text-center")
          strong steam
        div(class="col-4")= match.opponents[1].coach.steam
      div(class="row justify-content-center")
        div(class="col-4 timezone text-end")= match.opponents[0].coach.timezone
          div(class="time")
        div(class="col-2 text-center")
          strong timezone  
          div 
            strong current time
        div(class="col-4 timezone" )= match.opponents[1].coach.timezone
          div(class="time")

