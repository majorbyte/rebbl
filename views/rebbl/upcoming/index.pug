extends ../sublayout.pug

block scripts
  script(src="https://cdn.rebbl.net/scripts/moment.min.js")
  script(src="https://cdn.rebbl.net/scripts/moment-timezone.min.js")
  script(src="https://cdn.rebbl.net/scripts/moment-timezone-with-data-10-year-range.min.js")
  script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
  script.
    function DateModel() {
      const self = this;
      // Editable data
      self.dates = ko.observableArray([]);
      self.leagues =  ko.observableArray([])
      self.visibleLeagues =  ko.observableArray([])

      self.toggle = function(league,data,event){
        if (league === 'twitch'){
          $(event.currentTarget || event.target ).toggleClass("btn-twitch-off");
          $(event.currentTarget || event.target ).toggleClass("btn-twitch-on");
        } else if (league === 'following'){
          $(event.currentTarget || event.target ).toggleClass("btn-following-off");
          $(event.currentTarget || event.target ).toggleClass("btn-following-on");
        } else {
          $(event.currentTarget || event.target ).toggleClass("btn-secondary");
          $(event.currentTarget || event.target ).toggleClass("btn-primary");
        }
        
        let index = self.visibleLeagues.indexOf(league);
        if (index > -1){
          self.visibleLeagues.splice(index,1);
        } else {
          self.visibleLeagues.push(league);
        }
        

        self.dates().map(function(date){
          date.matches.map(function(match){
            let show = false;
            if(league ==='twitch' && self.visibleLeagues.indexOf(league)>-1){
              show = match.stream() ? self.visibleLeagues.length > 1 ? self.visibleLeagues.indexOf(match.league)>-1 : true : false;
            } else if(league ==='following' && self.visibleLeagues.indexOf(league)>-1){
              show = match.following() ? self.visibleLeagues.length > 1 ? self.visibleLeagues.indexOf(match.league)>-1 : true : false;
            } else {
              let twitch = self.visibleLeagues.indexOf('twitch')>-1;
              let following = self.visibleLeagues.indexOf('following')>-1;
              if (twitch){
                show = (self.visibleLeagues().length > 1 && match.stream()) || (self.visibleLeagues.indexOf(match.league)>-1 && match.stream());
              } else if (following){
                show = (self.visibleLeagues().length > 1 && match.following()) || (self.visibleLeagues.indexOf(match.league)>-1 && match.following());
              } else {
                show = self.visibleLeagues().length === 0 || self.visibleLeagues.indexOf(match.league)>-1;
              }
              
            }
            match.show(show);
          });
        });
      }

    }

  - if(user && user.twitch)
    script.
      DateModel.prototype.stream = async function(date){
        let result = await fetch(`/api/v1/upcoming/stream/${date.contest_id}`,{method:"POST"});

        if (result.ok){
          let data = await result.json();
          date.stream(data.stream);
          date.streaming(true);
        } else {
          btn.removeClass("btn-primary").addClass("btn-danger");
          btn.prop("disabled",true);
        }

      }

      DateModel.prototype.unstream = async function(date){
        let result = await fetch(`/api/v1/upcoming/unstream/${date.contest_id}`,{method:"POST"});

        if (result.ok){
            date.stream(null);
            date.streaming(false);
        } else {
          btn.removeClass("btn-primary").addClass("btn-danger");
          btn.prop("disabled",true);
        }
      }

  script.
    const model = new DateModel();
    $(document).ready(async function(){
        ko.applyBindings(model);

        let result = await fetch("/api/v1/upcoming");

        if(result.ok){
          let dates = await result.json();
          dates.map(function(date){
            let time = moment.tz(date.scheduledDate,"UTC").tz(moment.tz.guess());
            date.scheduledDate = time.format('YYYY-MM-DD HH:mm zz(ZZ)');
            date.shortDate = time.format('YYYY-MM-DD');
            date.shortTime = time.format('HH:mm');
            date.shortTimeTitle = time.format('zz(ZZ)');
            date.url = date.match_uuid ? "/rebbl/match/" + date.match_uuid : "/rebbl/match/unplayed/"+date.contest_id;
            date.homeTeamLogo = 'https://cdn.rebbl.net/images/logo/logo_' + date.homeTeamLogo.toLowerCase() + '.png';
            date.awayTeamLogo = 'https://cdn.rebbl.net/images/logo/logo_' + date.awayTeamLogo.toLowerCase() + '.png';
            date.show = ko.observable(true);
            date.streaming = ko.observable(date.stream ? true: false);
            date.stream = ko.observable(date.stream);
            date.following = ko.observable(false);
            if(model.leagues.indexOf(date.league) === -1) {
              model.leagues.push(date.league);
            }
          });



          result = await fetch("/api/v2/account/following");
          if(result.ok){
            let following = await result.json();
            following.map(function(date){
              let ret = {};
              if(date.date){
                let time = moment.tz(date.date.date,"UTC").tz(moment.tz.guess());
                ret.scheduledDate = time.format('YYYY-MM-DD HH:mm zz(ZZ)');
                ret.shortDate = time.format('YYYY-MM-DD');
                ret.shortTime = time.format('HH:mm');
                ret.shortTimeTitle = time.format('zz(ZZ)');
              } else {
                ret.scheduledDate = "unknown";
                ret.shortDate = "unknown";
                ret.shortTime = "unknown";
                ret.shortTimeTitle = "unknown";
              }
              ret.url = date.match_uuid ? "/rebbl/match/" + date.match_uuid : "/rebbl/match/unplayed/"+date.contest_id;
              ret.homeCoach = date.opponents[0].coach.name;
              ret.homeTeam = date.opponents[0].team.name;
              ret.homeTeamValue =  date.opponents[0].team.team.nextMatchTV;
              ret.homeTeamRace = date.opponents[0].team.race;
              ret.homeTeamLogo = 'https://cdn.rebbl.net/images/logo/logo_' + date.opponents[0].team.logo.toLowerCase() + '.png';
              ret.awayTeamLogo = 'https://cdn.rebbl.net/images/logo/logo_' + date.opponents[1].team.logo.toLowerCase() + '.png';
              ret.awayCoach= date.opponents[1].coach.name;
              ret.awayTeam= date.opponents[1].team.name;
              ret.awayTeamValue=  date.opponents[1].team.team.nextMatchTV;
              ret.awayTeamRace= date.opponents[1].team.race;
              ret.show = ko.observable(true);
              ret.streaming = ko.observable(date.stream ? true: false);
              ret.stream = ko.observable(date.stream);
              ret.following = ko.observable(true);
              ret.league= date.league;
              ret.competition= date.competition;
              if(model.leagues.indexOf(date.league) === -1) {
                model.leagues.push(date.league);
              }
              dates.push(ret);
            });            }

          dates = dates.sort(function(a,b){return a.scheduledDate > b.scheduledDate ? 1 : -1})
          dates = _groupBy(dates,"shortDate")

          let r = []
          for(var prop in dates){
            r.push({date: prop, matches:dates[prop]});
          }

          model.dates(r);
        }


    });

    const _groupBy = function(xs, key) {
      return xs.reduce(function(rv, x) {
        (rv[x[key]] = rv[x[key]] || []).push(x);
        return rv;
      }, {});
    };
    
block content
  style .btn-following-on {background-color:#4F4F4F}
  div(class="container")
    div(class="row justify-content-center")
      .d-grid.gap-2.d-md-block
        // ko foreach: leagues
        button(class="btn btn-secondary btn-sm" data-bind="text: $data, click:$parent.toggle.bind(this, $data)" style="margin-right:5px") 
        // /ko
        button(class="btn btn-twitch-off" data-bind="click:toggle.bind(this,'twitch')" style="margin-right:5px;padding:0px 1rem")
          // ko if: visibleLeagues.indexOf('twitch') > -1
          img(src="https://cdn.rebbl.net/images/glitch_white.png" style="height:36px")
          // /ko         
          // ko if: visibleLeagues.indexOf('twitch') === -1
          img(src="https://cdn.rebbl.net/images/glitch.png" style="height:36px")
          // /ko         
        button(class="btn btn-following-off" data-bind="click:toggle.bind(this,'following')" style="margin-right:5px;padding:0px 1rem")
          // ko if: visibleLeagues.indexOf('following') > -1
          img(src="https://cdn.rebbl.net/images/small-fist.png" style="height:36px")
          // /ko         
          // ko if: visibleLeagues.indexOf('following') === -1
          img(src="https://cdn.rebbl.net/images/small-fist-gray.png" style="height:36px")
          // /ko         

    // ko foreach: dates
    // ko if: matches.filter(function(m){return m.show()}).length > 0
    div(class="row")
      div(class="col-10 offset-sm-1 ")
        h2(data-bind="text: date")
        // ko foreach: matches
        // ko if: show
        div(class="d-flex")  
          div(data-bind="text:shortTime, attr: {title: shortTimeTitle}")
          span :&nbsp;
          div() 
            span(data-bind="text: league") 
            span &nbsp;
            i(data-bind="text: competition")
          div(class="ps-1") 
            //ko if: streaming && stream()
            a(data-bind="attr: {href: stream().url, title: stream().name}" target="_blank")
              img(src="/images/glitch.png" style="width:24px;height:24px")
            // /ko
            //ko ifnot: streaming
            div(style="min-width:24px") &nbsp;
            // /ko
        .row.col-12
          a(data-bind="attr: { href: url}" class=" MatchRow-contentWrapper MatchRow-contentWrapper--hover")
            .row.col-12
              .col-12.row.g-0
                .col-5
                  .row.col.g-0(style="padding:unset")
                    div(style="text-align: right;padding-right:5px;")
                      img.pull-right(data-bind="attr: {src: homeTeamLogo}" alt="" class="TeamLabel-logo" )
                      div(data-bind="text: homeTeam" style="font-size:1.2em")
                      div(class="TeamLabel-coach " data-bind="text: homeCoach + ' - ' +  homeTeamValue + ' ' + homeTeamRace " style="margin-top:-7px" )
                .col-1.align-center
                      span(class="MatchStatus-score") &nbsp;
                      span(class="MatchStatus-score") -
                      span(class="MatchStatus-score") &nbsp;
                .col-5
                  .row.col.g-0(style="padding:unset")
                    div(style="text-align:left")
                      img.pull-left(data-bind="attr: {src: awayTeamLogo}" alt="" class="TeamLabel-logo" style="padding-right:5px")
                      div(data-bind="text: awayTeam"  style="font-size:1.2em")
                      div(class="TeamLabel-coach " data-bind="text: awayCoach + ' - ' + awayTeamValue + ' ' + awayTeamRace" style="margin-top:-7px" )
                -if(user && user.twitch)
                  div(class="col-1")
                    <!-- ko if: streaming() && (stream() && "#{user.reddit}" === stream().name) -->
                    btn(class="btn btn-danger pull-right" data-bind="click: $root.unstream") unstream
                    // /ko
                    //ko ifnot: streaming
                    btn(class="btn btn-success pull-right" data-bind="click: $root.stream") stream
                    // /ko
        // /ko
        // /ko
    // /ko
    // /ko    