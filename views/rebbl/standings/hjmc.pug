extends ../../no-cache-sub-layout.pug
include ../../nav-link

block vars
 - let options = {company: company}
  


block navigation
  nav(class="navbar navbar-expand-md fixed-top navbar-dark bg-dark" style="min-height:80px;top:80px;justify-content:unset")
    button(class="navbar-toggler" type="button" data-toggle="collapse" data-target="#rebblSubNav" aria-controls="rebblSubNav" aria-expanded="false" aria-label="Toggle navigation")
      span(class="navbar-toggler-icon")
    a(class="navbar-brand d-md-none d-lg-none d-xl-none " href="#" data-bind="text: 'STANDINGS' + league" )
    div(class="collapse navbar-collapse" id="rebblSubNav")
      ul(class="navbar-nav mr-auto")
          li( class="nav-item active")
            div(class="nav-link") DISPLAY 
          li( class="nav-item dropdown")
            a(class="nav-link dropdown-toggle" href="#" id="dropdownSeason" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") SEASON
            div(class="dropdown-menu" aria-labelledby="dropdownSeason")
              //ko foreach: seasons.slice(0).reverse()
              a(class="dropdown-item " data-bind="text:$data,click:$root.loadSeason.bind($root)")
              // /ko

block content
  div(class=`container`)
    // ko foreach: {data: Object.keys(standings).sort($root.collator.compare)}
    // ko with: $root.standings[$data] 
    div(class="row col-12" )
      h2
        i(data-bind="id:$data[0].competition"  style="padding-top:180px;margin-top:-180px")
        a( data-bind="text:$data[0].competition,attr:{href:$root.competitionUrl($data)}" class="highlight")
    div(class="season-table")  
      div(class="row col-12 " style="border-bottom: 3px solid #bdbcbccf;")
        div(class="row col-5" style="font-size:1.25em")
          div(class="col-1" ) #
          div(class="col-4" ) Coach
          div(class="col-7" ) Team
        div(class="col-1" style="font-size:1.25em") Race
        div(class="row col-6" style="font-size:1em")
          div(class="col" ) Pts.
          div(class="col" title="Big Guy Points: Points - points from win/draw" ) BGP
          div(class="col" title="# of Big Guys killed: 5pts") Kill  
          div(class="col" title="Big Guy cas: 2pts") CAS 
          div(class="col" title="Big Guys td: 3pts") TD 
          div(class="col" title="Big Guys pass: 1pt") Pass 
          div(class="col" title="Big Guys interception: 1pt") Int 
          div(class="col" title="Team win: 3pts") W  
          div(class="col" title="Team draw: 1pt") D  
      //ko foreach: $data
      div(class="row col-12 season-table-row")
        div(class="row col-5")
          div(class="col-1" data-bind="text:position")
          div(class="col-4" style=";overflow:hidden") 
            a(data-bind="text: name, attr:{href:`/coach/${id}`}")
            // ko if: $root.isDonator($data.name)
            | &nbsp; &nbsp; 
            img(src="/images/gold.png" style="width:25px;float:right;margin-top: 2px;" title="donator")
            // /ko
            // ko with: $root.getTrophy($data.name)
            // ko if:$data
            | &nbsp; &nbsp; 
            img(data-bind="attr:{src:`https://cdn2.rebbl.net/${$data.filename}`, title:$data.title, 'data-date':$data.date}, click:$root.showTrophy"  style="height:25px;float:right;margin-top: 2px;cursor:pointer" class="trophy-toggle" data-target="#trophy" )
            // /ko
            // /ko
          div(class="col-7" style=";overflow:hidden") 
            a(data-bind="text: teamName(),attr:{href:`/team/${teamId}`}")
        div(class="col-1" style=";overflow:hidden" data-bind="text:race.replace(/([A-Z])/g, ' $1').replace(/^./, function(str){ return str.toUpperCase(); })")
        div(class="row col-6" )
          div(class="col" data-bind="text:points")
          div(class="col" data-bind="text:points - 3*win - draw")
          div(class="col" data-bind="text:kills")
          div(class="col" data-bind="text:casualties")
          div(class="col" data-bind="text:touchdowns")
          div(class="col" data-bind="text:completions")
          div(class="col" data-bind="text:interceptions")


          div(class="col" data-bind="text:win")
          div(class="col" data-bind="text:draw")
      // ko if: $index()+1 === $root.tickets[$parentContext.$index()]
      div(class="row col-12 season-table-row")
        div(class="col-1 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
        div(class="col-6 Standings-divider--flex" )
          span(class="Standings-dividerText" style="font-size:1.5em")  &nbsp; &nbsp;Playoffs Cutoff &nbsp; &nbsp;
        div(class="col-5 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
      // /ko
      // /ko
    // /ko
    // /ko
  div(class="modal" tabindex="-1" role="dialog" id=`trophy`)
    div(class="modal-dialog modal-lg modal-dialog-centered" role="document")
      div(class="modal-content")
        div(class="modal-header")
          h5(class="modal-title" id="modal-title")
        div(class="modal-body")
          img(src="" alt="" style="display:block;margin-left:auto;margin-right:auto" id="modal-image")
        div(class="modal-footer")
          button( type="button" class="btn btn-secondary" data-dismiss="modal") Close  



block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn2.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.

    // this allows if to iterate of object properties.
    ko.bindingHandlers.foreachprop = {
        transformObject: function (obj) {
            var properties = [];
            ko.utils.objectForEach(obj, function (key, value) {
                properties.push({ key: key, value: value });
            });
            properties = properties.sort(function(a,b){return a.key > b.key ? 1 : -1;})
            return properties;
        },
        init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var properties = ko.pureComputed(function () {
            var obj = ko.utils.unwrapObservable(valueAccessor());
            return ko.bindingHandlers.foreachprop.transformObject(obj);
            });
            ko.applyBindingsToNode(element, { foreach: properties }, bindingContext);
            return { controlsDescendantBindings: true };
        }
    };

    class StandingsModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }
      map(data){
        if(data){
          delete data._id;
          Object.assign(this, data);
        }
      }

      teamColor(){
        if (/\[colour=/i.test(this.team)){
          if (/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i.test(this.team)) {
            return "#"+this.team.match(/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i)[1];
          }
          return "#000000";
        }

        return "inherit";      }

      teamName(){
        if (/\[colour=/i.test(this.team)){
            return this.team.replace(/\[colour=.*]/i,'')
        }
        return this.team;
      }
    }


    class ViewModel{
      constructor(data){
        this.donators = [];
        this.league = "";
        this.season = "";
        this.seasons = [];
        this.standings = {};
        this.tickets = [];
        this.trophies =[];

        this.collator = new Intl.Collator(undefined, {numeric: true, sensitivity: "base"});
        ko.track(this);
      }

      getTrophy(coach){
        let t = this.trophies.find(x => x.coach == coach);
        if(t && t.trophies)return t.trophies.find(t => t.display);
        return undefined;
      }

      isDonator(coach){
        return this.donators.indexOf(coach)>-1;
      }

      competitionUrl(comp){
        return `/rebbl/${this.league}/${comp[0].competition}`;
      };
      loadSeason(season){
        if (season) model.season = season;
        this.standings={};
        this.loadTickets();

        let xhr = new XMLHttpRequest();

        xhr.open("GET", `/api/v2/standings/${this.league}/${this.season}`  ,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {
          let data = xhr.response.map(x => new StandingsModel(x));
          data = this._groupBy(data,"competition")

          this.standings=data;
        }.bind(this);
        xhr.send();
      }

      loadTickets(){
        let xhr = new XMLHttpRequest();

        xhr.open("GET", `/api/v2/standings/${this.league}/${this.season}/tickets`,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {
          if (xhr.response) this.tickets = xhr.response.cutoff;
          else this.tickets = [];
        }.bind(this);

        xhr.send();
      }

      loadSeasons(){
        let xhr = new XMLHttpRequest();

        xhr.open("GET", `/api/v2/league/${this.league}/seasons`  ,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {
          let seasons = xhr.response.sort(this.collator.compare);

          this.seasons = seasons
          this.season = seasons[seasons.length-1];
          this.loadSeason();
          this.loadTrophies();
          this.loadDonators();
        }.bind(this);
        xhr.send();
      }

      loadTrophies(){
        let xhr = new XMLHttpRequest();

        xhr.open("GET", `/api/v2/trophies/${this.league}/${this.season}`,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {
          if (xhr.response) this.trophies = xhr.response;
          else this.trophies = [];
        }.bind(this);

        xhr.send();
      }

      loadDonators(){
        let xhr = new XMLHttpRequest();

        xhr.open("GET", `/api/v2/trophies/${this.league}/${this.season}/donations`,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {
          if (xhr.response) this.donators = xhr.response;
          else this.donators = [];
        }.bind(this);

        xhr.send();
      }

      showTrophy(e){
        $('#modal-title').text(e.title + (e.date.length > 0 ? " - " + e.date : "") );
        $('#modal-image').attr('src',`https://cdn2.rebbl.net/${e.filename}`);
        $('#trophy').modal();
      };

      
      _groupBy(xs, key) {
        return xs.reduce(function(rv, x) {
          (rv[x[key]] = rv[x[key]] || []).push(x);
          return rv;
        }, {});
      };
    }

    let model = new ViewModel({});

    $(document).ready(function(){
      let path = window.location.pathname.split('/');
      model.league = path[path.length-1];
      ko.applyBindings(model);
      model.loadSeasons();
    });
    
