extends ../../no-cache-sub-relayout.pug
include ../../nav-link

block vars
 - let options = {company: company}

block head
  style.
    h2{margin-top:0px;margin-bottom:0px;margin-right:15px}

block navigation
  li.nav-item.dropdown.mr-3
    a#navbarSeason.nav-link.text-light.dropdown-toggle(alt='' role='button' data-toggle='dropdown')
      | Season
    div
      .dropdown-menu.bg-dark(aria-labelledby='navbarSeason')
        //ko foreach: seasons.slice(0).reverse()
        a.dropdown-item.text-light(data-bind="text:$data,click:$root.loadSeason.bind($root)")
        // /ko

block content
  div(class=`container`)
    // ko foreach: {data: Object.keys(standings).sort($root.collator.compare)}
    // ko with: $root.standings[$data] 
    div
      h2(data-bind="attr:{id:$data[0].competition}")
        a(data-bind="text:$data[0].competition,attr:{href:$root.competitionUrl($data)}" class="highlight")
      //ko if:$root.getAdmin($data[0].competitionId ? $data[0].competitionId:  0) !== ""
      span division admin:&nbsp;
      a(data-bind="text:$root.getAdmin($data[0].competitionId ? $data[0].competitionId:  0),attr:{href:$root.adminUrl($data[0].competitionId ? $data[0].competitionId : 0)}" class="highlight")
      // /ko
    div(class="season-table" style="margin-bottom:40px;")  
      div(class="row" style="border-bottom: 3px solid #bdbcbccf;")
        div(class="col-8 col-md-6" style="font-size:1.25em")
          div(class="row")
            div(class="col-1" ) #
            div(class="col" ) Coach
            div(class="col" ) Team
        div(class="col-2 d-none d-md-block" style="font-size:1.25em") Race
        div(class="col-4" style="font-size:1.25em")
          div(class="row")
            div(class="col-4 col-md-2" ) Pts.
            div(class="col-2 d-none d-md-block") W  
            div(class="col-2 d-none d-md-block") D  
            div(class="col-2 d-none d-md-block") L
            div(class="col-4 col-md-2") P
            div(class="col-4 col-md-2 text-right") Î”TD
      //ko foreach: $data
      div(class="row season-table-row")
        div(class="col-8 col-md-6")
          div(class="row")
            // ko if: position > 0 
            div(class="col-1" data-bind="text:position")
            // /ko
            // ko if: position === 0 
            div(class="col-1")
              // ko if: acceptedTicket
              i(class="fa fa-thumbs-o-up" title="ticket accepted")
              // /ko
              // ko if: !acceptedTicket
              i(class="fa fa-ticket" title="go accept your ticket!")
              // /ko
            // /ko
            div(class="col" style=";overflow:hidden") 
              a(data-bind="text: name, attr:{href:`/coach/${id}`}")
              // ko if: $root.isDonator($data.name)
              | &nbsp; &nbsp; 
              img(src="/images/gold.png" style="width:25px;float:right;margin-top: 2px;" title="donator")
              // /ko
              // ko with: $root.getTrophy($data.name)
              // ko if:$data
              | &nbsp; &nbsp; 
              img(data-bind="attr:{src:`https://cdn2.rebbl.net/${$data.filename}`, title:$data.title, 'data-date':$data.date}, click:$root.showTrophy"  style="height:25px;float:right;margin-top: 2px;cursor:pointer" class="trophy-toggle" data-target="#trophy" )
              // /ko
              // /ko
            div(class="col" style=";overflow:hidden") 
              a(data-bind="text: teamName(),attr:{href:`/team/${teamId}`}")
        div(class="col-2 d-none d-md-block" style=";overflow:hidden" data-bind="text:race.replace(/([A-Z])/g, ' $1').replace(/^./, function(str){ return str.toUpperCase(); })")
        div(class="col-4" )
          div(class="row")
            div(class="col-4 col-md-2" data-bind="text:points")
            div(class="col-2 d-none d-md-block" data-bind="text:win")
            div(class="col-2 d-none d-md-block" data-bind="text:draw")
            div(class="col-2 d-none d-md-block" data-bind="text:loss")
            div(class="col-4 col-md-2" data-bind="text:games")
            div(class="col-4 col-md-2 text-right" data-bind="text:tddiff")
      // ko if: $index()+1 === $root.tickets[$parentContext.$index()]
      div(class="row col-12 season-table-row" style="padding:0.5em 0")
        div(class="col-1 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
        div(class="col-6 Standings-divider--flex" )
          span(class="Standings-dividerText" style="font-size:1em")  &nbsp; &nbsp;Playoffs Cutoff &nbsp; &nbsp;
        div(class="col-5 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
      // /ko
      // ko if: $index()+1 === $root.challenger[$parentContext.$index()]
      div(class="row col-12 season-table-row" style="padding:0.5em 0")
        div(class="col-1 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
        div(class="col-6 Standings-divider--flex" )
          span(class="Standings-dividerText" style="font-size:1em")  &nbsp; &nbsp;Challenger Cup Cutoff &nbsp; &nbsp;
        div(class="col-5 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
      // /ko
      // /ko
    // /ko
    // /ko
  div(class="modal" tabindex="-1" role="dialog" id=`trophy`)
    div(class="modal-dialog modal-lg modal-dialog-centered" role="document")
      div(class="modal-content")
        div(class="modal-header")
          h5(class="modal-title" id="modal-title")
        div(class="modal-body")
          img(src="" alt="" style="display:block;margin-left:auto;margin-right:auto" id="modal-image")
        div(class="modal-footer")
          button( type="button" class="btn btn-secondary" data-dismiss="modal") Close  



block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn2.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.

    // this allows if to iterate of object properties.
    ko.bindingHandlers.foreachprop = {
        transformObject: function (obj) {
            var properties = [];
            ko.utils.objectForEach(obj, function (key, value) {
                properties.push({ key: key, value: value });
            });
            properties = properties.sort(function(a,b){return a.key > b.key ? 1 : -1;})
            return properties;
        },
        init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var properties = ko.pureComputed(function () {
            var obj = ko.utils.unwrapObservable(valueAccessor());
            return ko.bindingHandlers.foreachprop.transformObject(obj);
            });
            ko.applyBindingsToNode(element, { foreach: properties }, bindingContext);
            return { controlsDescendantBindings: true };
        }
    };

    class StandingsModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }
      map(data){
        if(data){
          delete data._id;
          Object.assign(this, data);
        }
      }

      teamColor(){
        if (/\[colour=/i.test(this.team)){
          if (/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i.test(this.team)) {
            return "#"+this.team.match(/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i)[1];
          }
          return "#000000";
        }

        return "inherit";      }

      teamName(){
        if (/\[colour=/i.test(this.team)){
            return this.team.replace(/\[colour=.*]/i,'')
        }
        return this.team;
      }
    }


    class ViewModel{
      constructor(data){
        this.donators = [];
        this.league = "";
        this.season = "";
        this.seasons = [];
        this.standings = {};
        this.tickets = [];
        this.admins = [];
        this.challenger =[];
        this.trophies =[];
        this.me = {};

        this.collator = new Intl.Collator(undefined, {numeric: true, sensitivity: "base", ignorePunctuation:true});
        ko.track(this);
      }

      getTrophy(coach){
        let t = this.trophies.find(x => x.coach == coach);
        if(t && t.trophies)return t.trophies.find(t => t.display);
        return undefined;
      }

      isDonator(coach){
        return this.donators.indexOf(coach)>-1;
      }

      competitionUrl(comp){
        return `/!{company}/${this.league}/${encodeURIComponent(comp[0].competitionUrl || comp[0].competition)}`;
      };

      adminUrl(competitionId){
        const admin = this.admins.find(a => a.competition_id === competitionId);
        if (admin)
          return `/coach/${encodeURIComponent(admin.admin)}`;

        return "";
      };

      getAdmin(competitionId){
        const admin = this.admins.find(a => a.competition_id === competitionId);
        return admin ? admin.admin : "";
      }

      async loadSeason(season){
        if (season) model.season = season;

        this.standings={};
        this.loadTickets();
        this.loadAdmins();

        let response = await fetch(`/api/v2/standings/${this.league}/${this.season}`);
        if (response.ok){
          let data  = await response.json();
          data = data.map(x => new StandingsModel(x));
          data = this._groupBy(data,"competition");


          this.standings=data;
        }        
      }

      async loadAdmins(){
        let response = await fetch(`/api/v2/standings/${this.league}/${this.season}/admins`);
        if (response.ok){
          this.admins = await response.json();
        } else {
          this.admins = [];
        }
      }

      async loadTickets(){
        let response = await fetch(`/api/v2/standings/${this.league}/${this.season}/tickets`);
        if (response.ok){
          let data = await response.json()
          this.challenger = data.challenger || [];
          this.tickets = data.cutoff;
        } else {
          this.tickets = [];
          this.challenger = [];
        }
      }

      async loadSeasons(){
        let response = await fetch(`/api/v2/league/${this.league}/seasons`);
        if (response.ok){
          let seasons =  await response.json();
          this.seasons = seasons.sort(this.collator.compare)
          this.season = seasons[seasons.length-1];
          await Promise.all([
            this.loadSeason(),
            this.loadTrophies(),
            this.loadDonators(),
          ])
          this.loadMe();
        }
      }

      async loadTrophies(){
        let response = await fetch(`/api/v2/trophies/${this.league}/${this.season}`);
        if (response.ok){
          this.trophies = await response.json();
        }
      }

      async loadDonators(){
        let response = await fetch(`/api/v2/trophies/${this.league}/${this.season}/donations`);
        if (response.ok){
          this.donators = await response.json();
        }
      }

      async loadMe(){
        let division = "";
        if (window.location.hash !== ""){
          division = decodeURI(window.location.hash.replace("#",""));
        } else {
          const response = await fetch("/api/v2/account/me");

          if (response.ok) {
            this.me = await response.json();
            if (!this.me.league.startsWith(decodeURI(this.league))) return;
            division = this.me.division;
          }
        }
        const el = document.getElementById(division);
        const y = el.getBoundingClientRect().top + window.pageYOffset -70 ;
        window.scrollTo({top: y});

      }

      showTrophy(e){
        $('#modal-title').text(e.title + (e.date.length > 0 ? " - " + e.date : "") );
        $('#modal-image').attr('src',`https://cdn2.rebbl.net/${e.filename}`);
        $('#trophy').modal();
      };

      
      _groupBy(xs, key) {
        return xs.reduce(function(rv, x) {
          (rv[x[key]] = rv[x[key]] || []).push(x);
          return rv;
        }, {});
      };
    }

    let model = new ViewModel({});

    $(document).ready(function(){
      let path = window.location.pathname.split('/');
      model.league = path[path.length-1];
      ko.applyBindings(model);
      model.loadSeasons();
    });
    
