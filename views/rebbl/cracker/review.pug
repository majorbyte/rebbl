extends ../../no-cache-sub-layout.pug
include ../../nav-link

block vars
  - let options = {company:"rebbl"}


block content          
  .container
    // ko if: newTeam !== null && currentTeam !== null
    .row.col-12
      // ko template: { name: 'teamTemplate', data: currentTeam, as:'team' }
      // /ko
      // ko template: { name: 'teamTemplate', data: newTeam, as:'team'   }
      // /ko
    .row.col-12
      h2
        img(src="https://cdn.rebbl.net/images/skills/CardSet.png") 
        | &nbsp; Available Cards
      // ko foreach: cards
      .row.col-12(data-bind="css:$data.highlight ? 'highlight': ''")
        .col-4(data-bind="click:$root.showDescription.bind($data,$root) "  alt=""  data-bs-toggle="modal" data-bs-target="#skill-dialog")
          img(data-bind="{attr:{src:`/images/${$data.rarity}.png`}}" height="25px" style="margin-right:7px")
          span(data-bind="text:$data.name")
        .col
          // ko if: $data.built_in_skill.length > 1
          img(data-bind="{attr:{src:$root.getSkillImage($data.built_in_skill)}}" height="25px" style="border-radius: 5px;")
          // /ko
          // ko if: $data.built_in_skill === "-"
          // ko foreach: $root.getSkills($data.notes)
          img(data-bind="{attr:{src:$root.getSkillImage($data)}}" height="25px" style="border-radius: 5px;")
          // /ko
          // /ko
        .col
          span(data-bind="text:$data.card_type")
        .col
          span(data-bind="text:$data.klass")
        .col
          span(data-bind="text:$root.useCount($data.cardId)")   
      // /ko
    // /ko
    
  div(class="modal" tabindex="-1" role="dialog" id="skill-dialog")
    div(class="modal-dialog modal-lg modal-dialog-centered" role="document")
      div(class="modal-content")
        div(class="modal-header")
          h5(class="modal-title" data-bind="text: activeCard.name")
        div(class="modal-body")
          p(data-bind="text:activeCard.description")
        div(class="modal-footer")
          button( type="button" class="btn btn-secondary" data-bs-dismiss="modal") Close

  script(type="text/html" id="teamTemplate")
    .col-6
      h1(data-bind="text:team.name")
      //ko foreach: roster
      .row.col-12(data-bind="{event:{mouseover:$root.highlightCards.bind(model,$data), mouseout:$root.disableHighlight.bind(model)}}")
        .col(data-bind="text:$data.name")
        .col(data-bind="text:$root.playerType($data.type)")
      // /ko



block head
  link(rel="stylesheet" href="/styles/v2/bootstrap-select.css")
  style.
    .highlight{background-color: #3a2f99;}

block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")
    script(src="/scripts/bootstrap-select.min.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")
    script(src="/scripts/bootstrap-select.min.js")

  script.
    class Card{
      constructor(card){
        Object.assign(this, card);
        this.highlight=false;
        ko.track(this);
      }
    }

    class ViewModel{
      constructor(){
        this.newTeam = null;
        this.currentTeam = null;
        this.reviewId = "";
        this.activeCard={};
        this.cards =[];
        this.error = null
        ko.track(this);
      }

      map(data){
        this.reviewId = data._id;
        this.cards = data.cards.map(x => new Card(x));
        this.newTeam = data.newTeam;
        this.currentTeam = data.currentTeam;
      }

      async loadReview(){
        let response = await fetch(`/api/v2/cracker/review`);
        if (response.ok){

          try{
            this.map(await response.json());
          }
          catch(e){
            this.error = "Currently no reviews available for you.";
          }
        }
      }

      highlightCards(player){
        this.cards.map(x => x.highlight = player.selectedCards && player.selectedCards.includes(x.cardId) );
      }
      disableHighlight(){
        this.cards.map(x => x.highlight = false);
      }

      playerType(type){
        let t = type.split("_");
        t.splice(0,1);
        return t.join(" ");
      }

      _loadCards(cards){
        let rarity = ["Common","Rare", "Epic", "Legendary", "Unique"];
        cards.map(x => x.r = rarity.indexOf(x.rarity));

        cards = cards.sort((a,b) => {
          if (a.card_type > b.card_type) return 1;
          if (a.card_type < b.card_type) return -1;

          if (a.r > b.r) return -1;
          if (a.r < b.r) return 1;

          if (a.name > b.name) return 1;
          if (a.name < b.name) return -1;

          return 0;
        });
        this.cards = cards;        
      }
      showDescription(e,data){
        e.activeCard = data;
      };
      getSkillImage(skill){
          switch (skill){
            case "MA+":
            case "+MA":
              return `https://cdn.rebbl.net/images/skills/IncreaseMovement.png`;
            case "+AG":
            case "AG+":
              return `https://cdn.rebbl.net/images/skills/IncreaseAgility.png`;
            case "ST+":
            case "+ST":
              return `https://cdn.rebbl.net/images/skills/IncreaseStrength.png`;
            case "AV+":
            case "+AV":
              return `https://cdn.rebbl.net/images/skills/IncreaseArmour.png`;
            default:
              if (skill === "Sidestep") skill = "Side Step";
              return `https://cdn.rebbl.net/images/skills/${skill.replace(' ','').replace('-','')}.png`;
          }
      }

     
      useCount(id){
        if (!this.newTeam) return 0;

        let count = this.newTeam.roster.filter(x => x.selectedCards.includes(id)).length;
        return count;
      }

      getSkills(list){
        if (list.length === 0) return [];
        list = list.replace(" and ", ", ").replace("Sidestep", "Side Step");
        return list.split(", ");
      }
      
    }
    
    //ko.options.deferUpdates = true;
    let model = new ViewModel();

    $(document).ready(function(){
      ko.applyBindings(model);
      model.loadReview();
    });
    
