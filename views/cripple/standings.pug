extends ../layout.pug
block vars
  - let options = {active: league, title: "REBBL SEASON 17"}



block append scripts
  link(rel="stylesheet" href="https://cdn.rebbl.net/styles/v2/odometer-theme-car.css")
  script(src="https://cdn.rebbl.net/scripts/odometer.js")
  script(src="/scripts/socket.io.js")
  style.
    .odometer {font-size: 100px;}
    .switch input {display:none;}
    .switch {display:inline-block;width:60px;height:30px;margin:8px;transform:translateY(50%);position:relative;}
    .slider {position:absolute;top:0;bottom:0;left:0;right:0;border-radius:30px;box-shadow:0 0 0 2px #777, 0 0 4px #777;cursor:pointer;border:4px solid transparent;overflow:hidden;transition:.4s;}
    .slider:before {position:absolute;content:"";width:100%;height:100%;background:#777;border-radius:30px;transform:translateX(-30px);transition:.4s;}
    input:checked + .slider:before {transform:translateX(30px);background:limeGreen;}
    input:checked + .slider {box-shadow:0 0 0 2px limeGreen,0 0 2px limeGreen;}
    .unqualified{opacity:0.55}

  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.
    function CoachModel(data){
      this.map = (data) => {
        if(data){
          this.id = data.id;
          this.name = data.name;
        }
      };
      this.map(data);
      ko.track(this);
    }

    function TeamModel(data){
      this.map = (data) => {
          if (data) {
            this.id = data.id;
            this.created = data.created;
            this.datelastmatch = data.datelastmatch;
            this.name = data.name;
            this.idcoach = data.idcoach;
            this.idraces = data.idraces;
            this.logo = data.logo;
            this.teamcolor = data.teamcolor;
            this.leitmotiv = data.leitmotiv;
            this.value = data.value;
            this.popularity = data.popularity;
            this.cash = data.cash;
            this.cheerleaders = data.cheerleaders;
            this.balms = data.balms;
            this.apothecary = data.apothecary;
            this.rerolls = data.rerolls;
            this.assistantcoaches = data.assistantcoaches;
            this.nbplayers = data.nbplayers;
            this.stadiumname = data.stadiumname;
            this.stadiumlevel = data.stadiumlevel;
            this.stadiumtype = data.stadiumtype;
          }
      };

      this.races = [
        {id:13,name:"Amazon"}
        ,{id:24,name:"Bretonnian"}
        ,{id:8,name:"Chaos"}
        ,{id:21,name:"Chaos Dwarf"}
        ,{id:9,name:"Dark Elf"}
        ,{id:2,name:"Dwarf"}
        ,{id:14,name:"Elven Union"}
        ,{id:6,name:"Goblin"}
        ,{id:11,name:"Halfling"}
        ,{id:15,name:"High Elf"}
        ,{id:1,name:"Human"}
        ,{id:16,name:"Khemri"}
        ,{id:25,name:"Kislev"}
        ,{id:5,name:"Lizardman"}
        ,{id:17,name:"Necromantic"}
        ,{id:12,name:"Norse"}
        ,{id:18,name:"Nurgle"}
        ,{id:4,name:"Orc"}
        ,{id:19,name:"Ogre"}
        ,{id:3,name:"Skaven"}
        ,{id:10,name:"Undead"}
        ,{id:22,name:"Underworld Denizens"}
        ,{id:20,name:"Vampire"}
        ,{id:7,name:"Wood Elf"}
      ];

      this.teamRace = function(){
        const id = this.idraces;
        const race = this.races.find(r => r.id ===id );
        return race ? race.name : id;
      }

      this.teamColor = function(){
        if (/\[colour=/i.test(this.name)){
          if (/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i.test(this.name)) {
            return "#"+this.name.match(/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i)[1];
          }
          return "#000000";
        }

        return "inherit";
      }

      this.teamName = function(){
        if (/\[colour=/i.test(this.name)){
            return this.name.replace(/\[colour=.*]/i,'')
        }
        return this.name;
      }

      this.map(data);
      ko.track(this);
    }
    function ScoreModel(data){
      this.map = (data) => {
        if (data) {
          this.competition = data.competition;	
          this.teamId = data.teamId;	
          this.draws = data.draws;	
          this.gp = data.gp;	
          this.limFactor = data.limFactor;	
          this.score = data.score;	
          this.winPercentage = data.winPercentage;	
          this.wins = data.wins;	
          this.team = new TeamModel(data.team);
          this.coach = new CoachModel(data.coach);
        }
      };
      this.map(data);
      ko.track(this); 
    }

    function StandingsModel(data){
      var self = this;
      this.scores = ko.observableArray();
      this.all = ko.observableArray();
      this.filtered =ko.observableArray();
      this.complete = ko.observable(false);
      
      this.load = async() => {
        if (this.complete() && this.all().length > 0){
          this.scores(this.all());
          return;
        } 
        if (!this.complete() && this.filtered().length > 0){
          this.scores(this.filtered());
          return;
        } 

        const response = await fetch(`/api/v1/cripple/standings${this.complete() ? '/complete':''}`);

        if (response.ok){
          if (this.complete()){
            ko.mapping.fromJS(await response.json(),mapping,model.all);
            model.scores(model.all());
          } else {
            ko.mapping.fromJS(await response.json(),mapping,model.filtered);
            model.scores(model.filtered());
          }
        } else {
            model.isError(true);
            model.error(await response.text());
        }
      }

      this.toggle = () => {
        this.complete(!this.complete());
        model.scores([]);
        this.load();
      }
    }

    var mapping = {
      '': {
          create: function(options) {
              return new ScoreModel(options.data);
          }
      }
    }

    let model = new StandingsModel(); 
    ko.applyBindings(model);
    $(document).ready(function(){

      model.load();

      var socket = io.connect('/');
      socket.on('cripple', function(data) {update(data)});

      //event emmited when receiving message 
      function update(data) {
        const odometer = document.getElementById("odometer");
        odometer.innerHTML = data.Dead;

        const movement = document.getElementById("movement");
        movement.innerHTML = data.SmashedAnkle + data.SmashedHip;

        const armour = document.getElementById("armour");
        armour.innerHTML = data.SeriousConcussion + data.FracturedSkull ;

        const strength = document.getElementById("strength");
        strength.innerHTML = data.SmashedCollarBone;

        const agility = document.getElementById("agility");
        agility.innerHTML = data.BrokenNeck;

        const niggling = document.getElementById("niggling");
        niggling.innerHTML = data.DamagedBack + data.SmashedKnee;
      }
    });

    
block navigation
  nav(class="navbar navbar-expand-md fixed-top navbar-dark bg-dark" style="min-height:80px;top:80px;justify-content:unset")
    button(class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#rebblSubNav" aria-controls="rebblSubNav" aria-expanded="false" aria-label="Toggle navigation")
      span(class="navbar-toggler-icon")
    a(class="navbar-brand d-md-none d-lg-none d-xl-none " href="#")= "STANDINGS - " + league 
    div(class="collapse navbar-collapse" id="rebblSubNav")
      ul(class="navbar-nav me-auto")
        li( class="nav-item active")
          div(class="nav-link") DISPLAY 

block content
  div(class=`container `)
    div(style="background:url(https://cdn.rebbl.net/images/counterbackground.png) no-repeat;background-size:cover")
      div(class="row col-12 justify-content-center")
        div(style="margin-left: auto;margin-right:auto")
          img(src="https://cdn.rebbl.net/images/skills/Dead.png" style="vertical-align:middle")
          div(id="odometer" class="odometer" style="font-size:25px !important;border-radius:unset;padding:0px")
          img(src="https://cdn.rebbl.net/images/skills/MovementBust.png" style="vertical-align:middle;height:44px;margin-left:15px;margin-right:10px")
          div(id="movement" class="odometer" style="font-size:25px !important;border-radius:unset;padding:0px")
          img(src="https://cdn.rebbl.net/images/skills/ArmourBust.png" style="vertical-align:middle;height:44px;margin-left:15px;margin-right:10px")
          div(id="armour" class="odometer" style="font-size:25px !important;border-radius:unset;padding:0px")
          img(src="https://cdn.rebbl.net/images/skills/StrengthBust.png" style="vertical-align:middle;height:44px;margin-left:15px;margin-right:10px")
          div(id="strength" class="odometer" style="font-size:25px !important;border-radius:unset;padding:0px")
          img(src="https://cdn.rebbl.net/images/skills/AgilityBust.png" style="vertical-align:middle;height:44px;margin-left:15px;margin-right:10px")
          div(id="agility" class="odometer" style="font-size:25px !important;border-radius:unset;padding:0px")
          img(src="https://cdn.rebbl.net//images/skills/NigglingInjury2.png" style="vertical-align:middle;height:44px;margin-left:15px;margin-right:10px  ")
          div(id="niggling" class="odometer" style="font-size:25px !important;border-radius:unset;padding:0px")        

    div
      label(class="switch")
        input(type="checkbox" id="spoiled-switch" data-bind="checked: model.complete")
        span(class="slider" data-bind="click: model.toggle")
      | show all

    // ko foreach: ["REBBL Cripple Ladder - Season 5","REBBL Cripple Ladder - Season 4","REBBL Cripple Ladder - Season 3","REBBL Cripple Ladder - Season 2","REBBL Cripple Ladder - Season 1b","REBBL Cripple Ladder - Season 1a"]
    div(class="row col-12")
      h2
        i(style="padding-top:180px;margin-top:-180px")
        span(data-bind="text: $data")
    div(class="season-table")  
      div(class="row col-12 " style="border-bottom: 3px solid #bdbcbccf;")
        div(class="row col-6" style="font-size:1.25em")
          div(class="col-1" ) #
          div(class="col-4" ) Coach
          div(class="col-7" ) Team
        div(class="col-3" style="font-size:1.25em") Race
        div(class="row col-3" style="font-size:1.25em")
          div(class="col-3" ) Pts.
          div(class="col-3") W  
          div(class="col-3") D  
          div(class="col-3") L
      // ko foreach: model.scores().filter(x => x.competition === $data)
      div(class="row col-12 season-table-row" data-bind="css: $data.gp < 10 ? 'unqualified' : ''")
        div(class="row col-6")
          div(class="col-1" data-bind="text: ($index() + 1) ")
          div(class="col-4" style=";overflow:hidden") 
            span(data-bind="text: $data.coach ? $data.coach.name : '-'" )
          div(class="col-7" style=";overflow:hidden") 
            span(data-bind="text: $data.team ? $data.team.teamName() : '-', style:{color: $data.team ? $data.team.teamColor() : 'inherit'}")
        div(class="col-3" style=";overflow:hidden" data-bind="text: $data.team ? $data.team.teamRace() : '-' ")
        div(class="row col-3" )
          div(class="col-3" data-bind="text: Math.round($data.score*100)/100")
          div(class="col-3" data-bind="text: $data.wins")
          div(class="col-3" data-bind="text: $data.draws")
          div(class="col-3" data-bind="text: $data.gp - $data.wins - $data.draws")
      // ko if: $index() === 6 
      div(class="row col-12 season-table-row")
        div(class="col-1 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
        div(class="col-6 Standings-divider--flex" )
          span(class="Standings-dividerText" style="font-size:1.5em")  &nbsp; &nbsp;Playoffs Cutoff &nbsp; &nbsp;
        div(class="col-5 Standings-divider--flex")
          span(class="Standings-dividerText--correction")
      // /ko
      // /ko
    // /ko
