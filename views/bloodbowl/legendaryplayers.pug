
extends ../relayout.pug


block content
  div(class="container")
    .col-12.justify-content-center
      .btn-group(role="group" aria-label="Basic radio toggle button group")
        input.btn-check#option1(data-bind="checked:show" type='radio', name='options', autocomplete='off', value="all")
        label.btn.btn-outline-primary.btn-sm(for="option1") all
        input.btn-check#option2(data-bind="checked:show" type='radio', name='options', autocomplete='off' value="aliveActive")
        label.btn.btn-outline-primary.btn-sm(for="option2") alive and active team
        input.btn-check#option3(data-bind="checked:show" type='radio', name='options', autocomplete='off' value="alive")
        label.btn.btn-outline-primary.btn-sm(for="option3") alive in retired team
        input.btn-check#option4(data-bind="checked:show" type='radio', name='options', autocomplete='off' value="retired")
        label.btn.btn-outline-primary.btn-sm(for="option4") retired

    table(class="table table-striped")
      thead(class="")
        tr
          th(scope="col") #
          th(scope="col") name
          th(scope="col") position
          th(scope="col") team
          th(scope="col" class=" d-none d-lg-table-cell") Skills
          th(scope="col" class=" d-none d-lg-table-cell") CAS
          th(scope="col") SPP
      tbody
        // ko template: { name: 'playerTemplate', foreach: filteredPlayers() }
        // /ko

  script(type="text/html" id="playerTemplate")
    tr(data-bind="attr:{style: active || $root.show === 'retired' ? '' : 'filter:grayscale(1)'  }")
      td(data-bs-toggle="modal" data-bs-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:number" style="cursor:pointer")
      td(data-bs-toggle="modal" data-bs-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root)" style="cursor:pointer")
        div
          img(data-bind="attr:{src:`https://cdn.rebbl.net/images/skills/${level}.png`}" alt="", class="TeamLabel-logo" style="width:30px;margin-right:2px;height:30px;float:left;")
          div(class="" data-bind="text: playerName()" class="highlight" )
      td(data-bs-toggle="modal" data-bs-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:position()" style="cursor:pointer")
      td
        img(data-bind="attr:{src:`https://cdn.rebbl.net/images/logo/logo_${teamLogo.toLowerCase()}.png`}" alt="" class="TeamLabel-logo")
        a(data-bind="attr:{href:`/team/${teamId}`}, text:teamName" target="_blank")

      td(class="td-prevent d-none d-lg-table-cell")
        // ko foreach: skills
        img(data-bind="attr:{src:`https://cdn.rebbl.net/images/skills/${$data}.png`,title:$data.replace(/([A-Z])/g, ' $1').trim()},click:$root.selectSkill.bind($data,$root) "  alt=""  data-bs-toggle="modal" data-bs-target="#skill-dialog" style="z-index:9999;width:42px;cursor:pointer" )
        // /ko
      td(class=" d-none d-lg-table-cell" data-bs-toggle="modal" data-bs-target="#player-dialog"  data-bind="click:$root.selectPlayer.bind($data,$root)")
        // ko foreach: casualties_state
        //ko if: $data !== "BadlyHurt"
        img(data-bind="attr:{src:$parent.getCASImage($data),title:$data.replace(/([A-Z])/g, ' $1').trim() }"  alt="" style="width:32px;height:32px" )
        // /ko
        // /ko
        // ko if: ((casualties_sustained && casualties_sustained[0] === "Dead") &&( casualties_state && casualties_state.indexOf("Dead") === -1) )    
        img(src="https://cdn.rebbl.net/images/skills/Dead.png" alt="" title="Dead" )
        // /ko
      td(data-bs-toggle="modal" data-bs-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:actualLevel()")     

  div(class="modal" tabindex="-1" role="dialog" id="player-dialog")

    div(class="modal-dialog modal-lg modal-dialog-centered" role="document")
      div(class="modal-content")
        //ko if: selectedPlayer !== null
        //ko with:selectedPlayer
        div(class="modal-header")
          h3.modal-title( data-bind="text: name")
          a.highlight(style="float:right" target="_blank" data-bind="{attr:{href:`/rebbl/match/${lastMatch}`}}") Last Match
        div(class="modal-body")
          table(class="table-striped") 
            tr
              th(scope="col") MA
              th(scope="col") ST
              th(scope="col") AG
              th(scope="col") AV
              th(scope="col") GP
              th(scope="col") MVP            
            tr
              td(data-bind="text:attributes.ma,attr:{class:maColor}")
              td(data-bind="text:attributes.st,attr:{class:stColor}")
              td(data-bind="text:attributes.ag,attr:{class:agColor}")
              td(data-bind="text:attributes.av,attr:{class:avColor}")
              td(data-bind="text:matchplayed")
              td(data-bind="text:mvp")
          table(class="table-striped") 
            tr              
              td skills
            tr              
              td(class="td-prevent")
                // ko foreach: skills
                img(data-bind="attr:{src:`https://cdn.rebbl.net/images/skills/${$data}.png`,title:$data.replace(/([A-Z])/g, ' $1').trim()},click:$root.selectSkill.bind($data,$root) "  alt=""  data-bs-toggle="modal" data-bs-target="#skill-dialog" style="z-index:9999;width:42px;cursor:pointer" )
                // /ko
          table(class="table-striped") 
            tr              
              td injuries
            tr
              td
                // ko foreach: casualties_state
                //ko if: $data !== "BadlyHurt"
                img(data-bind="attr:{src:$parent.getCASImage($data),title:$data.replace(/([A-Z])/g, ' $1').trim() }"  alt="" style="width:32px;height:32px;" )
                // /ko
                // /ko
                // ko if: ((casualties_sustained && casualties_sustained[0] === "Dead") &&( casualties_state && casualties_state.indexOf("Dead") === -1) )    
                img(src="https://cdn.rebbl.net/images/skills/Dead.png" alt="" title="Dead" )
                // /ko

          table(class="table-striped") 
            thead(class="headerText")
              tr 
                th
                th inflicted
                th sustained
            tbody
              tr
                td tackles
                td(data-bind="text:stats.inflictedtackles")
                td(data-bind="text:stats.sustainedtackles")
              tr
                td injuries
                td(data-bind="text:stats.inflictedinjuries")
                td(data-bind="text:stats.sustainedinjuries")
              tr
                td stuns
                td(data-bind="text:stats.inflictedstuns")
                td(data-bind="text:stats.sustainedstuns")
              tr
                td ko
                td(data-bind="text:stats.inflictedko")
                td(data-bind="text:stats.sustainedko")
              tr
                td CAS
                td(data-bind="text:stats.inflictedcasualties")
                td(data-bind="text:stats.sustainedcasualties")
              tr
                td dead
                td(data-bind="text:stats.inflicteddead")
                td(data-bind="text:stats.sustaineddead")
              tr
                td running (m)
                td(data-bind="text:stats.inflictedmetersrunning")
                td -
              tr
                td passing (m)
                td(data-bind="text:stats.inflictedmeterspassing")
                td -
              tr
                td passes
                td(data-bind="text:stats.inflictedpasses")
                td -
              tr
                td catch
                td(data-bind="text:stats.inflictedcatches")
                td -
              tr
                td interc.
                td(data-bind="text:stats.inflictedinterceptions")
                td(data-bind="text:stats.sustainedinterceptions")
              tr
                td touchdowns
                td(data-bind="text:stats.inflictedtouchdowns")
                td -
              tr
                td surfs
                td(data-bind="text:stats.inflictedpushouts")      
                td -
        // /ko
        // /ko
        div(class="modal-footer")
          button( type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-bind="click:$root.selectedPlayer = null") Close

  div(class="modal" tabindex="-1" role="dialog" id="skill-dialog" style="z-index:2050")
    // ko if: activeSkill
    div(class="modal-dialog modal-lg modal-dialog-centered" role="document")
      div(class="modal-content")
        div(class="modal-header")
          h5(class="modal-title" data-bind="text: activeSkill.name")
        div(class="modal-body")
          img( data-bind="attr:{src:`https://cdn.rebbl.net/images/skills/${activeSkill.name.replace(/[ \-']/g,'')}.png`}" alt="" style=" float: left;margin-right:20px;width:145px;margin-top:20px")
          p(data-bind="text:activeSkill.description")
        div(class="modal-footer")
          button( type="button" class="btn btn-secondary" data-bs-dismiss="modal" ) Close
    // /ko


block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  include javascript.pug 
  
  script.
    class PlayerModel{
      constructor(data, playerType){
        this.map(data);
        this.playerType = playerType;
        ko.track(this);
        
        ko.defineProperty(this, 'maColor', function () {
          if (this.attributes.ma > this.playerType.ma) return "green";
          if (this.attributes.ma < this.playerType.ma) return "red";
          return "" ;
        });
        ko.defineProperty(this, 'stColor', function () {
          if (this.attributes.st > this.playerType.st) return "green";
          if (this.attributes.st < this.playerType.st) return "red";
          return "" ;
        });
        ko.defineProperty(this, 'agColor', function () {
          if (this.attributes.ag > this.playerType.ag) return "green";
          if (this.attributes.ag < this.playerType.ag) return "red";
          return "" ;
        });
        ko.defineProperty(this, 'avColor', function () {
          if (this.attributes.av > this.playerType.av) return "green";
          if (this.attributes.av < this.playerType.av) return "red";
          return "" ;
        });
      }

      map(data, playerType){
        this.active = data.active || false;
        this.retiredTeam = data.retiredTeam;
        this.attributes = data.attributes || [];
        this.casualties_state = data.casualties_state || [];
        this.casualties_sustained = data.casualties_sustained || [];
        this.id = data.id || 0;
        this.level = data.level || 0;
        this.matchplayed = data.matchplayed || 0;
        this.mvp = data.mvp || 0;
        this.name = data.number === 0 ? data.type.split('_')[1].replace(/([A-Z])/g, ' $1') : data.name;
        this.number = data.number || 0;
        this.skills = data.skills || [];
        this.stats = data.stats || [];
        this.suspended_next_match = data.suspended_next_match || false;
        this.type = data.type || '';
        this.value = data.value || 0;
        this.xp = data.xp || 0;
        this.teamName = data.teamName || '';
        this.teamId = data.teamId || '';
        this.teamLogo = data.teamLogo || '';
        this.lastMatch = data.lastMatch || "";
      }

      cssClass(){
        return  (this.active && this.casualties_sustained && 
               (this.casualties_sustained.length === 1 && this.casualties_sustained[0] !== "BadlyHurt" ))
          ? "stats player-out" 
          : "stats";
      }

      skillUp(){
        let levels = [0,0,6,16,31,51,76,176,"*"];
        return this.xp >= levels[this.level+1];
      }

      actualLevel(){
        let levels = [0,0,6,16,31,51,76,176,"*"];
        return `${this.xp}/${levels[this.level+1]}`
      }

      getCASImage(e){
        let bust = "";  
        switch(e){
          case "DamagedBack":
          case "SmashedKnee":
            bust="NigglingInjury2";
            break;
          case"BrokenNeck":
            bust="AgilityBust";
            break;
          case "SmashedCollarBone":
           bust="StrengthBust";
            break;
          case "SeriousConcussion":
          case "FracturedSkull":
            bust="ArmourBust";
            break;
          case "SmashedHip":
          case "SmashedAnkle":
            bust= "MovementBust";
            break;
          default:
            bust= e;
            break;
        }

        return `https://cdn.rebbl.net/images/skills/${bust}.png`
      }

      playerColor(){
        if (/\[colour=/i.test(this.name)){
          if (/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i.test(this.name)) {
            return "#"+this.name.match(/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i)[1];
          }
          return "#000000";
        }

        return "inherit";
      }
      playerName(){
        if (/\[colour=/i.test(this.name)){
            return this.name.replace(/\[colour=.*]/i,'')
        }
        return this.name;
      }

      position(){
        let pos = "";
        if(this.number >0){
          let playerType = this.type.split('_')
          pos  = playerType.length === 3 ? playerType[2].replace(/([A-Z])/g, ' $1') : playerType[1].replace(/([A-Z])/g, ' $1') 
        }
        return pos;
      }

      playerId(){
        return this.position() === "" ? this.name.replace(/ /g,'') : (this.id ? this.id : this.name.replace(/ /g,''))
      }
    }

    class SkillModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }

      map(data){
        if(data){
          this.id =data.id;
          this.name = data.name;
        }
      }

    }


    class ViewModel{
      constructor(){
        this.skills = [];
        this.skillDescriptions = [];
        this.players = [];
        this.races = [];
        this.selectedRace = false;
        this.playertypes = [];
        this.activeSkill={name:'Block',description:''};
        this.selectedPlayer = null;
        this.show = "all";



        ko.track(this);


      }

      selectSkill(self,e){
        self.activeSkill = self.skillDescriptions.find(skill => skill.name.toLowerCase() === e.replace(/([A-Z])/g, ' $1').trim().toLowerCase());
      };

      getSkills(player) {return this.skills[player.type]};

      async selectPlayer(self,e){
        let response = await fetch(`/api/v2/bloodbowl/legendaryplayers/${e.id}/lastMatch`);
        if(response.ok){
          e.lastMatch = await response.json();
          self.selectedPlayer = e;
        }

      };

      filteredPlayers(){
        switch (this.show){
          case "all":
            return this.players;
          case "aliveActive":
            return this.players.filter(p => p.active && !p.retiredTeam);
          case "alive":
            return this.players.filter(p => p.active && p.retiredTeam);
          case "retired":
            return this.players.filter(p => !p.active);
        }
      }

    }


    async function loadPlayers(type, cb){
      const response = await fetch("/api/v2/bloodbowl/legendaryplayers");
      if (response.ok){
        const result = await response.json();
        model.players = result
          .sort(function(a,b){
            if (a.xp > b.xp) return -1;
            if (a.xp < b.xp) return 1;
            return a.number > b.number ? 1 : -1})
          .map(x => new PlayerModel(x, model.playertypes.find(t => t.type === x.type) ));
      }

    }

    async function loadPlayertypes(){
      const storage = window.localStorage;
      let playerTypes = [];
  
      if (storage){
        playerTypes = JSON.parse(localStorage.getItem('playertypes') || "[]");      
      }    
        

      if (playerTypes.length >= 101){
        model.playertypes = playerTypes;
        await loadPlayers();
        return;
      }
      const response = await fetch("/api/v2/bloodbowl/playertypes");
      if (response.ok){
        model.playertypes = result =await response.json();
        const storage = window.localStorage;
    
        if (storage)
          storage.setItem('loadPlayers', JSON.stringify(result));    
        
        await loadPlayers();
      }
    }

    let model = new ViewModel({});
    ko.applyBindings(model);
    $(document).ready(async function(){

      await loadSkillDescriptions();
      loadPlayertypes();
    });