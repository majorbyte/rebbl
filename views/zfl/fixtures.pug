extends layout.pug

mixin fixture(entry)
  - 
    let canSee = entry.released
    canSee = canSee || (isAdminMode && isDM && entry.updated)
    canSee = canSee || (isAdminMode && isAdmin && entry.updated && (teamIds.some(x => x.id == entry.home.team.id ) || teamIds.some(x => x.id == entry.away.team.id)))
  .row.col-12.align-items-center
    .col 
      a(href=`/team/${entry.home.team.id}` target="_blank")
        img.img-fluid(src=`/images/zfl/${entry.home.team.logo}` style="padding:0px")
    .col.text-center.row.align-items-center
      .col.d-none.d-lg-block 
        if canSee
          h1= entry.home.score
        else
          if isDM && isAdminMode
            select(value=entry.home.kit onchange=`onValueChange(this.value,'${entry.competition.name}','home')`)
              if !entry.home.kit
                option(disabled selected) select kit
              option(value="home" selected=(entry.home.kit=="home")) home 
              option(value="away" selected=(entry.home.kit=="away")) away 
          else
            span= entry.home.kit || ""
      .col
        if canSee && !entry.released
          button.btn.btn-sm.btn-primary.mx-2.mb-2(id=entry.matchId onclick=`releaseFixture("${entry.matchId}")`) release
        if canSee
          h1 
            a(href=`/match/${entry.gameId}` target="_blank") vs
        else
          h1 vs
      .col.d-none.d-lg-block
        if canSee
          h1= entry.away.score
        else 
          if isDM && isAdminMode
            select(value=entry.away.kit onchange=`onValueChange(this.value,'${entry.competition.name}','away')`)
              if !entry.away.kit
                option(disabled selected) select kit
              option(value="home" selected=(entry.away.kit=="home")) home 
              option(value="away" selected=(entry.away.kit=="away")) away 
          else
            span= entry.away.kit || ""
    .col 
      a(href=`/team/${entry.away.team.id}` target="_blank")
        img.img-fluid(src=`/images/zfl/${entry.away.team.logo}` style="padding:0px")
block vars 
  - let page ="fixtures"

block head
  style.
    h2{margin-top:0px;margin-bottom:0px;margin-right:15px}
    .card{width: 12rem;}

    .table > :not(caption) > * > * {padding:0px !important;}

block nav  
  ul.navbar-nav.ms-auto.mb-2.mb-md-0
    li.nav-item
      if !isAdminMode && (isDM || isAdmin)
        a.btn.btn-sm.btn-primary.mx-2.mb-2(href="/fixtures/admin") admin mode
      if isAdminMode
        a.btn.btn-primary.mx-2.mb-2(href="/fixtures") exit

block main
  - let rounds = ["","7th October - 21st October", "22nd October - 4th November", "5th November - 18th November","19th November - 2nd December","31st December - 13th January","14th January - 27th January","28th January - 10th February","18th February - 3rd March","4th March - 17th March","18th March - 31st March","8th April - 21st April","22nd April - 5th May"]

  .container-fluid
    .row
      - let dateX = 0;
      - for(let x = 1; x < 12; x++)
        - dateX++;
        //- let compName = competitions[0].fixtures.find(x => x.round == x).competition.name
        .row.col-12.text-center 
          h1= `Round ${x}`
            if isAdminMode && competitions[0].round == x && !competitions[0].completed
              button.btn.btn-sm.btn-primary.mx-2.mb-2(onclick=`completeCompetitions(${x})`) complete
            else if isAdminMode && competitions[0].round +1 == x && competitions[0].completed
              button.btn.btn-sm.btn-primary.mx-2.mb-2(onclick=`createCompetitions(${x})`) create
          span= rounds[dateX]
          if competitions[0].round == x
            .toast-container.end-0.p-3
              .toast.align-items-center.text-bg-success.border-0#successToast(role="alert" aria-live="assertive" aria-atomic="true")
                .d-flex
                  .toast-body#successBody
                  button.btn-close.btn-close-white.me-2.m-auto(type="button" data-bs-dismiss="toast" aria-label="Close")

              .toast.align-items-center.text-bg-danger.border-0#errorToast(role="alert" aria-live="assertive" aria-atomic="true")
                .d-flex
                  .toast-body#errorBody
                  button.btn-close.btn-close-white.me-2.m-auto(type="button" data-bs-dismiss="toast" aria-label="Close")

        .row.col-12.col-xl-6.text-center
          .row.col-12.align-items-center
            h2 Elite Division
          .row.col-12
            each fixture of competitions[0].fixtures.filter(f => f.round == x && f.competition.name.startsWith("Elite"))
              +fixture(fixture) 
        .row.col-12.col-xl-6.text-center
          .row.col-12.align-items-center
            h2 Second Division
          .row.col-12
            each fixture of competitions[1].fixtures.filter(f => f.round == x && f.competition.name.startsWith("Second"))
              +fixture(fixture) 
        .row.col-12 &nbsp;
        if competitions[0].fixtures.some(f => f.round == x && f.competition.name.startsWith("Howitzer"))
          - dateX++
          .row.col-12.text-center 
            h1= `Howitzer Round ${x}`
              if isAdminMode && competitions[0].round == x && !competitions[0].completed
                button.btn.btn-sm.btn-primary.mx-2.mb-2(onclick=`completeCompetitions(${x})`) complete
              else if isAdminMode && competitions[0].round +1 == x && competitions[0].completed
                button.btn.btn-sm.btn-primary.mx-2.mb-2(onclick=`createCompetitions(${x})`) create
            span= rounds[dateX]
            if competitions[0].round == x
              .toast-container.end-0.p-3
                .toast.align-items-center.text-bg-success.border-0#successToast(role="alert" aria-live="assertive" aria-atomic="true")
                  .d-flex
                    .toast-body#successBody
                    button.btn-close.btn-close-white.me-2.m-auto(type="button" data-bs-dismiss="toast" aria-label="Close")

                .toast.align-items-center.text-bg-danger.border-0#errorToast(role="alert" aria-live="assertive" aria-atomic="true")
                  .d-flex
                    .toast-body#errorBody
                    button.btn-close.btn-close-white.me-2.m-auto(type="button" data-bs-dismiss="toast" aria-label="Close")

          .row.col-12.col-xl-6.text-center
            .row.col-12
              each fixture of competitions[0].fixtures.filter(f => f.round == x && f.competition.name.startsWith("Howitzer"))
                +fixture(fixture) 
          .row.col-12.col-xl-6.text-center
            .row.col-12
              each fixture of competitions[1].fixtures.filter(f => f.round == x && f.competition.name.startsWith("Howitzer"))
                +fixture(fixture) 
          .row.col-12 &nbsp;

block scripts 
  script.
    async function releaseFixture(matchId){
      const response = await fetch(`/api/competition/${matchId}/release`,{
        method:'PATCH',
        headers:{'Content-Type': 'application/json'}
      });

      const btn = document.getElementById(matchId);

      let toast = body = null;
      if (response.ok){
        body = document.getElementById('successBody');
        toast = new bootstrap.Toast(document.getElementById('successToast'));

        body.innerHTML = "match released succesfully";
        
        const h1 = document.createElement("h1");
        h1.innerHTML = "VS";

        btn.parentNode.replaceChild(h1,btn);

      } else {
        body = document.getElementById('errorBody');
        toast = new bootstrap.Toast(document.getElementById('errorToast'));
      
        body.innerHTML = await response.text();
      }

      toast.show();

    }
    async function completeCompetitions(round){

      
    }
    async function createCompetitions(round){
      
    }        
    async function onValueChange(kit, competition, side){

      const response = await fetch(`/api/fixture/${competition}/${side}/${kit}`,{
        method:'PATCH',
        headers:{'Content-Type': 'application/json'}
      });

    }