script.
  class PlayerModel{
    constructor(data){
      this.map(data || {});
      ko.track(this);

      ko.getObservable(this, 'selectedSkill1').subscribe(this.updateSkills.bind(this));
      ko.getObservable(this, 'selectedSkill2').subscribe(this.updateSkills.bind(this));
    }
    map(data){
      this.id = data.id || 0;
      this.playerType = data.playerType || undefined;
      this.name = data.name || '';

      this.selectedSkill1 = data.selectedSkill1;
      this.selectedSkill2 = data.selectedSkill2;
      this.fixedSkills = data.fixedSkills ||  this.playerType?.skills || [];
      this.skills = data.skills || [];
      this.injuries = data.injuries || [];
      this.visible = false;
      this.tier = data.tier || 1;
      this.value = data.value || 0;
      if (data.casualties_state?.length === 0 && data.casualties_sustained_total && data.casualties_sustained_total?.length !== 0) data.casualties_state = data.casualties_sustained_total;
      if (data.casualties_state) this.casualties = data.casualties_state.filter(x => ['DamagedBack','SmashedKnee','SmashedAnkle','SmashedHip','SmashedCollarBone','BrokenNeck','FracturedSkull','SeriousConcussion'].includes(x) ).map(x => new CasualtyModel({name: x}));
      else if (data.casualties) this.casualties = data.casualties.filter(x => ['DamagedBack','SmashedKnee','SmashedAnkle','SmashedHip','SmashedCollarBone','BrokenNeck','FracturedSkull','SeriousConcussion'].includes(x.name) ).map(x => new CasualtyModel(x)) 
      else this.casualties = [];
      this.level = data.level || 1;
      this.xp = data.xp || 0;
      this.sppSurplus = data.sppSurplus || 0;
      this.spentSPP = data.spentSPP || 0;
      this.dice = data.dice || undefined;
      
      this.skill1 = skillsData.find(x => x.name.toLowerCase() === this.selectedSkill1?.replace(/[) (+-]/g,''));
      this.skill2 = skillsData.find(x => x.name.toLowerCase() === this.selectedSkill2?.replace(/[) (+-]/g,''));


      if (!this.playerType && data.type){
        this.playerType = playerTypes.find(x => x.type == data.type);
        this.fixedSkills = playerType.skills;
      }

      ko.defineProperty(this, 'ma', function () {
        const cas = this.casualties.filter(x => ['SmashedAnkle','SmashedHip'].includes(x.name) && !x.removed);
        const stats = this.skills.filter(x => x === 'IncreaseMovement');

        const val = this.playerType ? this.playerType.characteristics.ma - Math.min(cas.length, 2) + Math.min(stats.length, 2) : 0;
        return Math.max(1,val);
      });
      ko.defineProperty(this, 'st', function () {
        const cas = this.casualties.filter(x => 'SmashedCollarBone' === x.name && !x.removed);
        const stats = this.skills.filter(x => x === 'IncreaseStrength');

        const val = this.playerType ? this.playerType.characteristics.st - Math.min(cas.length, 2) + Math.min(stats.length, 2) : 0;
        return Math.max(1,val);
      });
      ko.defineProperty(this, 'ag', function () {
        const cas = this.casualties.filter(x => 'BrokenNeck' === x.name && !x.removed);
        const stats = this.skills.filter(x => x === 'IncreaseAgility');

        const val = this.playerType ? this.playerType.characteristics.ag - Math.min(cas.length, 2) + Math.min(stats.length, 2) : 0;
        return Math.max(1,val);
      });
      ko.defineProperty(this, 'av', function () {
        const cas = this.casualties.filter(x => ['FracturedSkull','SeriousConcussion'].includes(x.name) && !x.removed);
        const stats = this.skills.filter(x => x === 'IncreaseArmour');

        const val = this.playerType ? this.playerType.characteristics.av - Math.min(cas.length, 2) + Math.min(stats.length, 2) : 0;
        return Math.max(1,val);
      });


      ko.defineProperty(this, 'maColor', function () {
        if (!this.playerType) return '';
        if (this.ma > this.playerType?.ma) return 'green';
        if (this.ma < this.playerType?.ma) return 'red';
        return '' ;
      });
      ko.defineProperty(this, 'stColor', function () {
        if (!this.playerType) return '';
        if (this.st > this.playerType?.st) return 'green';
        if (this.st < this.playerType?.st) return 'red';
        return '' ;
      });
      ko.defineProperty(this, 'agColor', function () {
        if (!this.playerType) return '';
        if (this.ag > this.playerType?.ag) return 'green';
        if (this.ag < this.playerType?.ag) return 'red';
        return '' ;
      });
      ko.defineProperty(this, 'avColor', function () {
        if (!this.playerType) return '';
        if (this.av > this.playerType?.av) return 'green';
        if (this.av < this.playerType?.av) return 'red';
        return '' ;
      });

      const spp = SPP.find(x => x.level === this.level);
      this.sppSurplus = Math.max(this.xp - spp.spp,0);
      this.levelEligible = this.xp >= spp.eligible;
      const nextSPP = SPP.find(x => x.level === this.level+1);
      this.nextLevelSPP = 0;
      if (nextSPP) this.nextLevelSPP = nextSPP.spp - this.xp;
      
    }

    updateSkills(){
      this.skill1 = skillsData.find(x => x.name.toLowerCase() === this.selectedSkill1?.replace(/[) (+-]/g,''));
      this.skill2 = skillsData.find(x => x.name.toLowerCase() === this.selectedSkill2?.replace(/[) (+-]/g,''));
    }

    toggleEdit(){
      this.visible = !this.visible;
    }

    getCategory = (skill) => SkillDescriptions.find(x => x.name === skill).category;
    hasDouble = () => SkillDescriptions.filter(x => this.skill1 === x.name).some(x => this.playerType.affinities.secondary.includes(x.category));
    hasDoubleOrIncrease = () => this.hasDouble() || this.hasIncrease();
    hasIncrease = () => this.increases().includes(this.skill1);
    isDouble = (skill) => this.playerType.affinities.secondary.includes(SkillDescriptions.find(x => x.name === skill)?.category ||'');
    isIncrease = (skill) => SkillDescriptions.filter(x => x.category == 'Increase').map(x => x.name).includes(skill);
    isSuperstar = () => this.skill1 && this.skill2;
    isSkilled = () => this.id > 0 && this.skill1;

    normals = () => SkillDescriptions.filter(x => this.playerType.affinities.primary.includes(x.category)).map(x => x.name);
    increases = () => SkillDescriptions.filter(x => x.category == 'Increase').filter(x => this.tier > 2 || x.name !== 'Increase Strength').map(x => x.name);
    
    accessibleSkills(){
      let secondary = skills.filter(x => this.playerType.affinities.secondary.indexOf(x.category)>-1).sort((a,b) => a.data > b.data).map(x => {return {name: x.data, secondary:true}}); 
      let primary = skills.filter(x => this.playerType.affinities.primary.indexOf(x.category)>-1).sort((a,b) => a.data > b.data).map(x => {return {name: x.data, secondary:false}}); 


      secondary.push({name:"random secondary", secondary:true});
      secondary.push({name:"random characteristic", secondary:false});
      primary.push({name:"random primary", secondary:false});


      return primary.filter(x => !this.fixedSkills.includes(x.name)).concat(secondary.filter(x => !this.fixedSkills.includes(x.name))).sort();
    } 

    getSkills1 = () => /*!this.skill1 /*&& this.skillModel.rookieCount() <= 3 ? [] :*/ this.accessibleSkills();//.filter(x => x.name !== this.skill2?.name);
    getSkills2 = () => /*!this.skill2 /*&& this.skillModel.rookieCount() <= 3 ? [] :*/ this.accessibleSkills().filter(x => x.name !== this.skill1?.name);

    medicalBill = () => this.casualties.reduce((p,c) => p += c.removed ? 1 : 0 ,0) * 100_000;

    _getSkillCost = () => {
      /*
                      random primary  select primary/random secondary   select secondary    characteristic
        Experienced         3                     6                           12                  18
        Veteran-            4                     8                           14                  20
        Emerging Star       6                    10                           16                  24
        Star                8                    12                           18                  28
        Super Star         10                    14                           20                  32
        Legend             15                    30                           40                  50      
      */
        
        const secondaryXP = [0,12,14,16,18,20,40];
        const primaryXP   = [0, 6, 8,10,12,14,30];
        const randomSecondaryXP  = primaryXP;
        const randomPrimaryXP    = [ 0, 3, 4, 6, 8,10,15];
        const characteristic     = [ 0,18,20,24,28,32,50];

        let level = this.skills.length;
        let secondary = skills.filter(x => this.playerType.affinities.secondary.indexOf(x.category)>-1).map(x => {return {name: x.data, secondary:true}}); 
        let primary = skills.filter(x => this.playerType.affinities.primary.indexOf(x.category)>-1).map(x => {return {name: x.data, secondary:false}}); 

        let isSecondary = secondary.some(x => x.name == this.selectedSkill1);
        let isPrimary = primary.some(x => x.name == this.selectedSkill1);

        if (this.selectedSkill1 && !isPrimary && !isSecondary){ 
          isSecondary = this.selectedSkill1?.indexOf("secondary") > -1;
          isPrimary = !isSecondary;
        }

        let isRandom = this.selectedSkill1?.indexOf("random") > -1;
        let isCharacteristic = this.selectedSkill1?.indexOf("characteristic") > -1;

        let skillCost = 0;

        if (isCharacteristic) skillCost = characteristic[++level];
        else if (isSecondary) skillCost = (isRandom ? randomSecondaryXP : secondaryXP)[++level];
        else if (isPrimary)   skillCost = (isRandom ? randomPrimaryXP: primaryXP)[++level];

        isSecondary = secondary.some(x => x.name == this.selectedSkill2);
        isPrimary = primary.some(x => x.name == this.selectedSkill2);

        if (this.selectedSkill2 && !isPrimary && !isSecondary){ 
          isSecondary = this.selectedSkill2?.indexOf("secondary") > -1;
          isPrimary = !isSecondary;
        }

        isRandom = this.selectedSkill2?.indexOf("random") > -1;
        isCharacteristic = this.selectedSkill2?.indexOf("characteristic") > -1;

        if (isCharacteristic) skillCost += characteristic[++level];
        else if (isSecondary) skillCost += (isRandom ? randomSecondaryXP : secondaryXP)[++level];
        else if (isPrimary)   skillCost += (isRandom ? randomPrimaryXP: primaryXP)[++level];

        return skillCost * 5_000  ;
    }

    cost() {
      if (this.id && this.id > 0){
        return this.value * 1000 + this.medicalBill() + this._getSkillCost();
      }

      return this.playerType.cost + this._getSkillCost();
    }
    setClass(option, skill) {
      if (skill?.secondary) $(option).addClass('bg-double');
    }
  }