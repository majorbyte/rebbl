extends ../no-cache-sub-relayout.pug

block vars
  - let options = {active: league, title: "REBBL SEASON 8", company:"clan"}
  - let company = "clan";

block navigation
  li.nav-item.dropdown.mr-3
    a#navbarSeason.nav-link.text-light.dropdown-toggle(alt='' role='button' data-toggle='dropdown')
      | Season
    div
      .dropdown-menu.bg-dark(aria-labelledby='navbarSeason')
        //ko foreach: seasons.slice(0).reverse()
        a.dropdown-item.text-light(data-bind="text:$data,click:$root.loadSeason.bind($root)")
        // /ko              

block content
  .container
    // ko foreach: {data: Object.keys(standings).sort($root.collator.compare)}
    // ko with: $root.standings[$data] 
    .row.col-12
      h2
        i(data-bind="id:$data[0].division"  style="padding-top:180px;margin-top:-180px")
        a.highlight(data-bind="text:$data[0].division,attr:{href:`/clan/schedule/${$root.season}/${$data[0].division}`}")
    .table-responsive
      table.table-striped.table-sm 
        thead
          th(scope="row") #
          th(scope="row") Clan 
          // ko if: $root.usePoints()
          th.text-center(scope="row" class="d-none d-md-table-cell") Points
          th.text-center(scope="row" class="d-md-none") P
          th.text-center(scope="row" class="d-none d-md-table-cell") Wins
          th.text-center(scope="row" class="d-md-none") W
          th.text-center(scope="row" class="d-none d-md-table-cell") Draws
          th.text-center(scope="row" class="d-md-none") D
          // /ko
          // ko if: !$root.usePoints()
          th.text-center(scope="row") Clan Wins
          th.text-center(scope="row") Clan Losses
          // /ko
          th.text-center(scope="row" class="d-none d-md-table-cell") Match Wins
          th.text-center(scope="row" class="d-md-none") MW
          th.text-center(scope="row" class="d-none d-md-table-cell") Match Losses
          th.text-center(scope="row" class="d-md-none") ML
          th.text-center(scope="row") ΔMatch
          th.text-center(scope="row") +TD 
          th.text-center(scope="row") -TD
          th.text-center(scope="row") ΔTD
        tbody
          //ko foreach: $data
          tr
            td(scope="row" data-bind="text:$index()+1")
            td
              // ko if: $data.hasOwnProperty("logo")
              img(data-bind="attr:{src: `https://cdn2.rebbl.net/${logo}`}" style="width:32px;margin-right:15px")
              // /ko
              a(data-bind="text:clan,attr:{href:`/clan/clan/${clan}`}")
            // ko if: $root.usePoints() && $data.hasOwnProperty("clanPoints")
            td.text-center(data-bind="text:clanPoints")
            td.text-center(data-bind="text:clanWins")
            td.text-center(data-bind="text:clanDraws")
            // /ko
            // ko if: !$root.usePoints()
            td.text-center(data-bind="text:clanWins")
            td.text-center(data-bind="text:clanLosses")
            // /ko
            td.text-center(data-bind="text:matchWins")
            td.text-center(data-bind="text:matchLosses")
            td.text-center(data-bind="text:(matchWins - matchLosses)")
            td.text-center(data-bind="text:tdFor")
            td.text-center(data-bind="text:tdAgainst")
            td.text-center(data-bind="text:tdDiff")
          // /ko
    // /ko
    // /ko

block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn2.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.

    // this allows if to iterate of object properties.
    ko.bindingHandlers.foreachprop = {
        transformObject: function (obj) {
            var properties = [];
            ko.utils.objectForEach(obj, function (key, value) {
                properties.push({ key: key, value: value });
            });
            properties = properties.sort(function(a,b){return a.key > b.key ? 1 : -1;})
            return properties;
        },
        init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var properties = ko.pureComputed(function () {
            var obj = ko.utils.unwrapObservable(valueAccessor());
            return ko.bindingHandlers.foreachprop.transformObject(obj);
            });
            ko.applyBindingsToNode(element, { foreach: properties }, bindingContext);
            return { controlsDescendantBindings: true };
        }
    };

    class StandingsModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }
      map(data){
        if(data){
          delete data._id;
          Object.assign(this, data);
        }
      }
    }


    class ViewModel{
      constructor(data){
        this.donators = [];
        this.league = "clan";
        this.season = "";
        this.seasons = [];
        this.standings = {};

        this.collator = new Intl.Collator(undefined, {numeric: true, sensitivity: "base"});
        ko.track(this);
      }

      competitionUrl(comp){
        return `/!{company}/${this.league}/${encodeURIComponent(comp[0].competition)}`;
      };
      loadSeason(season){
        if (season) model.season = season;
        this.standings={};

        let xhr = new XMLHttpRequest();

        xhr.open("GET", `/api/v2/standings/${this.league}/${this.season}`  ,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {
          let data = xhr.response.map(x => new StandingsModel(x));
          data = this._groupBy(data,"division")

          this.standings=data;
        }.bind(this);
        xhr.send();
      }
      usePoints(){
        return this.season > "season 8";
      }


      loadSeasons(){
        let xhr = new XMLHttpRequest();

        xhr.open("GET", `/api/v2/league/${this.league}/seasons`  ,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {
          let seasons = xhr.response.sort(this.collator.compare);

          this.seasons = seasons
          this.season = seasons[seasons.length-1];
          this.loadSeason();
        }.bind(this);
        xhr.send();
      }
      
      _groupBy(xs, key) {
        return xs.reduce(function(rv, x) {
          (rv[x[key]] = rv[x[key]] || []).push(x);
          return rv;
        }, {});
      };
    }

    let model = new ViewModel({});

    $(document).ready(function(){
      ko.applyBindings(model);
      model.loadSeasons();
    });
    
