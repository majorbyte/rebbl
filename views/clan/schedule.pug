extends ../no-cache-sub-relayout.pug

block vars
  - let options = {active: league, title: "REBBL 11", company:"clan"}
  - let fullJquery = true
  - if (!active) { var active =  (options && options.active) ? options.active : "" }
  - let company = "clan";

block head
  style.
    .MatchRow-contentWrapper--hover:hover .text-info{color:#e67b00 !important}
    .TeamLabelLogo{max-width: 32px;max-height: 32px;}

block content
  div(class="Background u-bottomPadding--large u-topPadding--medium")
    div(class="container navcontainer" data-index="0" id="app")
      h1(class="u-no-text-transform u-verticalMargin--xx-small") {{schedules[0] ? schedules[0].competition : ''}}
      div(class="row col-12 justify-content-center" )
        template(v-for="row in numberOfRounds")
          div(class="col-12 col-lg-6 col-xl-4 col-md-6 mx-auto table-striped" style="display:unset" )
            div(class="col-12 TableHeader col-md-11 col-xl-12 col-lg-12 col-sm-12" style="display:block;border-bottom: 3px solid #bdbcbccf;padding-bottom: 2px;text-align:center")
              div(title="" class="Standings-details Standings-header highlight" ) Round {{row}}
            template(v-for="col in numberOfHouses" )
              a(:set="_schedule = schedule(row,col)" class="row col-12 g-0 col-md-11 col-xl-12 col-lg-12 col-sm-12" v-bind:href="'/'+ _schedule.season + '/' + _schedule.competition + '/' + _schedule.round + '/' + _schedule.house" style="padding-left:15px;padding-right:15px")
                .col.row.g-0
                  .col.text-start
                    img(v-bind:src="'https://cdn.rebbl.net/' + _schedule.home.logo" alt="" class="TeamLabelLogo" )
                  .col.text-info {{ _schedule.home.clan }}
                .col.text-center()
                  template(v-if="_schedule.home.hasOwnProperty('win')")
                    template(v-if="_schedule.home.win > _schedule.away.win")
                      span(class="is-winner") {{_schedule.home.win}}
                      span(class="") -
                      span(class="") {{_schedule.away.draw}}
                      span(class="") -
                      span(class="") {{_schedule.away.win}}
                    template(v-else-if="_schedule.home.win < _schedule.away.win")
                      span(class="") {{_schedule.home.win}}
                      span(class="") -
                      span(class="") {{_schedule.away.draw}}
                      span(class="") -
                      span(class=" is-winner") {{_schedule.away.win}}
                    template(v-else)
                      span(class="") {{_schedule.home.win}}
                      span(class="") -
                      span(class="") {{_schedule.away.draw}}
                      span(class="") -
                      span(class="") {{_schedule.away.win}}
                  template(v-if="_schedule.home.hasOwnProperty('score')")
                    template(v-if="_schedule.home.score > _schedule.away.score")
                      span(class="MatchStatus-score is-winner") {{_schedule.home.score}}
                      span(class="MatchStatus-score") -
                      span(class="MatchStatus-score") {{_schedule.away.score}}
                    template(v-else-if="_schedule.home.score < _schedule.away.score")
                      span(class="MatchStatus-score") {{_schedule.home.score}}
                      span(class="MatchStatus-score") -
                      span(class="MatchStatus-score is-winner") {{_schedule.away.score}}                  
                .col.row.g-0
                  .col.text-end
                    .text-info {{ _schedule.away.clan }}
                  .col.text-end
                    img(v-bind:src="'https://cdn.rebbl.net/' + _schedule.away.logo" alt="" class="TeamLabelLogo")
block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn.rebbl.net/scripts/vue-2.6.10.min.js")
  - else
    script(src="/scripts/vue-2.6.10.min.js")

  script.
        // app Vue instance
    var app = new Vue({
      // app initial state
      data: {
        schedules: []
      },
      computed: {
        numberOfRounds() {
          return [... new Set(this.schedules.map(x => x.round))].length ;
        },
        numberOfHouses() {
          return this.schedules.filter(x => x.round ===1).length;
        }
      },
      methods:{
        schedule: function(round, house){
          return this.schedules.find(x => x.round == round && x.house == house )
        }
      },
      // methods that implement data logic.
      // note there's no DOM manipulation here at all.
      async mounted() {
          let path = window.location.pathname.split("/");
          let response = await fetch(`/api/v2/clan/schedule/${path[path.length-2]}/${path[path.length-1]}`);
          let data = await response.json();
          this.schedules = data.sort((a,b)=>{
              if(a.round > b.round) return 1;
              if(a.round < b.round) return -1;
              if(a.house > b.house) return 1;
              if(a.house < b.house) return -1;
              return 0;
          });
          return 0;
      }
    })

    // mount
    app.$mount('#app')