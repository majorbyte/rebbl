extends ../no-cache-sub-relayout.pug

block append vars
  -let options = {company:"Team"}

block content
  div(class="container")
    div(class="row col-12 d-flex flex-wrap align-items-center")
      img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/logo/256x256/logo_${logo.toLowerCase()}.png`}" class="align-top" style="height:100px")
      span(class="h1" data-bind="text: teamName(), style:{color: teamColor()}")

      div(class="col text-right")
        img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/races/${idraces}.png`}" class="align-top" style="height:100px")
        // ko if: apothecary > 0
        img(src=`https://cdn2.rebbl.net/images/apothecary.png` class="align-top" )
        // /ko

        // ko if: isNecro()
        img(src=`https://cdn2.rebbl.net/images/necromancer.png` class="align-top")
        // /ko

        // ko if: stadium()
        img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/stadium/${stadium().name.toLowerCase()}.png`,title:`${stadiumDescription()}`}" class="align-top")
        // /ko
      div(class="row col-12")
        h3(style="margin-top: 0px;")
          a.highlight(data-bind="attr:{href:`/coach/${idcoach}/details`}, text: coachname")
      div(class="row col-12")
        h3(style="margin-top: 0px;")
          i(data-bind="text: leitmotiv") 
    br
    div(class="clearfix")
    div(class="row" style="margin-left:0px")
      div(class="col-md-2 col-6")
        strong Current TV
      div(class="col-md-2 col-6")
        strong(data-bind="text:value")
      div(class="col-md-2 col-6")
        strong Fan Factor
      div(class="col-md-2 col-6")
        strong(data-bind="text:popularity")
      div(class="col-md-2 col-6")
        strong Stadium name
      div(class="col-md-2 col-6")
        strong(data-bind="text:stadiumname")
      div(class="col-md-2 col-6")
        strong Next match TV
      div(class="col-md-2 col-6")
        strong(data-bind="text:nextMatchTV") 
      div(class="col-md-2 col-6")
        strong Rerolls
      div(class="col-md-2 col-6")
        strong(data-bind="text:rerolls") 
      div(class="col-md-2 col-6")
        strong Total cash earned
      div(class="col-md-2 col-6")
        strong(data-bind="text:stats.cashearned/1000 + 'k'")
      div(class="col-md-2 col-6")
        strong Actual TV
      div(class="col-md-2 col-6")
        strong(data-bind="text:actualTV")
      div(class="col-md-2 col-6")
        strong Cheerleader
      div(class="col-md-2 col-6")
        strong(data-bind="text:cheerleaders")
      div(class="col-md-2 col-6")
        strong Spiralling Expenses
      div(class="col-md-2 col-6")
        strong(data-bind="text:stats.spirallingexpenses/1000  + 'k'")
      div(class="col-md-2 col-6")
        strong Cash
      div(class="col-md-2 col-6")
        strong(data-bind="text:cash/1000 + 'k'")  
      div(class="col-md-2 col-6")
        strong Assistant
      div(class="col-md-2 col-6")
        strong(data-bind="text:assistantcoaches")
      div(class="col-md-2 col-6")
        strong Audience
      div(class="col-md-2 col-6")
        strong(data-bind="text:stats.nbsupporters/1000 + 'k'")

    div(class="row" style="margin-left:0px")
      div(class="col-12 table-responsive-md")
        table(class="table table-striped") 
          thead(class="headerText")
            tr 
              th
              th(class="d-none d-md-table-cell") tackles
              th(class="d-md-none") Tckl
              th(class="d-none d-md-table-cell") injuries
              th(class="d-md-none") Inj
              th stuns
              th ko
              th CAS
              th dead
              th(class="d-none d-md-table-cell") running (m)
              th(class="d-md-none") Run (m)
              th(class="d-none d-md-table-cell") passing (m)
              th(class="d-md-none") Pas (m)
              th(class="d-none d-md-table-cell") passes
              th(class="d-md-none") Pas
              th(class="d-none d-md-table-cell") interc.
              th(class="d-md-none") Int
              th(class="d-none d-md-table-cell") touchdowns
              th(class="d-md-none") TDs
              th surfs
          tbody
            tr
              td inflicted
              td(data-bind="text:stats.inflictedtackles")
              td(data-bind="text:stats.inflictedinjuries")
              td(data-bind="text:stats.inflictedstuns")
              td(data-bind="text:stats.inflictedko")
              td(data-bind="text:stats.inflictedcasualties")
              td(data-bind="text:stats.inflicteddead")
              td(data-bind="text:stats.inflictedmetersrunning")
              td(data-bind="text:stats.inflictedmeterspassing")
              td(data-bind="text:stats.inflictedpasses")
              td(data-bind="text:stats.inflictedinterceptions")
              td(data-bind="text:stats.inflictedtouchdowns")
              td(data-bind="text:stats.inflictedpushouts")
            tr  
              td sustained
              td(data-bind="text:stats.sustainedtackles")
              td(data-bind="text:stats.sustainedinjuries")
              td(data-bind="text:stats.sustainedstuns")
              td(data-bind="text:stats.sustainedko")
              td(data-bind="text:stats.sustainedcasualties")
              td(data-bind="text:stats.sustaineddead")
              td(data-bind="text:stats.sustainedmetersrunning")
              td(data-bind="text:stats.sustainedmeterspassing")
              td(data-bind="text:stats.sustainedpasses")
              td(data-bind="text:stats.sustainedinterceptions")
              td(data-bind="text:stats.sustainedtouchdowns")
              td(data-bind="text:stats.sustainedpushouts")

    br
    nav(class="col-12")
      div(class="nav nav-tabs" id="nav-tab" role="tablist")
        a(class="nav-item nav-link active" id="nav-home-tab" data-toggle="tab" href="#nav-home" role="tab" aria-controls="nav-home" aria-selected="true" data-bind="click:selectCurrent") Current &nbsp;
          //ko if: loadingCurrent
          i(class="fa fa-spinner fa-spin" style="font-size:22px;color: #e67b00;")
          // /ko
        a(class="nav-item nav-link" id="nav-profile-tab" data-toggle="tab" href="#nav-home" role="tab" aria-controls="nav-profile" aria-selected="false" data-bind="click:selectPrevious") Previous &nbsp;
          //ko if: loadingPrevious
          i(class="fa fa-spinner fa-spin" style="font-size:22px;color: #e67b00;")
          // /ko
        a(class="nav-item nav-link" id="nav-contact-tab" data-toggle="tab" href="#nav-home" role="tab" aria-controls="nav-contact" aria-selected="false" data-bind="click:selectJourneymen") Star Players &amp; Loners &nbsp;
          //ko if: loadingJourneymen
          i(class="fa fa-spinner fa-spin" style="font-size:22px;color: #e67b00;")
          // /ko
        a(class="nav-item nav-link" id="nav-history-tab" data-toggle="tab" href="#nav-history" role="tab" aria-controls="nav-history" aria-selected="false" data-bind="click:selectHistory") History &nbsp;
          //ko if: loadingHistory
          i(class="fa fa-spinner fa-spin" style="font-size:22px;color: #e67b00;")
          // /ko
        a(class="nav-item nav-link" id="nav-matches-tab" data-toggle="tab" href="#nav-matches" role="tab" aria-controls="nav-matches" aria-selected="false" data-bind="click:selectMatches") Matches &nbsp;
          //ko if: loadingMatches
          i(class="fa fa-spinner fa-spin" style="font-size:22px;color: #e67b00;")
          // /ko          
    div(class="tab-content" id="tabContent")
      div(class="tab-pane fade col-12 show active table-responsive-md" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab")
        // ko template: { name: 'playerList' }
        // /ko
      div(class="tab-pane fade col-12 show table-responsive-md" id="nav-history" role="tabpanel" aria-labelledby="nav-history-tab")
        table(class="table table-striped")
          thead(class="headerText")
            tr
              th(scope="col") Position
              th(scope="col") League
              th(scope="col") Competition
              th(scope="col") W
              th(scope="col") D
              th(scope="col") L
              th(scope="col") Î”TD
          tbody
            // ko foreach:  (standings !== null ? standings.filter(x => x.position) : [])
            tr
              td(data-bind="text:position")
              td(data-bind="text:league")
              td(data-bind="text:competition")
              td(data-bind="text:win")
              td(data-bind="text:draw")
              td(data-bind="text:loss")
              td(data-bind="text:tddiff")
            // /ko
      div(class="tab-pane fade col-12 show table-responsive-md" id="nav-matches" role="tabpanel" aria-labelledby="nav-matches-tab")
        //ko foreach: matches.sort(function(a,b){return a.match.id < b.match.id ? 1 : -1;})
        //ko with: $data.match
        br
        div(class="MatchRow MatchRow-match MatchRow-header" data-bind="text: `${competitionname} - ${hasOwnProperty('round') ? round || 0 : 0}`")
        div(class="MatchRow MatchRow-match" )
          a(data-bind="attr:{href: `/rebbl/match/${$parent.uuid}` }" class="MatchRow-contentWrapper MatchRow-contentWrapper--hover" target="_blank")
            div(class="MatchRow-team")
              div(class="TeamLabel TeamLabel--reverse")
                div(class="TeamLabel-block"): img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/logo/logo_${teams[0].teamlogo.toLowerCase()}.png`}" alt="" class="TeamLabel-logo")
                div(class="TeamLabel-info TeamLabel-info--noScore")
                  div(class="TeamLabel-name " data-bind="text:teams[0].teamname")
                  div(class="TeamLabel-coach " data-bind="text: coaches[0].coachname")
            div(class="MatchRow-status")
              span(class="MatchStatus MatchStatus--transparent")
                span
                  // ko if: teams[0].score > teams[1].score
                  span(class="MatchStatus-score is-winner" data-bind="text: teams[0].score")
                  span(class="MatchStatus-score") -
                  span(class="MatchStatus-score"  data-bind="text: teams[1].score")
                  // /ko
                  // ko if: teams[1].score > teams[0].score
                  span(class="MatchStatus-score" data-bind="text: teams[0].score")
                  span(class="MatchStatus-score") -
                  span(class="MatchStatus-score is-winner"  data-bind="text: teams[1].score")
                  // /ko
                  // ko if: teams[1].score == teams[0].score
                  span(class="MatchStatus-score" data-bind="text: teams[0].score")
                  span(class="MatchStatus-score") -
                  span(class="MatchStatus-score"  data-bind="text: teams[1].score")
                  // /ko
            div(class="MatchRow-team")
              div(class="TeamLabel")
                div(class="TeamLabel-block"): img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/logo/logo_${teams[1].teamlogo.toLowerCase()}.png`}" alt="" class="TeamLabel-logo")
                div(class="TeamLabel-info TeamLabel-info--noScore")
                  div(class="TeamLabel-name " data-bind="text:teams[1].teamname")
                  div(class="TeamLabel-coach " data-bind="text: coaches[1].coachname")
        // /ko
        // /ko

     
 
  script(type="text/html" id="playerList")
    table(class="table table-striped")
      thead(class="headerText")
        tr
          th(scope="col") #
          th(scope="col") name
          th(scope="col") position
          th(scope="col") MA
          th(scope="col") ST
          th(scope="col") AG
          th(scope="col") AV
          th(scope="col" data-bind="click:$root.sortGamesPlayed" style="color:#ff8900;cursor:pointer") GP
          th(scope="col") MVP
          th(scope="col" style="min-width:160px") Skills
          th(scope="col") CAS
          th(scope="col" data-bind="click:$root.sortXp" style="color:#ff8900;cursor:pointer" ) SPP
          th(scope="col") Value
      tbody
        // ko template: { name: 'playerTemplate', foreach: playerList }
        // /ko

  script(type="text/html" id="playerTemplate")
    tr(data-bind="attr:{class: cssClass()}") 
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:number")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root)")
        div
          // ko if: number > 0
          // ko if: skillUp()
          img(src=`https://cdn2.rebbl.net/images/level.png` alt="", class="TeamLabel-logo" style="width:30px;margin-right:2px;height:30px;float:left;")
          // /ko
          // ko ifnot: skillUp()
          img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/skills/${level}.png`}" alt="", class="TeamLabel-logo" style="width:30px;margin-right:2px;height:30px;float:left;")
          // /ko
          // /ko
          // ko if: number === 0 
          img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/skills/starplayer.png`}" alt="", class="TeamLabel-logo" style="width:30px;margin-right:2px;height:30px;float:left;")
          // /ko
          div(class="match-stats-TeamLabel-name" data-bind="text: playerName(), style:{color: playerColor()}")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:position()")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:attributes.ma,attr:{class:maColor}")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:attributes.st,attr:{class:stColor}")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:attributes.ag,attr:{class:agColor}")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:attributes.av,attr:{class:avColor}")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:matchplayed")
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:mvp")
      td(class="td-prevent")
        // ko foreach: $data.playerSkills
        img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/skills/${$data}.png`,title:$data.replace(/([A-Z])/g, ' $1').trim()},click:$root.selectSkill.bind($data,$root) "  alt=""  data-toggle="modal" data-target="#skill-dialog" style="z-index:9999" )
        // /ko
      td(data-toggle="modal" data-target="#player-dialog"  data-bind="click:$root.selectPlayer.bind($data,$root)")
        //ko if: eic
        span.badge.badge-success EIC!
        // /ko
        //ko if: assassinated
        span.badge.badge-danger(title="The player has been assassinated and cannot be targeted again, unless it's the result of a failed assassination attempt")
          i.fa.fa-small.fa-crosshairs(style="font-size:24px") 
        // /ko        
        // ko foreach: casualties_state
        //ko if: $data !== "BadlyHurt"
        img(data-bind="attr:{src:$parent.getCASImage($data),title:$data.replace(/([A-Z])/g, ' $1').trim() }"  alt="" style="width:32px;height:32px;" )
        // /ko
        // /ko
        // ko if: ((casualties_sustained && casualties_sustained[0] === "Dead") &&( casualties_state && casualties_state.indexOf("Dead") === -1) )    
        img(src="https://cdn2.rebbl.net/images/skills/Dead.png" alt="" title="Dead" )
        // /ko
      td(data-toggle="modal" data-target="#player-dialog" data-bind="click:$root.selectPlayer.bind($data,$root),text:actualLevel()")     
      td(data-bind="text:value")

  div(class="modal" tabindex="-1" role="dialog" id="skill-dialog")
    div(class="modal-dialog modal-lg modal-dialog-centered" role="document")
      div(class="modal-content")
        div(class="modal-header")
          h5(class="modal-title" data-bind="text: activeSkill.name")
        div(class="modal-body")
          img( data-bind="attr:{src:`https://cdn2.rebbl.net/images/skills/${activeSkill.name.replace(/[ \-']/g,'')}.png`}" alt="" style=" float: left;margin-right:20px;width:145px;margin-top:20px")
          p(data-bind="text:activeSkill.description")
        div(class="modal-footer")
          button( type="button" class="btn btn-secondary" data-dismiss="modal") Close

  div(class="modal" tabindex="-1" role="dialog" id="player-dialog")
    // ko if: selectedPlayer !== null
    //ko with:selectedPlayer
    div(class="modal-dialog modal-lg modal-dialog-centered" role="document")
      div(class="modal-content")
        div(class="modal-header")
          h5(class="modal-title" data-bind="text: name")
        div(class="modal-body")
         table(class="table-striped") 
            thead(class="headerText")
              tr 
                th
                th inflicted
                th sustained
            tbody
              tr
                td tackles
                td(data-bind="text:stats.inflictedtackles")
                td(data-bind="text:stats.sustainedtackles")
              tr
                td injuries
                td(data-bind="text:stats.inflictedinjuries")
                td(data-bind="text:stats.sustainedinjuries")
              tr
                td stuns
                td(data-bind="text:stats.inflictedstuns")
                td(data-bind="text:stats.sustainedstuns")
              tr
                td ko
                td(data-bind="text:stats.inflictedko")
                td(data-bind="text:stats.sustainedko")
              tr
                td CAS
                td(data-bind="text:stats.inflictedcasualties")
                td(data-bind="text:stats.sustainedcasualties")
              tr
                td dead
                td(data-bind="text:stats.inflicteddead")
                td(data-bind="text:stats.sustaineddead")
              tr
                td running (m)
                td(data-bind="text:stats.inflictedmetersrunning")
                td -
              tr
                td passing (m)
                td(data-bind="text:stats.inflictedmeterspassing")
                td -
              tr
                td passes
                td(data-bind="text:stats.inflictedpasses")
                td -
              tr
                td catch
                td(data-bind="text:stats.inflictedcatches")
                td -
              tr
                td interc.
                td(data-bind="text:stats.inflictedinterceptions")
                td(data-bind="text:stats.sustainedinterceptions")
              tr
                td touchdowns
                td(data-bind="text:stats.inflictedtouchdowns")
                td -
              tr
                td surfs
                td(data-bind="text:stats.inflictedpushouts")      
                td -
        div(class="modal-footer")
          button( type="button" class="btn btn-secondary" data-dismiss="modal") Close
    // /ko
    // /ko

block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn2.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.
    const SKILLS = "skills.v3";
    const SKILLDESCRIPTIONS = 'skillDescriptions.v2'
    class TeamModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }
      map(data){
        if(data){
          this.actualTV = data.actualTV || 0;
          this.apothecary = data.apothecary || 0;
          this.assistantcoaches = data.assistantcoaches || 0;
          this.balms = data.balms || 0;
          this.cards = data.cards || [];
          this.cash = data.cash || 0;
          this.cheerleaders = data.cheerleaders || 0;
          this.coachname = data.coachname || '';
          this.created = data.created || '';
          this.datelastmatch = data.datelastmatch || '';
          this.id = data.id || 0;
          this.idcoach = data.idcoach || 0;
          this.idraces = data.idraces || 0;
          this.leitmotiv = data.leitmotiv || '';
          this.logo = data.logo || '';
          this.name = data.name || '';
          this.nbplayers = data.nbplayers || 0;
          this.nextMatchTV = data.nextMatchTV || 0;
          this.popularity = data.popularity || 0;
          this.rerolls = data.rerolls || 0;
          this.stadiumlevel = data.stadiumlevel || 0;
          this.stadiumname = data.stadiumname || '';
          this.stadiumtype = data.stadiumtype || '';
          this.teamcolor = data.teamcolor || '';
          this.value = data.value || 0;
          this.currentPlayers =[];
          this.pastPlayers =[];
          this.journeymen =[];

          this.roster = null;
          this.retiredPlayers = null;
          this.journeymen = null;

          this.matches = [];
          this.standings = [];
          this.playerList = this.roster;
          this.playertypes=null;
          this.skillDescriptions = null;
          this.skills = [];
          this.starplayers = null;
          this.activeSkill={name:'Block',description:''};

          this.selectedPlayer = null;

          this.loadingCurrent = false;
          this.loadingPrevious = false;
          this.loadingJourneymen= false;
          this.loadingHistory= false;
          this.loadingMatches = false;

          this.stats = new StatsModel(data.stats || {});
        };
      }

      teamColor(){
        if (/\[colour=/i.test(this.name)){
          if (/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i.test(this.name)) {
            return "#"+this.name.match(/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i)[1];
          }
          return "#000000";
        }

        return "inherit";
      }

      teamName(){
        if (/\[colour=/i.test(this.name)){
            return this.name.replace(/\[colour=.*]/i,'')
        }
        return this.name;
      }

      isNecro(){
        return this.cards.find(function(a) { return a.name  === "Necromancer" }) ? true:false;
      }

      stadium(){
        return this.cards.find(function(a) { return a.type === "Building" }) ;
      }

      stadiumDescription(){
        let stadiumDescription = {"astrogranit":"+1 on Armour rolls when a player falls while going for it.", "bazar":"During the Inducements phase, both teams receive a Wizard at no cost", "elfturf":"-1 on Armour rolls when a player falls while going for it.", "foodarea":"The 'Throw a Rock' and 'Get the Ref' kick-off events are cancelled.","nuffle":"During the Inducements phase, Star Players cost 50k less","refereearea":"During the Inducements phase, both teams receive a Bribe at no cost.","refreshmentarea":"+1 on Injury rolls when a player is pushed off the pitch (crowdsurf)", "roof":"The weather always starts as 'Nice' and the 'Changing Weather' kick-off event is cancelled.","securityarea":"The 'Riot' and 'Pitch Invasion' Kick-off events are cancelled.","viparea":"Double all gains and losses of Fan Factor." }
        return stadiumDescription[this.stadium().name.toLowerCase()];
      }

      selectSkill(self,e){
        self.activeSkill = self.skillDescriptions.find(skill => skill.name.toLowerCase() === e.replace(/([A-Z])/g, ' $1').trim().toLowerCase());
      };
      selectPlayer(self,e){
        self.selectedPlayer = e;
      };

      selectCurrent(){
        this.playerList = this.roster
      }
      selectPrevious(){
        if(this.retiredPlayers === null){
          const cb = (data) => {
            data = data || [];
            model.retiredPlayers = data
              .sort(function(a,b){
                if (a.number > b.number) return 1;
                if (a.number < b.number) return -1;
                return a.id > b.id ? 1 : -1})
              .map(x => new PlayerModel(x, model.playertypes.find(t => t.type === x.type) ));
            model.playerList = this.retiredPlayers
            model.loadingPrevious = false;
          }
          this.loadingPrevious = true;
          _loadPlayers("/retiredplayers", cb)
        } else {
          this.playerList = this.retiredPlayers
        }
      } 
      selectJourneymen(){
        if(this.journeymen === null){
          const cb = (data) => {
            data = data || [];
            model.journeymen = data
              .sort(function(a,b){
                if (a.number > b.number) return 1;
                if (a.number < b.number) return -1;
                return a.id > b.id ? 1 : -1})
              .map(x => new PlayerModel(x, x.number == 0 ? model.starplayers.find(s => s.type === x.type)  :   model.playertypes.find(t => t.type === x.type) ));
            model.playerList = this.journeymen
            model.loadingJourneymen = false;
          }
          this.loadingJourneymen = true;
          _loadPlayers("/hiredplayers", cb)
        } else {
          this.playerList = this.journeymen
        }        
      }
      selectHistory(){
        loadHistory(this.id); 
      }
      selectMatches(){
        loadMatches(this.id); 
      }

      sortGamesPlayed(){
        this.playerList = this.playerList.sort((a,b) => a.matchplayed > b.matchplayed ? -1 : 1)
      }
      sortXp(){
        this.playerList = this.playerList.sort((a,b) => a.xp > b.xp ? -1 : 1)
      }
    }

    class StatsModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }

      map(data) {
        if(data){
          this.cashearned = data.cashearned || 0;
          this.inflictedcasualties = data.inflictedcasualties || 0;
          this.inflictedcatches = data.inflictedcatches || 0;
          this.inflicteddead = data.inflicteddead || 0;
          this.inflictedexpulsions = data.inflictedexpulsions || 0;
          this.inflictedinjuries = data.inflictedinjuries || 0;
          this.inflictedinterceptions = data.inflictedinterceptions || 0;
          this.inflictedko = data.inflictedko || 0;
          this.inflictedmeterspassing = data.inflictedmeterspassing || 0;
          this.inflictedmetersrunning = data.inflictedmetersrunning || 0;
          this.inflictedpasses = data.inflictedpasses || 0;
          this.inflictedpushouts = data.inflictedpushouts || 0;
          this.inflictedstuns = data.inflictedstuns || 0;
          this.inflictedtackles = data.inflictedtackles || 0;
          this.inflictedtouchdowns = data.inflictedtouchdowns || 0;
          this.nbsupporters = data.nbsupporters || 0;
          this.spirallingexpenses = data.spirallingexpenses || 0;
          this.sustainedcasualties = data.sustainedcasualties || 0;
          this.sustainedcatches = data.sustainedcatches || 0;
          this.sustaineddead = data.sustaineddead || 0;
          this.sustainedexpulsions = data.sustainedexpulsions || 0;
          this.sustainedinjuries = data.sustainedinjuries || 0;
          this.sustainedinterceptions = data.sustainedinterceptions || 0;
          this.sustainedko = data.sustainedko || 0;
          this.sustainedmeterspassing = data.sustainedmeterspassing || 0;
          this.sustainedmetersrunning = data.sustainedmetersrunning || 0;
          this.sustainedpasses = data.sustainedpasses || 0;
          this.sustainedpushouts = data.sustainedpushouts || 0;
          this.sustainedstuns = data.sustainedstuns || 0;
          this.sustainedtackles = data.sustainedtackles || 0;
          this.sustainedtouchdowns = data.sustainedtouchdowns || 0;
         } 
      }
    }

    class PlayerModel{
      constructor(data, playerType){
        this.map(data);
        this.playerType = playerType;
        
        ko.defineProperty(this, 'maColor', function () {
          if (this.attributes.ma > this.playerType.ma) return "green";
          if (this.attributes.ma < this.playerType.ma) return "red";
          return "" ;
        });
        ko.defineProperty(this, 'stColor', function () {
          if (this.attributes.st > this.playerType.st) return "green";
          if (this.attributes.st < this.playerType.st) return "red";
          return "" ;
        });
        ko.defineProperty(this, 'agColor', function () {
          if (this.attributes.ag > this.playerType.ag) return "green";
          if (this.attributes.ag < this.playerType.ag) return "red";
          return "" ;
        });
        ko.defineProperty(this, 'avColor', function () {
          if (this.attributes.av > this.playerType.av) return "green";
          if (this.attributes.av < this.playerType.av) return "red";
          return "" ;
        });
        ko.defineProperty(this, 'playerSkills', function () {
          let sk = [...model.skills[this.type]|| []] ;
          for(let x = 0; x < this.skills.length;x++){
            if(sk.indexOf(this.skills[x]) === -1 || this.skills[x].indexOf("Increase") === 0)
              sk.push(this.skills[x]);
          }
          return sk;
        });


        ko.track(this);
      }

      map(data, playerType){
        this.active = data.active || false;
        this.attributes = data.attributes || [];
        this.casualties_state = data.casualties_state || [];
        this.casualties_sustained = data.casualties_sustained || [];
        this.id = data.id || 0;
        this.level = data.level || 0;
        this.matchplayed = data.matchplayed || 0;
        this.mvp = data.mvp || 0;
        this.name = data.number === 0 ? data.type.split('_')[1].replace(/([A-Z])/g, ' $1') : data.name;
        this.number = data.number || 0;
        this.skills = data.skills || [];
        this.stats = data.stats || [];
        this.suspended_next_match = data.suspended_next_match || false;
        this.type = data.type || '';
        this.value = data.value || 0;
        this.xp = data.xp || 0;
        this.eic = data.eic || false;
        this.assassinated = data.assassinated || false;
      }

      cssClass(){
        return  (this.active && this.casualties_sustained && 
               (this.casualties_sustained.length === 1 && this.casualties_sustained[0] !== "BadlyHurt" ))
          ? "stats player-out" 
          : "stats";
      }

      skillUp(){
        let levels = [0,0,6,16,31,51,76,176,"*"];
        return this.xp >= levels[this.level+1];
      }

      actualLevel(){
        let levels = [0,0,6,16,31,51,76,176,"*"];
        return `${this.xp}/${levels[this.level+1]}`
      }

      getCASImage(e){
        let bust = "";  
        switch(e){
          case "DamagedBack":
          case "SmashedKnee":
            bust="NigglingInjury2";
            break;
          case"BrokenNeck":
            bust="AgilityBust";
            break;
          case "SmashedCollarBone":
           bust="StrengthBust";
            break;
          case "SeriousConcussion":
          case "FracturedSkull":
            bust="ArmourBust";
            break;
          case "SmashedHip":
          case "SmashedAnkle":
            bust= "MovementBust";
            break;
          default:
            bust= e;
            break;
        }

        return `https://cdn2.rebbl.net/images/skills/${bust}.png`
      }

      playerColor(){
        if (/\[colour=/i.test(this.name)){
          if (/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i.test(this.name)) {
            return "#"+this.name.match(/\[colour='[0-9A-F]{2}([0-9A-F]{6})']/i)[1];
          }
          return "#000000";
        }

        return "inherit";
      }
      playerName(){
        if (/\[colour=/i.test(this.name)){
            return this.name.replace(/\[colour=.*]/i,'')
        }
        return this.name;
      }

      position(){
        let pos = "";
        if(this.number >0){
          let playerType = this.type.split('_')
          pos  = playerType.length === 3 ? playerType[2].replace(/([A-Z])/g, ' $1') : playerType[1].replace(/([A-Z])/g, ' $1') 
        }
        return pos;
      }

      playerId(){
        return this.position() === "" ? this.name.replace(/ /g,'') : (this.id ? this.id : this.name.replace(/ /g,''))
      }
    }

    class SkillModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }

      map(data){
        if(data){
          this.id =data.id;
          this.name = data.name;
        }
      }

    }

    function _loadPlayers(type, cb){
      let xhr = new XMLHttpRequest();
      let path = window.location.pathname.split('/');

      xhr.open("GET", "/api/v2/team/" + path[path.length-1] + type  ,true)
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.responseType = 'json';

      xhr.onload  = function() {//Call a function when the state changes.
        cb(xhr.response)
      }

      xhr.send();
    }

    function loadCurrentPlayers(){

        const cb = function(data){
          model.roster = data
            .sort(function(a,b){
              if (a.number > b.number) return 1;
              if (a.number < b.number) return -1;
              return a.id > b.id ? 1 : -1}
            )
            .map(x => new PlayerModel(x, model.playertypes.find(t => t.type === x.type) ));
          model.playerList = model.roster;
          model.loadingCurrent = false;
        }
        model.loadingCurrent = true;
        _loadPlayers("/players", cb);
    }

    function loadTeam(){
      let xhr = new XMLHttpRequest();
      let path = window.location.pathname.split('/');

      xhr.open("GET", "/api/v2/team/" + path[path.length-1]  ,true)
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.responseType = 'json';

      xhr.onload  = function() {//Call a function when the state changes.
        model.map(xhr.response.team);
        model.stats.map(xhr.response.stats);
        loadPlayertypes(model.idraces);
        loadSkills();
        loadStarPlayers();
        loadCurrentPlayers();
      }

      xhr.send();
    }

  
    function loadMatches(id){
      let xhr = new XMLHttpRequest();

      xhr.open("GET", `/api/v2/team/${id}/matches`  ,true)
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.responseType = 'json';

      xhr.onload  = function() {//Call a function when the state changes.
        model.matches =xhr.response;
      }

      xhr.send();
    }

    async function loadSkills(){
      const storage = window.localStorage;
      let descriptions = null;
  
      if (storage)    
        descriptions = localStorage.getItem(SKILLDESCRIPTIONS);

      if(!descriptions){
        let response = await fetch("/api/v2/bloodbowl/skillDescriptions");
        if(response.ok){
          model.skillDescriptions = await response.json();
      
          if (storage)
            storage.setItem(SKILLDESCRIPTIONS, JSON.stringify(model.skillDescriptions));    
        }
      } else {
        model.skillDescriptions = JSON.parse(descriptions);
      }
      if (storage)    
        skills = localStorage.getItem(SKILLS);

      if(!skills){
        let response = await fetch("/api/v2/bloodbowl/skills");
        if(response.ok){
          model.skills = await response.json();
      
          if (storage)
            storage.setItem(SKILLS, JSON.stringify(model.skillDescriptions));    
        }
      } else {
        model.skills = JSON.parse(skills);
      }
    }

    function loadStarPlayers(){
      const storage = window.localStorage;
      let starplayers = null;
  
      if (storage)    
        starplayers = localStorage.getItem('starplayers');

      if(!starplayers){
        let xhr = new XMLHttpRequest();
        let path = window.location.pathname.split('/');

        xhr.open("GET", "/api/v2/bloodbowl/starplayers"  ,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {//Call a function when the state changes.
          model.starplayers =xhr.response;
          const storage = window.localStorage;
      
          if (storage)
            storage.setItem('starplayers', JSON.stringify(xhr.response));    
        }

        xhr.send();
      } else {
        model.starplayers = JSON.parse(starplayers);
      }
    }


    function loadPlayertypes(id){
      const storage = window.localStorage;
      let playerTypes = [];
  
      if (storage){
        playerTypes = JSON.parse(localStorage.getItem('playertypes') || "[]");      
      }    
        

      let found = playerTypes.filter(x => x.race === id);

      if (found.length > 0){
        model.playertypes =found;
        return;
      }

      let xhr = new XMLHttpRequest();
      let path = window.location.pathname.split('/');

      xhr.open("GET", "/api/v2/bloodbowl/playertypes/"+id  ,true)
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.responseType = 'json';

      xhr.onload  = function() {//Call a function when the state changes.
        model.playertypes =xhr.response;

        const storage = window.localStorage;
    
        if (storage){
          let  playerTypes = JSON.parse(localStorage.getItem('playertypes') || "[]");      
          playerTypes = playerTypes.concat(xhr.response)
          storage.setItem('playertypes', JSON.stringify(playerTypes));    
        } 
      }
      xhr.send();
    }

    function loadHistory(id){
      let xhr = new XMLHttpRequest();

      xhr.open("GET", "/api/v2/standings/"+id  ,true)
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.responseType = 'json';

      xhr.onload  = function() {//Call a function when the state changes.
        let data = xhr.response.filter(x => x.season);
        model.standings =data.sort((a,b) => Number(a.season.replace(/season /i,'')) > Number(b.season.replace(/season /i,'')) ? 1 : -1);
      }

      xhr.send();
    }

    let model = new TeamModel({});
    ko.applyBindings(model);
    $(document).ready(function(){

      loadTeam();
      
      $(".td-prevent").click(function (event) {
          if(event.target.nodeName !== "IMG") event.stopPropagation();
      });
    });


